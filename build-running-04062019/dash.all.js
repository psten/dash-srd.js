/*! v3.0.0-684cb5b1, 2019-04-18T06:30:14Z */
(function() {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw a.code = "MODULE_NOT_FOUND", a;
                }
                var p = n[i] = {
                    exports: {}
                };
                e[i][0].call(p.exports, function(r) {
                    var n = e[i][1][r];
                    return o(n || r);
                }, p, p.exports, r, e, n, t);
            }
            return n[i].exports;
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
    }
    return r;
})()({
    1: [ function(_dereq_, module, exports) {
        "use strict";
        var UTF8 = {};
        UTF8.encode = function(s) {
            var u = [];
            for (var i = 0; i < s.length; ++i) {
                var c = s.charCodeAt(i);
                if (c < 128) {
                    u.push(c);
                } else if (c < 2048) {
                    u.push(192 | c >> 6);
                    u.push(128 | 63 & c);
                } else if (c < 65536) {
                    u.push(224 | c >> 12);
                    u.push(128 | 63 & c >> 6);
                    u.push(128 | 63 & c);
                } else {
                    u.push(240 | c >> 18);
                    u.push(128 | 63 & c >> 12);
                    u.push(128 | 63 & c >> 6);
                    u.push(128 | 63 & c);
                }
            }
            return u;
        };
        UTF8.decode = function(u) {
            var a = [];
            var i = 0;
            while (i < u.length) {
                var v = u[i++];
                if (v < 128) {} else if (v < 224) {
                    v = (31 & v) << 6;
                    v |= 63 & u[i++];
                } else if (v < 240) {
                    v = (15 & v) << 12;
                    v |= (63 & u[i++]) << 6;
                    v |= 63 & u[i++];
                } else {
                    v = (7 & v) << 18;
                    v |= (63 & u[i++]) << 12;
                    v |= (63 & u[i++]) << 6;
                    v |= 63 & u[i++];
                }
                a.push(String.fromCharCode(v));
            }
            return a.join("");
        };
        var BASE64 = {};
        (function(T) {
            var encodeArray = function encodeArray(u) {
                var i = 0;
                var a = [];
                var n = 0 | u.length / 3;
                while (0 < n--) {
                    var v = (u[i] << 16) + (u[i + 1] << 8) + u[i + 2];
                    i += 3;
                    a.push(T.charAt(63 & v >> 18));
                    a.push(T.charAt(63 & v >> 12));
                    a.push(T.charAt(63 & v >> 6));
                    a.push(T.charAt(63 & v));
                }
                if (2 == u.length - i) {
                    var v = (u[i] << 16) + (u[i + 1] << 8);
                    a.push(T.charAt(63 & v >> 18));
                    a.push(T.charAt(63 & v >> 12));
                    a.push(T.charAt(63 & v >> 6));
                    a.push("=");
                } else if (1 == u.length - i) {
                    var v = u[i] << 16;
                    a.push(T.charAt(63 & v >> 18));
                    a.push(T.charAt(63 & v >> 12));
                    a.push("==");
                }
                return a.join("");
            };
            var R = function() {
                var a = [];
                for (var i = 0; i < T.length; ++i) {
                    a[T.charCodeAt(i)] = i;
                }
                a["=".charCodeAt(0)] = 0;
                return a;
            }();
            var decodeArray = function decodeArray(s) {
                var i = 0;
                var u = [];
                var n = 0 | s.length / 4;
                while (0 < n--) {
                    var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i + 1)] << 12) + (R[s.charCodeAt(i + 2)] << 6) + R[s.charCodeAt(i + 3)];
                    u.push(255 & v >> 16);
                    u.push(255 & v >> 8);
                    u.push(255 & v);
                    i += 4;
                }
                if (u) {
                    if ("=" == s.charAt(i - 2)) {
                        u.pop();
                        u.pop();
                    } else if ("=" == s.charAt(i - 1)) {
                        u.pop();
                    }
                }
                return u;
            };
            var ASCII = {};
            ASCII.encode = function(s) {
                var u = [];
                for (var i = 0; i < s.length; ++i) {
                    u.push(s.charCodeAt(i));
                }
                return u;
            };
            ASCII.decode = function(u) {
                for (var i = 0; i < s.length; ++i) {
                    a[i] = String.fromCharCode(a[i]);
                }
                return a.join("");
            };
            BASE64.decodeArray = function(s) {
                var u = decodeArray(s);
                return new Uint8Array(u);
            };
            BASE64.encodeASCII = function(s) {
                var u = ASCII.encode(s);
                return encodeArray(u);
            };
            BASE64.decodeASCII = function(s) {
                var a = decodeArray(s);
                return ASCII.decode(a);
            };
            BASE64.encode = function(s) {
                var u = UTF8.encode(s);
                return encodeArray(u);
            };
            BASE64.decode = function(s) {
                var u = decodeArray(s);
                return UTF8.decode(u);
            };
        })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
        if (typeof exports !== "undefined") {
            exports.decode = BASE64.decode;
            exports.decodeArray = BASE64.decodeArray;
            exports.encode = BASE64.encode;
            exports.encodeASCII = BASE64.encodeASCII;
        }
    }, {} ],
    2: [ function(_dereq_, module, exports) {
        "use strict";
        (function(exports) {
            "use strict";
            var specialCea608CharsCodes = {
                42: 225,
                92: 233,
                94: 237,
                95: 243,
                96: 250,
                123: 231,
                124: 247,
                125: 209,
                126: 241,
                127: 9608,
                128: 174,
                129: 176,
                130: 189,
                131: 191,
                132: 8482,
                133: 162,
                134: 163,
                135: 9834,
                136: 224,
                137: 32,
                138: 232,
                139: 226,
                140: 234,
                141: 238,
                142: 244,
                143: 251,
                144: 193,
                145: 201,
                146: 211,
                147: 218,
                148: 220,
                149: 252,
                150: 8216,
                151: 161,
                152: 42,
                153: 8217,
                154: 9473,
                155: 169,
                156: 8480,
                157: 8226,
                158: 8220,
                159: 8221,
                160: 192,
                161: 194,
                162: 199,
                163: 200,
                164: 202,
                165: 203,
                166: 235,
                167: 206,
                168: 207,
                169: 239,
                170: 212,
                171: 217,
                172: 249,
                173: 219,
                174: 171,
                175: 187,
                176: 195,
                177: 227,
                178: 205,
                179: 204,
                180: 236,
                181: 210,
                182: 242,
                183: 213,
                184: 245,
                185: 123,
                186: 125,
                187: 92,
                188: 94,
                189: 95,
                190: 124,
                191: 8764,
                192: 196,
                193: 228,
                194: 214,
                195: 246,
                196: 223,
                197: 165,
                198: 164,
                199: 9475,
                200: 197,
                201: 229,
                202: 216,
                203: 248,
                204: 9487,
                205: 9491,
                206: 9495,
                207: 9499
            };
            var getCharForByte = function getCharForByte(byte) {
                var charCode = byte;
                if (specialCea608CharsCodes.hasOwnProperty(byte)) {
                    charCode = specialCea608CharsCodes[byte];
                }
                return String.fromCharCode(charCode);
            };
            var NR_ROWS = 15, NR_COLS = 32;
            var rowsLowCh1 = {
                17: 1,
                18: 3,
                21: 5,
                22: 7,
                23: 9,
                16: 11,
                19: 12,
                20: 14
            };
            var rowsHighCh1 = {
                17: 2,
                18: 4,
                21: 6,
                22: 8,
                23: 10,
                19: 13,
                20: 15
            };
            var rowsLowCh2 = {
                25: 1,
                26: 3,
                29: 5,
                30: 7,
                31: 9,
                24: 11,
                27: 12,
                28: 14
            };
            var rowsHighCh2 = {
                25: 2,
                26: 4,
                29: 6,
                30: 8,
                31: 10,
                27: 13,
                28: 15
            };
            var backgroundColors = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent" ];
            var logger = {
                verboseFilter: {
                    DATA: 3,
                    DEBUG: 3,
                    INFO: 2,
                    WARNING: 2,
                    TEXT: 1,
                    ERROR: 0
                },
                time: null,
                verboseLevel: 0,
                setTime: function setTime(newTime) {
                    this.time = newTime;
                },
                log: function log(severity, msg) {
                    var minLevel = this.verboseFilter[severity];
                    if (this.verboseLevel >= minLevel) {
                        console.log(this.time + " [" + severity + "] " + msg);
                    }
                }
            };
            var numArrayToHexArray = function numArrayToHexArray(numArray) {
                var hexArray = [];
                for (var j = 0; j < numArray.length; j++) {
                    hexArray.push(numArray[j].toString(16));
                }
                return hexArray;
            };
            var PenState = function PenState(foreground, underline, italics, background, flash) {
                this.foreground = foreground || "white";
                this.underline = underline || false;
                this.italics = italics || false;
                this.background = background || "black";
                this.flash = flash || false;
            };
            PenState.prototype = {
                reset: function reset() {
                    this.foreground = "white";
                    this.underline = false;
                    this.italics = false;
                    this.background = "black";
                    this.flash = false;
                },
                setStyles: function setStyles(styles) {
                    var attribs = [ "foreground", "underline", "italics", "background", "flash" ];
                    for (var i = 0; i < attribs.length; i++) {
                        var style = attribs[i];
                        if (styles.hasOwnProperty(style)) {
                            this[style] = styles[style];
                        }
                    }
                },
                isDefault: function isDefault() {
                    return this.foreground === "white" && !this.underline && !this.italics && this.background === "black" && !this.flash;
                },
                equals: function equals(other) {
                    return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
                },
                copy: function copy(newPenState) {
                    this.foreground = newPenState.foreground;
                    this.underline = newPenState.underline;
                    this.italics = newPenState.italics;
                    this.background = newPenState.background;
                    this.flash = newPenState.flash;
                },
                toString: function toString() {
                    return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
                }
            };
            var StyledUnicodeChar = function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {
                this.uchar = uchar || " ";
                this.penState = new PenState(foreground, underline, italics, background, flash);
            };
            StyledUnicodeChar.prototype = {
                reset: function reset() {
                    this.uchar = " ";
                    this.penState.reset();
                },
                setChar: function setChar(uchar, newPenState) {
                    this.uchar = uchar;
                    this.penState.copy(newPenState);
                },
                setPenState: function setPenState(newPenState) {
                    this.penState.copy(newPenState);
                },
                equals: function equals(other) {
                    return this.uchar === other.uchar && this.penState.equals(other.penState);
                },
                copy: function copy(newChar) {
                    this.uchar = newChar.uchar;
                    this.penState.copy(newChar.penState);
                },
                isEmpty: function isEmpty() {
                    return this.uchar === " " && this.penState.isDefault();
                }
            };
            var Row = function Row() {
                this.chars = [];
                for (var i = 0; i < NR_COLS; i++) {
                    this.chars.push(new StyledUnicodeChar());
                }
                this.pos = 0;
                this.currPenState = new PenState();
            };
            Row.prototype = {
                equals: function equals(other) {
                    var equal = true;
                    for (var i = 0; i < NR_COLS; i++) {
                        if (!this.chars[i].equals(other.chars[i])) {
                            equal = false;
                            break;
                        }
                    }
                    return equal;
                },
                copy: function copy(other) {
                    for (var i = 0; i < NR_COLS; i++) {
                        this.chars[i].copy(other.chars[i]);
                    }
                },
                isEmpty: function isEmpty() {
                    var empty = true;
                    for (var i = 0; i < NR_COLS; i++) {
                        if (!this.chars[i].isEmpty()) {
                            empty = false;
                            break;
                        }
                    }
                    return empty;
                },
                setCursor: function setCursor(absPos) {
                    if (this.pos !== absPos) {
                        this.pos = absPos;
                    }
                    if (this.pos < 0) {
                        logger.log("ERROR", "Negative cursor position " + this.pos);
                        this.pos = 0;
                    } else if (this.pos > NR_COLS) {
                        logger.log("ERROR", "Too large cursor position " + this.pos);
                        this.pos = NR_COLS;
                    }
                },
                moveCursor: function moveCursor(relPos) {
                    var newPos = this.pos + relPos;
                    if (relPos > 1) {
                        for (var i = this.pos + 1; i < newPos + 1; i++) {
                            this.chars[i].setPenState(this.currPenState);
                        }
                    }
                    this.setCursor(newPos);
                },
                backSpace: function backSpace() {
                    this.moveCursor(-1);
                    this.chars[this.pos].setChar(" ", this.currPenState);
                },
                insertChar: function insertChar(byte) {
                    if (byte >= 144) {
                        this.backSpace();
                    }
                    var char = getCharForByte(byte);
                    if (this.pos >= NR_COLS) {
                        logger.log("ERROR", "Cannot insert " + byte.toString(16) + " (" + char + ") at position " + this.pos + ". Skipping it!");
                        return;
                    }
                    this.chars[this.pos].setChar(char, this.currPenState);
                    this.moveCursor(1);
                },
                clearFromPos: function clearFromPos(startPos) {
                    var i;
                    for (i = startPos; i < NR_COLS; i++) {
                        this.chars[i].reset();
                    }
                },
                clear: function clear() {
                    this.clearFromPos(0);
                    this.pos = 0;
                    this.currPenState.reset();
                },
                clearToEndOfRow: function clearToEndOfRow() {
                    this.clearFromPos(this.pos);
                },
                getTextString: function getTextString() {
                    var chars = [];
                    var empty = true;
                    for (var i = 0; i < NR_COLS; i++) {
                        var char = this.chars[i].uchar;
                        if (char !== " ") {
                            empty = false;
                        }
                        chars.push(char);
                    }
                    if (empty) {
                        return "";
                    } else {
                        return chars.join("");
                    }
                },
                setPenStyles: function setPenStyles(styles) {
                    this.currPenState.setStyles(styles);
                    var currChar = this.chars[this.pos];
                    currChar.setPenState(this.currPenState);
                }
            };
            var CaptionScreen = function CaptionScreen() {
                this.rows = [];
                for (var i = 0; i < NR_ROWS; i++) {
                    this.rows.push(new Row());
                }
                this.currRow = NR_ROWS - 1;
                this.nrRollUpRows = null;
                this.reset();
            };
            CaptionScreen.prototype = {
                reset: function reset() {
                    for (var i = 0; i < NR_ROWS; i++) {
                        this.rows[i].clear();
                    }
                    this.currRow = NR_ROWS - 1;
                },
                equals: function equals(other) {
                    var equal = true;
                    for (var i = 0; i < NR_ROWS; i++) {
                        if (!this.rows[i].equals(other.rows[i])) {
                            equal = false;
                            break;
                        }
                    }
                    return equal;
                },
                copy: function copy(other) {
                    for (var i = 0; i < NR_ROWS; i++) {
                        this.rows[i].copy(other.rows[i]);
                    }
                },
                isEmpty: function isEmpty() {
                    var empty = true;
                    for (var i = 0; i < NR_ROWS; i++) {
                        if (!this.rows[i].isEmpty()) {
                            empty = false;
                            break;
                        }
                    }
                    return empty;
                },
                backSpace: function backSpace() {
                    var row = this.rows[this.currRow];
                    row.backSpace();
                },
                clearToEndOfRow: function clearToEndOfRow() {
                    var row = this.rows[this.currRow];
                    row.clearToEndOfRow();
                },
                insertChar: function insertChar(char) {
                    var row = this.rows[this.currRow];
                    row.insertChar(char);
                },
                setPen: function setPen(styles) {
                    var row = this.rows[this.currRow];
                    row.setPenStyles(styles);
                },
                moveCursor: function moveCursor(relPos) {
                    var row = this.rows[this.currRow];
                    row.moveCursor(relPos);
                },
                setCursor: function setCursor(absPos) {
                    logger.log("INFO", "setCursor: " + absPos);
                    var row = this.rows[this.currRow];
                    row.setCursor(absPos);
                },
                setPAC: function setPAC(pacData) {
                    logger.log("INFO", "pacData = " + JSON.stringify(pacData));
                    var newRow = pacData.row - 1;
                    if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
                        newRow = this.nrRollUpRows - 1;
                    }
                    this.currRow = newRow;
                    var row = this.rows[this.currRow];
                    if (pacData.indent !== null) {
                        var indent = pacData.indent;
                        var prevPos = Math.max(indent - 1, 0);
                        row.setCursor(pacData.indent);
                        pacData.color = row.chars[prevPos].penState.foreground;
                    }
                    var styles = {
                        foreground: pacData.color,
                        underline: pacData.underline,
                        italics: pacData.italics,
                        background: "black",
                        flash: false
                    };
                    this.setPen(styles);
                },
                setBkgData: function setBkgData(bkgData) {
                    logger.log("INFO", "bkgData = " + JSON.stringify(bkgData));
                    this.backSpace();
                    this.setPen(bkgData);
                    this.insertChar(32);
                },
                setRollUpRows: function setRollUpRows(nrRows) {
                    this.nrRollUpRows = nrRows;
                },
                rollUp: function rollUp() {
                    if (this.nrRollUpRows === null) {
                        logger.log("DEBUG", "roll_up but nrRollUpRows not set yet");
                        return;
                    }
                    logger.log("TEXT", this.getDisplayText());
                    var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
                    var topRow = this.rows.splice(topRowIndex, 1)[0];
                    topRow.clear();
                    this.rows.splice(this.currRow, 0, topRow);
                    logger.log("INFO", "Rolling up");
                },
                getDisplayText: function getDisplayText(asOneRow) {
                    asOneRow = asOneRow || false;
                    var displayText = [];
                    var text = "";
                    var rowNr = -1;
                    for (var i = 0; i < NR_ROWS; i++) {
                        var rowText = this.rows[i].getTextString();
                        if (rowText) {
                            rowNr = i + 1;
                            if (asOneRow) {
                                displayText.push("Row " + rowNr + ': "' + rowText + '"');
                            } else {
                                displayText.push(rowText.trim());
                            }
                        }
                    }
                    if (displayText.length > 0) {
                        if (asOneRow) {
                            text = "[" + displayText.join(" | ") + "]";
                        } else {
                            text = displayText.join("\n");
                        }
                    }
                    return text;
                },
                getTextAndFormat: function getTextAndFormat() {
                    return this.rows;
                }
            };
            var Cea608Channel = function Cea608Channel(channelNumber, outputFilter) {
                this.chNr = channelNumber;
                this.outputFilter = outputFilter;
                this.mode = null;
                this.verbose = 0;
                this.displayedMemory = new CaptionScreen();
                this.nonDisplayedMemory = new CaptionScreen();
                this.lastOutputScreen = new CaptionScreen();
                this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                this.writeScreen = this.displayedMemory;
                this.mode = null;
                this.cueStartTime = null;
            };
            Cea608Channel.prototype = {
                modes: [ "MODE_ROLL-UP", "MODE_POP-ON", "MODE_PAINT-ON", "MODE_TEXT" ],
                reset: function reset() {
                    this.mode = null;
                    this.displayedMemory.reset();
                    this.nonDisplayedMemory.reset();
                    this.lastOutputScreen.reset();
                    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                    this.writeScreen = this.displayedMemory;
                    this.mode = null;
                    this.cueStartTime = null;
                    this.lastCueEndTime = null;
                },
                getHandler: function getHandler() {
                    return this.outputFilter;
                },
                setHandler: function setHandler(newHandler) {
                    this.outputFilter = newHandler;
                },
                setPAC: function setPAC(pacData) {
                    this.writeScreen.setPAC(pacData);
                },
                setBkgData: function setBkgData(bkgData) {
                    this.writeScreen.setBkgData(bkgData);
                },
                setMode: function setMode(newMode) {
                    if (newMode === this.mode) {
                        return;
                    }
                    this.mode = newMode;
                    logger.log("INFO", "MODE=" + newMode);
                    if (this.mode == "MODE_POP-ON") {
                        this.writeScreen = this.nonDisplayedMemory;
                    } else {
                        this.writeScreen = this.displayedMemory;
                        this.writeScreen.reset();
                    }
                    if (this.mode !== "MODE_ROLL-UP") {
                        this.displayedMemory.nrRollUpRows = null;
                        this.nonDisplayedMemory.nrRollUpRows = null;
                    }
                    this.mode = newMode;
                },
                insertChars: function insertChars(chars) {
                    for (var i = 0; i < chars.length; i++) {
                        this.writeScreen.insertChar(chars[i]);
                    }
                    var screen = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
                    logger.log("INFO", screen + ": " + this.writeScreen.getDisplayText(true));
                    if (this.mode === "MODE_PAINT-ON" || this.mode === "MODE_ROLL-UP") {
                        logger.log("TEXT", "DISPLAYED: " + this.displayedMemory.getDisplayText(true));
                        this.outputDataUpdate();
                    }
                },
                cc_RCL: function cc_RCL() {
                    logger.log("INFO", "RCL - Resume Caption Loading");
                    this.setMode("MODE_POP-ON");
                },
                cc_BS: function cc_BS() {
                    logger.log("INFO", "BS - BackSpace");
                    if (this.mode === "MODE_TEXT") {
                        return;
                    }
                    this.writeScreen.backSpace();
                    if (this.writeScreen === this.displayedMemory) {
                        this.outputDataUpdate();
                    }
                },
                cc_AOF: function cc_AOF() {
                    return;
                },
                cc_AON: function cc_AON() {
                    return;
                },
                cc_DER: function cc_DER() {
                    logger.log("INFO", "DER- Delete to End of Row");
                    this.writeScreen.clearToEndOfRow();
                    this.outputDataUpdate();
                },
                cc_RU: function cc_RU(nrRows) {
                    logger.log("INFO", "RU(" + nrRows + ") - Roll Up");
                    this.writeScreen = this.displayedMemory;
                    this.setMode("MODE_ROLL-UP");
                    this.writeScreen.setRollUpRows(nrRows);
                },
                cc_FON: function cc_FON() {
                    logger.log("INFO", "FON - Flash On");
                    this.writeScreen.setPen({
                        flash: true
                    });
                },
                cc_RDC: function cc_RDC() {
                    logger.log("INFO", "RDC - Resume Direct Captioning");
                    this.setMode("MODE_PAINT-ON");
                },
                cc_TR: function cc_TR() {
                    logger.log("INFO", "TR");
                    this.setMode("MODE_TEXT");
                },
                cc_RTD: function cc_RTD() {
                    logger.log("INFO", "RTD");
                    this.setMode("MODE_TEXT");
                },
                cc_EDM: function cc_EDM() {
                    logger.log("INFO", "EDM - Erase Displayed Memory");
                    this.displayedMemory.reset();
                    this.outputDataUpdate();
                },
                cc_CR: function cc_CR() {
                    logger.log("CR - Carriage Return");
                    this.writeScreen.rollUp();
                    this.outputDataUpdate();
                },
                cc_ENM: function cc_ENM() {
                    logger.log("INFO", "ENM - Erase Non-displayed Memory");
                    this.nonDisplayedMemory.reset();
                },
                cc_EOC: function cc_EOC() {
                    logger.log("INFO", "EOC - End Of Caption");
                    if (this.mode === "MODE_POP-ON") {
                        var tmp = this.displayedMemory;
                        this.displayedMemory = this.nonDisplayedMemory;
                        this.nonDisplayedMemory = tmp;
                        this.writeScreen = this.nonDisplayedMemory;
                        logger.log("TEXT", "DISP: " + this.displayedMemory.getDisplayText());
                    }
                    this.outputDataUpdate();
                },
                cc_TO: function cc_TO(nrCols) {
                    logger.log("INFO", "TO(" + nrCols + ") - Tab Offset");
                    this.writeScreen.moveCursor(nrCols);
                },
                cc_MIDROW: function cc_MIDROW(secondByte) {
                    var styles = {
                        flash: false
                    };
                    styles.underline = secondByte % 2 === 1;
                    styles.italics = secondByte >= 46;
                    if (!styles.italics) {
                        var colorIndex = Math.floor(secondByte / 2) - 16;
                        var colors = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta" ];
                        styles.foreground = colors[colorIndex];
                    } else {
                        styles.foreground = "white";
                    }
                    logger.log("INFO", "MIDROW: " + JSON.stringify(styles));
                    this.writeScreen.setPen(styles);
                },
                outputDataUpdate: function outputDataUpdate() {
                    var t = logger.time;
                    if (t === null) {
                        return;
                    }
                    if (this.outputFilter) {
                        if (this.outputFilter.updateData) {
                            this.outputFilter.updateData(t, this.displayedMemory);
                        }
                        if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
                            this.cueStartTime = t;
                        } else {
                            if (!this.displayedMemory.equals(this.lastOutputScreen)) {
                                if (this.outputFilter.newCue) {
                                    this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);
                                }
                                this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;
                            }
                        }
                        this.lastOutputScreen.copy(this.displayedMemory);
                    }
                },
                cueSplitAtTime: function cueSplitAtTime(t) {
                    if (this.outputFilter) {
                        if (!this.displayedMemory.isEmpty()) {
                            if (this.outputFilter.newCue) {
                                this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
                            }
                            this.cueStartTime = t;
                        }
                    }
                }
            };
            var Cea608Parser = function Cea608Parser(field, out1, out2) {
                this.field = field || 1;
                this.outputs = [ out1, out2 ];
                this.channels = [ new Cea608Channel(1, out1), new Cea608Channel(2, out2) ];
                this.currChNr = -1;
                this.lastCmdA = null;
                this.lastCmdB = null;
                this.bufferedData = [];
                this.startTime = null;
                this.lastTime = null;
                this.dataCounters = {
                    padding: 0,
                    char: 0,
                    cmd: 0,
                    other: 0
                };
            };
            Cea608Parser.prototype = {
                getHandler: function getHandler(index) {
                    return this.channels[index].getHandler();
                },
                setHandler: function setHandler(index, newHandler) {
                    this.channels[index].setHandler(newHandler);
                },
                addData: function addData(t, byteList) {
                    var cmdFound, a, b, charsFound = false;
                    this.lastTime = t;
                    logger.setTime(t);
                    for (var i = 0; i < byteList.length; i += 2) {
                        a = byteList[i] & 127;
                        b = byteList[i + 1] & 127;
                        if (a >= 16 && a <= 31 && a === this.lastCmdA && b === this.lastCmdB) {
                            this.lastCmdA = null;
                            this.lastCmdB = null;
                            logger.log("DEBUG", "Repeated command (" + numArrayToHexArray([ a, b ]) + ") is dropped");
                            continue;
                        }
                        if (a === 0 && b === 0) {
                            this.dataCounters.padding += 2;
                            continue;
                        } else {
                            logger.log("DATA", "[" + numArrayToHexArray([ byteList[i], byteList[i + 1] ]) + "] -> (" + numArrayToHexArray([ a, b ]) + ")");
                        }
                        cmdFound = this.parseCmd(a, b);
                        if (!cmdFound) {
                            cmdFound = this.parseMidrow(a, b);
                        }
                        if (!cmdFound) {
                            cmdFound = this.parsePAC(a, b);
                        }
                        if (!cmdFound) {
                            cmdFound = this.parseBackgroundAttributes(a, b);
                        }
                        if (!cmdFound) {
                            charsFound = this.parseChars(a, b);
                            if (charsFound) {
                                if (this.currChNr && this.currChNr >= 0) {
                                    var channel = this.channels[this.currChNr - 1];
                                    channel.insertChars(charsFound);
                                } else {
                                    logger.log("WARNING", "No channel found yet. TEXT-MODE?");
                                }
                            }
                        }
                        if (cmdFound) {
                            this.dataCounters.cmd += 2;
                        } else if (charsFound) {
                            this.dataCounters.char += 2;
                        } else {
                            this.dataCounters.other += 2;
                            logger.log("WARNING", "Couldn't parse cleaned data " + numArrayToHexArray([ a, b ]) + " orig: " + numArrayToHexArray([ byteList[i], byteList[i + 1] ]));
                        }
                    }
                },
                parseCmd: function parseCmd(a, b) {
                    var chNr = null;
                    var cond1 = (a === 20 || a === 21 || a === 28 || a === 29) && 32 <= b && b <= 47;
                    var cond2 = (a === 23 || a === 31) && 33 <= b && b <= 35;
                    if (!(cond1 || cond2)) {
                        return false;
                    }
                    if (a === 20 || a === 21 || a === 23) {
                        chNr = 1;
                    } else {
                        chNr = 2;
                    }
                    var channel = this.channels[chNr - 1];
                    if (a === 20 || a === 21 || a === 28 || a === 29) {
                        if (b === 32) {
                            channel.cc_RCL();
                        } else if (b === 33) {
                            channel.cc_BS();
                        } else if (b === 34) {
                            channel.cc_AOF();
                        } else if (b === 35) {
                            channel.cc_AON();
                        } else if (b === 36) {
                            channel.cc_DER();
                        } else if (b === 37) {
                            channel.cc_RU(2);
                        } else if (b === 38) {
                            channel.cc_RU(3);
                        } else if (b === 39) {
                            channel.cc_RU(4);
                        } else if (b === 40) {
                            channel.cc_FON();
                        } else if (b === 41) {
                            channel.cc_RDC();
                        } else if (b === 42) {
                            channel.cc_TR();
                        } else if (b === 43) {
                            channel.cc_RTD();
                        } else if (b === 44) {
                            channel.cc_EDM();
                        } else if (b === 45) {
                            channel.cc_CR();
                        } else if (b === 46) {
                            channel.cc_ENM();
                        } else if (b === 47) {
                            channel.cc_EOC();
                        }
                    } else {
                        channel.cc_TO(b - 32);
                    }
                    this.lastCmdA = a;
                    this.lastCmdB = b;
                    this.currChNr = chNr;
                    return true;
                },
                parseMidrow: function parseMidrow(a, b) {
                    var chNr = null;
                    if ((a === 17 || a === 25) && 32 <= b && b <= 47) {
                        if (a === 17) {
                            chNr = 1;
                        } else {
                            chNr = 2;
                        }
                        if (chNr !== this.currChNr) {
                            logger.log("ERROR", "Mismatch channel in midrow parsing");
                            return false;
                        }
                        var channel = this.channels[chNr - 1];
                        channel.insertChars([ 32 ]);
                        channel.cc_MIDROW(b);
                        logger.log("DEBUG", "MIDROW (" + numArrayToHexArray([ a, b ]) + ")");
                        this.lastCmdA = a;
                        this.lastCmdB = b;
                        return true;
                    }
                    return false;
                },
                parsePAC: function parsePAC(a, b) {
                    var chNr = null;
                    var row = null;
                    var case1 = (17 <= a && a <= 23 || 25 <= a && a <= 31) && 64 <= b && b <= 127;
                    var case2 = (a === 16 || a === 24) && 64 <= b && b <= 95;
                    if (!(case1 || case2)) {
                        return false;
                    }
                    chNr = a <= 23 ? 1 : 2;
                    if (64 <= b && b <= 95) {
                        row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
                    } else {
                        row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
                    }
                    var pacData = this.interpretPAC(row, b);
                    var channel = this.channels[chNr - 1];
                    channel.setPAC(pacData);
                    this.lastCmdA = a;
                    this.lastCmdB = b;
                    this.currChNr = chNr;
                    return true;
                },
                interpretPAC: function interpretPAC(row, byte) {
                    var pacIndex = byte;
                    var pacData = {
                        color: null,
                        italics: false,
                        indent: null,
                        underline: false,
                        row: row
                    };
                    if (byte > 95) {
                        pacIndex = byte - 96;
                    } else {
                        pacIndex = byte - 64;
                    }
                    pacData.underline = (pacIndex & 1) === 1;
                    if (pacIndex <= 13) {
                        pacData.color = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta", "white" ][Math.floor(pacIndex / 2)];
                    } else if (pacIndex <= 15) {
                        pacData.italics = true;
                        pacData.color = "white";
                    } else {
                        pacData.indent = Math.floor((pacIndex - 16) / 2) * 4;
                    }
                    return pacData;
                },
                parseChars: function parseChars(a, b) {
                    var channelNr = null, charCodes = null, charCode1 = null, charCode2 = null;
                    if (a >= 25) {
                        channelNr = 2;
                        charCode1 = a - 8;
                    } else {
                        channelNr = 1;
                        charCode1 = a;
                    }
                    if (17 <= charCode1 && charCode1 <= 19) {
                        var oneCode = b;
                        if (charCode1 === 17) {
                            oneCode = b + 80;
                        } else if (charCode1 === 18) {
                            oneCode = b + 112;
                        } else {
                            oneCode = b + 144;
                        }
                        logger.log("INFO", "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr);
                        charCodes = [ oneCode ];
                        this.lastCmdA = a;
                        this.lastCmdB = b;
                    } else if (32 <= a && a <= 127) {
                        charCodes = b === 0 ? [ a ] : [ a, b ];
                        this.lastCmdA = null;
                        this.lastCmdB = null;
                    }
                    if (charCodes) {
                        var hexCodes = numArrayToHexArray(charCodes);
                        logger.log("DEBUG", "Char codes =  " + hexCodes.join(","));
                    }
                    return charCodes;
                },
                parseBackgroundAttributes: function parseBackgroundAttributes(a, b) {
                    var bkgData, index, chNr, channel;
                    var case1 = (a === 16 || a === 24) && 32 <= b && b <= 47;
                    var case2 = (a === 23 || a === 31) && 45 <= b && b <= 47;
                    if (!(case1 || case2)) {
                        return false;
                    }
                    bkgData = {};
                    if (a === 16 || a === 24) {
                        index = Math.floor((b - 32) / 2);
                        bkgData.background = backgroundColors[index];
                        if (b % 2 === 1) {
                            bkgData.background = bkgData.background + "_semi";
                        }
                    } else if (b === 45) {
                        bkgData.background = "transparent";
                    } else {
                        bkgData.foreground = "black";
                        if (b === 47) {
                            bkgData.underline = true;
                        }
                    }
                    chNr = a < 24 ? 1 : 2;
                    channel = this.channels[chNr - 1];
                    channel.setBkgData(bkgData);
                    this.lastCmdA = a;
                    this.lastCmdB = b;
                    return true;
                },
                reset: function reset() {
                    for (var i = 0; i < this.channels.length; i++) {
                        if (this.channels[i]) {
                            this.channels[i].reset();
                        }
                    }
                    this.lastCmdA = null;
                    this.lastCmdB = null;
                },
                cueSplitAtTime: function cueSplitAtTime(t) {
                    for (var i = 0; i < this.channels.length; i++) {
                        if (this.channels[i]) {
                            this.channels[i].cueSplitAtTime(t);
                        }
                    }
                }
            };
            var findCea608Nalus = function findCea608Nalus(raw, startPos, size) {
                var nalSize = 0, cursor = startPos, nalType = 0, cea608NaluRanges = [], isCEA608SEI = function isCEA608SEI(payloadType, payloadSize, raw, pos) {
                    if (payloadType !== 4 || payloadSize < 8) {
                        return null;
                    }
                    var countryCode = raw.getUint8(pos);
                    var providerCode = raw.getUint16(pos + 1);
                    var userIdentifier = raw.getUint32(pos + 3);
                    var userDataTypeCode = raw.getUint8(pos + 7);
                    return countryCode == 181 && providerCode == 49 && userIdentifier == 1195456820 && userDataTypeCode == 3;
                };
                while (cursor < startPos + size) {
                    nalSize = raw.getUint32(cursor);
                    nalType = raw.getUint8(cursor + 4) & 31;
                    if (nalType === 6) {
                        var pos = cursor + 5;
                        var payloadType = -1;
                        while (pos < cursor + 4 + nalSize - 1) {
                            payloadType = 0;
                            var b = 255;
                            while (b === 255) {
                                b = raw.getUint8(pos);
                                payloadType += b;
                                pos++;
                            }
                            var payloadSize = 0;
                            b = 255;
                            while (b === 255) {
                                b = raw.getUint8(pos);
                                payloadSize += b;
                                pos++;
                            }
                            if (isCEA608SEI(payloadType, payloadSize, raw, pos)) {
                                cea608NaluRanges.push([ pos, payloadSize ]);
                            }
                            pos += payloadSize;
                        }
                    }
                    cursor += nalSize + 4;
                }
                return cea608NaluRanges;
            };
            var extractCea608DataFromRange = function extractCea608DataFromRange(raw, cea608Range) {
                var pos = cea608Range[0];
                var fieldData = [ [], [] ];
                pos += 8;
                var ccCount = raw.getUint8(pos) & 31;
                pos += 2;
                for (var i = 0; i < ccCount; i++) {
                    var byte = raw.getUint8(pos);
                    var ccValid = byte & 4;
                    var ccType = byte & 3;
                    pos++;
                    var ccData1 = raw.getUint8(pos);
                    pos++;
                    var ccData2 = raw.getUint8(pos);
                    pos++;
                    if (ccValid && (ccData1 & 127) + (ccData2 & 127) !== 0) {
                        if (ccType === 0) {
                            fieldData[0].push(ccData1);
                            fieldData[0].push(ccData2);
                        } else if (ccType === 1) {
                            fieldData[1].push(ccData1);
                            fieldData[1].push(ccData2);
                        }
                    }
                }
                return fieldData;
            };
            exports.logger = logger;
            exports.PenState = PenState;
            exports.CaptionScreen = CaptionScreen;
            exports.Cea608Parser = Cea608Parser;
            exports.findCea608Nalus = findCea608Nalus;
            exports.extractCea608DataFromRange = extractCea608DataFromRange;
        })(typeof exports === "undefined" ? undefined.cea608parser = {} : exports);
    }, {} ],
    3: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function X2JS(config) {
            "use strict";
            var VERSION = "1.2.0";
            config = config || {};
            initConfigDefaults();
            initRequiredPolyfills();
            function initConfigDefaults() {
                if (config.escapeMode === undefined) {
                    config.escapeMode = true;
                }
                if (config.attributePrefix === undefined) {
                    config.attributePrefix = "_";
                }
                config.arrayAccessForm = config.arrayAccessForm || "none";
                config.emptyNodeForm = config.emptyNodeForm || "text";
                if (config.enableToStringFunc === undefined) {
                    config.enableToStringFunc = true;
                }
                config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];
                if (config.skipEmptyTextNodesForObj === undefined) {
                    config.skipEmptyTextNodesForObj = true;
                }
                if (config.stripWhitespaces === undefined) {
                    config.stripWhitespaces = true;
                }
                config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];
                if (config.useDoubleQuotes === undefined) {
                    config.useDoubleQuotes = false;
                }
                config.xmlElementsFilter = config.xmlElementsFilter || [];
                config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];
                if (config.keepCData === undefined) {
                    config.keepCData = false;
                }
                if (config.ignoreRoot === undefined) {
                    config.ignoreRoot = false;
                }
            }
            var DOMNodeTypes = {
                ELEMENT_NODE: 1,
                TEXT_NODE: 3,
                CDATA_SECTION_NODE: 4,
                COMMENT_NODE: 8,
                DOCUMENT_NODE: 9
            };
            function initRequiredPolyfills() {}
            function getNodeLocalName(node) {
                var nodeLocalName = node.localName;
                if (nodeLocalName == null) nodeLocalName = node.baseName;
                if (nodeLocalName == null || nodeLocalName == "") nodeLocalName = node.nodeName;
                return nodeLocalName;
            }
            function getNodePrefix(node) {
                return node.prefix;
            }
            function escapeXmlChars(str) {
                if (typeof str == "string") return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;"); else return str;
            }
            function unescapeXmlChars(str) {
                return str.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&amp;/g, "&");
            }
            function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {
                var idx = 0;
                for (;idx < stdFiltersArrayForm.length; idx++) {
                    var filterPath = stdFiltersArrayForm[idx];
                    if (typeof filterPath === "string") {
                        if (filterPath == path) break;
                    } else if (filterPath instanceof RegExp) {
                        if (filterPath.test(path)) break;
                    } else if (typeof filterPath === "function") {
                        if (filterPath(obj, name, path)) break;
                    }
                }
                return idx != stdFiltersArrayForm.length;
            }
            function toArrayAccessForm(obj, childName, path) {
                switch (config.arrayAccessForm) {
                  case "property":
                    if (!(obj[childName] instanceof Array)) obj[childName + "_asArray"] = [ obj[childName] ]; else obj[childName + "_asArray"] = obj[childName];
                    break;
                }
                if (!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {
                    if (checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {
                        obj[childName] = [ obj[childName] ];
                    }
                }
            }
            function fromXmlDateTime(prop) {
                var bits = prop.split(/[-T:+Z]/g);
                var d = new Date(bits[0], bits[1] - 1, bits[2]);
                var secondBits = bits[5].split(".");
                d.setHours(bits[3], bits[4], secondBits[0]);
                if (secondBits.length > 1) d.setMilliseconds(secondBits[1]);
                if (bits[6] && bits[7]) {
                    var offsetMinutes = bits[6] * 60 + Number(bits[7]);
                    var sign = /\d\d-\d\d:\d\d$/.test(prop) ? "-" : "+";
                    offsetMinutes = 0 + (sign == "-" ? -1 * offsetMinutes : offsetMinutes);
                    d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());
                } else if (prop.indexOf("Z", prop.length - 1) !== -1) {
                    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));
                }
                return d;
            }
            function checkFromXmlDateTimePaths(value, childName, fullPath) {
                if (config.datetimeAccessFormPaths.length > 0) {
                    var path = fullPath.split(".#")[0];
                    if (checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {
                        return fromXmlDateTime(value);
                    } else return value;
                } else return value;
            }
            function checkXmlElementsFilter(obj, childType, childName, childPath) {
                if (childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {
                    return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);
                } else return true;
            }
            function parseDOMChildren(node, path) {
                if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
                    var result = new Object();
                    var nodeChildren = node.childNodes;
                    for (var cidx = 0; cidx < nodeChildren.length; cidx++) {
                        var child = nodeChildren[cidx];
                        if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                            if (config.ignoreRoot) {
                                result = parseDOMChildren(child);
                            } else {
                                result = {};
                                var childName = getNodeLocalName(child);
                                result[childName] = parseDOMChildren(child);
                            }
                        }
                    }
                    return result;
                } else if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                    var result = new Object();
                    result.__cnt = 0;
                    var children = [];
                    var nodeChildren = node.childNodes;
                    for (var cidx = 0; cidx < nodeChildren.length; cidx++) {
                        var child = nodeChildren[cidx];
                        var childName = getNodeLocalName(child);
                        if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {
                            var childPath = path + "." + childName;
                            if (checkXmlElementsFilter(result, child.nodeType, childName, childPath)) {
                                result.__cnt++;
                                if (result[childName] == null) {
                                    var c = parseDOMChildren(child, childPath);
                                    if (childName != "#text" || /[^\s]/.test(c)) {
                                        var o = {};
                                        o[childName] = c;
                                        children.push(o);
                                    }
                                    result[childName] = c;
                                    toArrayAccessForm(result, childName, childPath);
                                } else {
                                    if (result[childName] != null) {
                                        if (!(result[childName] instanceof Array)) {
                                            result[childName] = [ result[childName] ];
                                            toArrayAccessForm(result, childName, childPath);
                                        }
                                    }
                                    var c = parseDOMChildren(child, childPath);
                                    if (childName != "#text" || /[^\s]/.test(c)) {
                                        var o = {};
                                        o[childName] = c;
                                        children.push(o);
                                    }
                                    result[childName][result[childName].length] = c;
                                }
                            }
                        }
                    }
                    result.__children = children;
                    var nodeLocalName = getNodeLocalName(node);
                    for (var aidx = 0; aidx < node.attributes.length; aidx++) {
                        var attr = node.attributes[aidx];
                        result.__cnt++;
                        var value2 = attr.value;
                        for (var m = 0, ml = config.matchers.length; m < ml; m++) {
                            var matchobj = config.matchers[m];
                            if (matchobj.test(attr, nodeLocalName)) value2 = matchobj.converter(attr.value);
                        }
                        result[config.attributePrefix + attr.name] = value2;
                    }
                    var nodePrefix = getNodePrefix(node);
                    if (nodePrefix != null && nodePrefix != "") {
                        result.__cnt++;
                        result.__prefix = nodePrefix;
                    }
                    if (result["#text"] != null) {
                        result.__text = result["#text"];
                        if (result.__text instanceof Array) {
                            result.__text = result.__text.join("\n");
                        }
                        if (config.stripWhitespaces) result.__text = result.__text.trim();
                        delete result["#text"];
                        if (config.arrayAccessForm == "property") delete result["#text_asArray"];
                        result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + "." + childName);
                    }
                    if (result["#cdata-section"] != null) {
                        result.__cdata = result["#cdata-section"];
                        delete result["#cdata-section"];
                        if (config.arrayAccessForm == "property") delete result["#cdata-section_asArray"];
                    }
                    if (result.__cnt == 0 && config.emptyNodeForm == "text") {
                        result = "";
                    } else if (result.__cnt == 1 && result.__text != null) {
                        result = result.__text;
                    } else if (result.__cnt == 1 && result.__cdata != null && !config.keepCData) {
                        result = result.__cdata;
                    } else if (result.__cnt > 1 && result.__text != null && config.skipEmptyTextNodesForObj) {
                        if (config.stripWhitespaces && result.__text == "" || result.__text.trim() == "") {
                            delete result.__text;
                        }
                    }
                    delete result.__cnt;
                    if (config.enableToStringFunc && (result.__text != null || result.__cdata != null)) {
                        result.toString = function() {
                            return (this.__text != null ? this.__text : "") + (this.__cdata != null ? this.__cdata : "");
                        };
                    }
                    return result;
                } else if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {
                    return node.nodeValue;
                }
            }
            function startTag(jsonObj, element, attrList, closed) {
                var resultStr = "<" + (jsonObj != null && jsonObj.__prefix != null ? jsonObj.__prefix + ":" : "") + element;
                if (attrList != null) {
                    for (var aidx = 0; aidx < attrList.length; aidx++) {
                        var attrName = attrList[aidx];
                        var attrVal = jsonObj[attrName];
                        if (config.escapeMode) attrVal = escapeXmlChars(attrVal);
                        resultStr += " " + attrName.substr(config.attributePrefix.length) + "=";
                        if (config.useDoubleQuotes) resultStr += '"' + attrVal + '"'; else resultStr += "'" + attrVal + "'";
                    }
                }
                if (!closed) resultStr += ">"; else resultStr += "/>";
                return resultStr;
            }
            function endTag(jsonObj, elementName) {
                return "</" + (jsonObj.__prefix != null ? jsonObj.__prefix + ":" : "") + elementName + ">";
            }
            function endsWith(str, suffix) {
                return str.indexOf(suffix, str.length - suffix.length) !== -1;
            }
            function jsonXmlSpecialElem(jsonObj, jsonObjField) {
                if (config.arrayAccessForm == "property" && endsWith(jsonObjField.toString(), "_asArray") || jsonObjField.toString().indexOf(config.attributePrefix) == 0 || jsonObjField.toString().indexOf("__") == 0 || jsonObj[jsonObjField] instanceof Function) return true; else return false;
            }
            function jsonXmlElemCount(jsonObj) {
                var elementsCnt = 0;
                if (jsonObj instanceof Object) {
                    for (var it in jsonObj) {
                        if (jsonXmlSpecialElem(jsonObj, it)) continue;
                        elementsCnt++;
                    }
                }
                return elementsCnt;
            }
            function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {
                return config.jsonPropertiesFilter.length == 0 || jsonObjPath == "" || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);
            }
            function parseJSONAttributes(jsonObj) {
                var attrList = [];
                if (jsonObj instanceof Object) {
                    for (var ait in jsonObj) {
                        if (ait.toString().indexOf("__") == -1 && ait.toString().indexOf(config.attributePrefix) == 0) {
                            attrList.push(ait);
                        }
                    }
                }
                return attrList;
            }
            function parseJSONTextAttrs(jsonTxtObj) {
                var result = "";
                if (jsonTxtObj.__cdata != null) {
                    result += "<![CDATA[" + jsonTxtObj.__cdata + "]]>";
                }
                if (jsonTxtObj.__text != null) {
                    if (config.escapeMode) result += escapeXmlChars(jsonTxtObj.__text); else result += jsonTxtObj.__text;
                }
                return result;
            }
            function parseJSONTextObject(jsonTxtObj) {
                var result = "";
                if (jsonTxtObj instanceof Object) {
                    result += parseJSONTextAttrs(jsonTxtObj);
                } else if (jsonTxtObj != null) {
                    if (config.escapeMode) result += escapeXmlChars(jsonTxtObj); else result += jsonTxtObj;
                }
                return result;
            }
            function getJsonPropertyPath(jsonObjPath, jsonPropName) {
                if (jsonObjPath === "") {
                    return jsonPropName;
                } else return jsonObjPath + "." + jsonPropName;
            }
            function parseJSONArray(jsonArrRoot, jsonArrObj, attrList, jsonObjPath) {
                var result = "";
                if (jsonArrRoot.length == 0) {
                    result += startTag(jsonArrRoot, jsonArrObj, attrList, true);
                } else {
                    for (var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {
                        result += startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);
                        result += parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath, jsonArrObj));
                        result += endTag(jsonArrRoot[arIdx], jsonArrObj);
                    }
                }
                return result;
            }
            function parseJSONObject(jsonObj, jsonObjPath) {
                var result = "";
                var elementsCnt = jsonXmlElemCount(jsonObj);
                if (elementsCnt > 0) {
                    for (var it in jsonObj) {
                        if (jsonXmlSpecialElem(jsonObj, it) || jsonObjPath != "" && !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath, it))) continue;
                        var subObj = jsonObj[it];
                        var attrList = parseJSONAttributes(subObj);
                        if (subObj == null || subObj == undefined) {
                            result += startTag(subObj, it, attrList, true);
                        } else if (subObj instanceof Object) {
                            if (subObj instanceof Array) {
                                result += parseJSONArray(subObj, it, attrList, jsonObjPath);
                            } else if (subObj instanceof Date) {
                                result += startTag(subObj, it, attrList, false);
                                result += subObj.toISOString();
                                result += endTag(subObj, it);
                            } else {
                                var subObjElementsCnt = jsonXmlElemCount(subObj);
                                if (subObjElementsCnt > 0 || subObj.__text != null || subObj.__cdata != null) {
                                    result += startTag(subObj, it, attrList, false);
                                    result += parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath, it));
                                    result += endTag(subObj, it);
                                } else {
                                    result += startTag(subObj, it, attrList, true);
                                }
                            }
                        } else {
                            result += startTag(subObj, it, attrList, false);
                            result += parseJSONTextObject(subObj);
                            result += endTag(subObj, it);
                        }
                    }
                }
                result += parseJSONTextObject(jsonObj);
                return result;
            }
            this.parseXmlString = function(xmlDocStr) {
                var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
                if (xmlDocStr === undefined) {
                    return null;
                }
                var xmlDoc;
                if (window.DOMParser) {
                    var parser = new window.DOMParser();
                    var parsererrorNS = null;
                    try {
                        xmlDoc = parser.parseFromString(xmlDocStr, "text/xml");
                        if (xmlDoc.getElementsByTagNameNS("*", "parsererror").length > 0) {
                            xmlDoc = null;
                        }
                    } catch (err) {
                        xmlDoc = null;
                    }
                } else {
                    if (xmlDocStr.indexOf("<?") == 0) {
                        xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf("?>") + 2);
                    }
                    xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                    xmlDoc.async = "false";
                    xmlDoc.loadXML(xmlDocStr);
                }
                return xmlDoc;
            };
            this.asArray = function(prop) {
                if (prop === undefined || prop == null) return []; else if (prop instanceof Array) return prop; else return [ prop ];
            };
            this.toXmlDateTime = function(dt) {
                if (dt instanceof Date) return dt.toISOString(); else if (typeof dt === "number") return new Date(dt).toISOString(); else return null;
            };
            this.asDateTime = function(prop) {
                if (typeof prop == "string") {
                    return fromXmlDateTime(prop);
                } else return prop;
            };
            this.xml2json = function(xmlDoc) {
                return parseDOMChildren(xmlDoc);
            };
            this.xml_str2json = function(xmlDocStr) {
                var xmlDoc = this.parseXmlString(xmlDocStr);
                if (xmlDoc != null) return this.xml2json(xmlDoc); else return null;
            };
            this.json2xml_str = function(jsonObj) {
                return parseJSONObject(jsonObj, "");
            };
            this.json2xml = function(jsonObj) {
                var xmlDocStr = this.json2xml_str(jsonObj);
                return this.parseXmlString(xmlDocStr);
            };
            this.getVersion = function() {
                return VERSION;
            };
        }
        exports["default"] = X2JS;
        module.exports = exports["default"];
    }, {} ],
    4: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _index_mediaplayerOnly = _dereq_(5);
        var _srcStreamingMetricsMetricsReporting = _dereq_(123);
        var _srcStreamingMetricsMetricsReporting2 = _interopRequireDefault(_srcStreamingMetricsMetricsReporting);
        var _srcStreamingProtectionProtection = _dereq_(157);
        var _srcStreamingProtectionProtection2 = _interopRequireDefault(_srcStreamingProtectionProtection);
        var _srcStreamingMediaPlayerFactory = _dereq_(101);
        var _srcStreamingMediaPlayerFactory2 = _interopRequireDefault(_srcStreamingMediaPlayerFactory);
        var _srcCoreDebug = _dereq_(46);
        var _srcCoreDebug2 = _interopRequireDefault(_srcCoreDebug);
        dashjs.Protection = _srcStreamingProtectionProtection2["default"];
        dashjs.MetricsReporting = _srcStreamingMetricsMetricsReporting2["default"];
        dashjs.MediaPlayerFactory = _srcStreamingMediaPlayerFactory2["default"];
        dashjs.Debug = _srcCoreDebug2["default"];
        exports["default"] = dashjs;
        exports.MediaPlayer = _index_mediaplayerOnly.MediaPlayer;
        exports.Protection = _srcStreamingProtectionProtection2["default"];
        exports.MetricsReporting = _srcStreamingMetricsMetricsReporting2["default"];
        exports.MediaPlayerFactory = _srcStreamingMediaPlayerFactory2["default"];
        exports.Debug = _srcCoreDebug2["default"];
    }, {
        101: 101,
        123: 123,
        157: 157,
        46: 46,
        5: 5
    } ],
    5: [ function(_dereq_, module, exports) {
        (function(global) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var _srcStreamingMediaPlayer = _dereq_(99);
            var _srcStreamingMediaPlayer2 = _interopRequireDefault(_srcStreamingMediaPlayer);
            var _srcCoreFactoryMaker = _dereq_(48);
            var _srcCoreFactoryMaker2 = _interopRequireDefault(_srcCoreFactoryMaker);
            var _srcCoreDebug = _dereq_(46);
            var _srcCoreDebug2 = _interopRequireDefault(_srcCoreDebug);
            var _srcCoreVersion = _dereq_(51);
            var context = typeof window !== "undefined" && window || global;
            var dashjs = context.dashjs;
            if (!dashjs) {
                dashjs = context.dashjs = {};
            }
            dashjs.MediaPlayer = _srcStreamingMediaPlayer2["default"];
            dashjs.FactoryMaker = _srcCoreFactoryMaker2["default"];
            dashjs.Debug = _srcCoreDebug2["default"];
            dashjs.Version = (0, _srcCoreVersion.getVersionString)();
            exports["default"] = dashjs;
            exports.MediaPlayer = _srcStreamingMediaPlayer2["default"];
            exports.FactoryMaker = _srcCoreFactoryMaker2["default"];
            exports.Debug = _srcCoreDebug2["default"];
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
        46: 46,
        48: 48,
        51: 51,
        99: 99
    } ],
    6: [ function(_dereq_, module, exports) {
        "use strict";
        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
        }
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;
        function getLens(b64) {
            var len = b64.length;
            if (len % 4 > 0) {
                throw new Error("Invalid string. Length must be a multiple of 4");
            }
            var validLen = b64.indexOf("=");
            if (validLen === -1) validLen = len;
            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
            return [ validLen, placeHoldersLen ];
        }
        function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b64, validLen, placeHoldersLen) {
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
            var curByte = 0;
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
            for (var i = 0; i < len; i += 4) {
                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                arr[curByte++] = tmp >> 16 & 255;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
            }
            if (placeHoldersLen === 2) {
                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                arr[curByte++] = tmp & 255;
            }
            if (placeHoldersLen === 1) {
                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
            }
            return arr;
        }
        function tripletToBase64(num) {
            return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
        }
        function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
                output.push(tripletToBase64(tmp));
            }
            return output.join("");
        }
        function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3;
            var parts = [];
            var maxChunkLength = 16383;
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
            }
            if (extraBytes === 1) {
                tmp = uint8[len - 1];
                parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
            }
            return parts.join("");
        }
    }, {} ],
    7: [ function(_dereq_, module, exports) {}, {} ],
    8: [ function(_dereq_, module, exports) {
        var objectCreate = Object.create || objectCreatePolyfill;
        var objectKeys = Object.keys || objectKeysPolyfill;
        var bind = Function.prototype.bind || functionBindPolyfill;
        function EventEmitter() {
            if (!this._events || !Object.prototype.hasOwnProperty.call(this, "_events")) {
                this._events = objectCreate(null);
                this._eventsCount = 0;
            }
            this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;
        var defaultMaxListeners = 10;
        var hasDefineProperty;
        try {
            var o = {};
            if (Object.defineProperty) Object.defineProperty(o, "x", {
                value: 0
            });
            hasDefineProperty = o.x === 0;
        } catch (err) {
            hasDefineProperty = false;
        }
        if (hasDefineProperty) {
            Object.defineProperty(EventEmitter, "defaultMaxListeners", {
                enumerable: true,
                get: function() {
                    return defaultMaxListeners;
                },
                set: function(arg) {
                    if (typeof arg !== "number" || arg < 0 || arg !== arg) throw new TypeError('"defaultMaxListeners" must be a positive number');
                    defaultMaxListeners = arg;
                }
            });
        } else {
            EventEmitter.defaultMaxListeners = defaultMaxListeners;
        }
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
            if (typeof n !== "number" || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
            this._maxListeners = n;
            return this;
        };
        function $getMaxListeners(that) {
            if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
            return that._maxListeners;
        }
        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
            return $getMaxListeners(this);
        };
        function emitNone(handler, isFn, self) {
            if (isFn) handler.call(self); else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i) listeners[i].call(self);
            }
        }
        function emitOne(handler, isFn, self, arg1) {
            if (isFn) handler.call(self, arg1); else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
            }
        }
        function emitTwo(handler, isFn, self, arg1, arg2) {
            if (isFn) handler.call(self, arg1, arg2); else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
            }
        }
        function emitThree(handler, isFn, self, arg1, arg2, arg3) {
            if (isFn) handler.call(self, arg1, arg2, arg3); else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
            }
        }
        function emitMany(handler, isFn, self, args) {
            if (isFn) handler.apply(self, args); else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
            }
        }
        EventEmitter.prototype.emit = function emit(type) {
            var er, handler, len, args, i, events;
            var doError = type === "error";
            events = this._events;
            if (events) doError = doError && events.error == null; else if (!doError) return false;
            if (doError) {
                if (arguments.length > 1) er = arguments[1];
                if (er instanceof Error) {
                    throw er;
                } else {
                    var err = new Error('Unhandled "error" event. (' + er + ")");
                    err.context = er;
                    throw err;
                }
                return false;
            }
            handler = events[type];
            if (!handler) return false;
            var isFn = typeof handler === "function";
            len = arguments.length;
            switch (len) {
              case 1:
                emitNone(handler, isFn, this);
                break;

              case 2:
                emitOne(handler, isFn, this, arguments[1]);
                break;

              case 3:
                emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                break;

              case 4:
                emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                break;

              default:
                args = new Array(len - 1);
                for (i = 1; i < len; i++) args[i - 1] = arguments[i];
                emitMany(handler, isFn, this, args);
            }
            return true;
        };
        function _addListener(target, type, listener, prepend) {
            var m;
            var events;
            var existing;
            if (typeof listener !== "function") throw new TypeError('"listener" argument must be a function');
            events = target._events;
            if (!events) {
                events = target._events = objectCreate(null);
                target._eventsCount = 0;
            } else {
                if (events.newListener) {
                    target.emit("newListener", type, listener.listener ? listener.listener : listener);
                    events = target._events;
                }
                existing = events[type];
            }
            if (!existing) {
                existing = events[type] = listener;
                ++target._eventsCount;
            } else {
                if (typeof existing === "function") {
                    existing = events[type] = prepend ? [ listener, existing ] : [ existing, listener ];
                } else {
                    if (prepend) {
                        existing.unshift(listener);
                    } else {
                        existing.push(listener);
                    }
                }
                if (!existing.warned) {
                    m = $getMaxListeners(target);
                    if (m && m > 0 && existing.length > m) {
                        existing.warned = true;
                        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + ' "' + String(type) + '" listeners ' + "added. Use emitter.setMaxListeners() to " + "increase limit.");
                        w.name = "MaxListenersExceededWarning";
                        w.emitter = target;
                        w.type = type;
                        w.count = existing.length;
                        if (typeof console === "object" && console.warn) {
                            console.warn("%s: %s", w.name, w.message);
                        }
                    }
                }
            }
            return target;
        }
        EventEmitter.prototype.addListener = function addListener(type, listener) {
            return _addListener(this, type, listener, false);
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
            return _addListener(this, type, listener, true);
        };
        function onceWrapper() {
            if (!this.fired) {
                this.target.removeListener(this.type, this.wrapFn);
                this.fired = true;
                switch (arguments.length) {
                  case 0:
                    return this.listener.call(this.target);

                  case 1:
                    return this.listener.call(this.target, arguments[0]);

                  case 2:
                    return this.listener.call(this.target, arguments[0], arguments[1]);

                  case 3:
                    return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);

                  default:
                    var args = new Array(arguments.length);
                    for (var i = 0; i < args.length; ++i) args[i] = arguments[i];
                    this.listener.apply(this.target, args);
                }
            }
        }
        function _onceWrap(target, type, listener) {
            var state = {
                fired: false,
                wrapFn: undefined,
                target: target,
                type: type,
                listener: listener
            };
            var wrapped = bind.call(onceWrapper, state);
            wrapped.listener = listener;
            state.wrapFn = wrapped;
            return wrapped;
        }
        EventEmitter.prototype.once = function once(type, listener) {
            if (typeof listener !== "function") throw new TypeError('"listener" argument must be a function');
            this.on(type, _onceWrap(this, type, listener));
            return this;
        };
        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
            if (typeof listener !== "function") throw new TypeError('"listener" argument must be a function');
            this.prependListener(type, _onceWrap(this, type, listener));
            return this;
        };
        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
            var list, events, position, i, originalListener;
            if (typeof listener !== "function") throw new TypeError('"listener" argument must be a function');
            events = this._events;
            if (!events) return this;
            list = events[type];
            if (!list) return this;
            if (list === listener || list.listener === listener) {
                if (--this._eventsCount === 0) this._events = objectCreate(null); else {
                    delete events[type];
                    if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
                }
            } else if (typeof list !== "function") {
                position = -1;
                for (i = list.length - 1; i >= 0; i--) {
                    if (list[i] === listener || list[i].listener === listener) {
                        originalListener = list[i].listener;
                        position = i;
                        break;
                    }
                }
                if (position < 0) return this;
                if (position === 0) list.shift(); else spliceOne(list, position);
                if (list.length === 1) events[type] = list[0];
                if (events.removeListener) this.emit("removeListener", type, originalListener || listener);
            }
            return this;
        };
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
            var listeners, events, i;
            events = this._events;
            if (!events) return this;
            if (!events.removeListener) {
                if (arguments.length === 0) {
                    this._events = objectCreate(null);
                    this._eventsCount = 0;
                } else if (events[type]) {
                    if (--this._eventsCount === 0) this._events = objectCreate(null); else delete events[type];
                }
                return this;
            }
            if (arguments.length === 0) {
                var keys = objectKeys(events);
                var key;
                for (i = 0; i < keys.length; ++i) {
                    key = keys[i];
                    if (key === "removeListener") continue;
                    this.removeAllListeners(key);
                }
                this.removeAllListeners("removeListener");
                this._events = objectCreate(null);
                this._eventsCount = 0;
                return this;
            }
            listeners = events[type];
            if (typeof listeners === "function") {
                this.removeListener(type, listeners);
            } else if (listeners) {
                for (i = listeners.length - 1; i >= 0; i--) {
                    this.removeListener(type, listeners[i]);
                }
            }
            return this;
        };
        function _listeners(target, type, unwrap) {
            var events = target._events;
            if (!events) return [];
            var evlistener = events[type];
            if (!evlistener) return [];
            if (typeof evlistener === "function") return unwrap ? [ evlistener.listener || evlistener ] : [ evlistener ];
            return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }
        EventEmitter.prototype.listeners = function listeners(type) {
            return _listeners(this, type, true);
        };
        EventEmitter.prototype.rawListeners = function rawListeners(type) {
            return _listeners(this, type, false);
        };
        EventEmitter.listenerCount = function(emitter, type) {
            if (typeof emitter.listenerCount === "function") {
                return emitter.listenerCount(type);
            } else {
                return listenerCount.call(emitter, type);
            }
        };
        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
            var events = this._events;
            if (events) {
                var evlistener = events[type];
                if (typeof evlistener === "function") {
                    return 1;
                } else if (evlistener) {
                    return evlistener.length;
                }
            }
            return 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
            return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
        };
        function spliceOne(list, index) {
            for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];
            list.pop();
        }
        function arrayClone(arr, n) {
            var copy = new Array(n);
            for (var i = 0; i < n; ++i) copy[i] = arr[i];
            return copy;
        }
        function unwrapListeners(arr) {
            var ret = new Array(arr.length);
            for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
            }
            return ret;
        }
        function objectCreatePolyfill(proto) {
            var F = function() {};
            F.prototype = proto;
            return new F();
        }
        function objectKeysPolyfill(obj) {
            var keys = [];
            for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
                keys.push(k);
            }
            return k;
        }
        function functionBindPolyfill(context) {
            var fn = this;
            return function() {
                return fn.apply(context, arguments);
            };
        }
    }, {} ],
    9: [ function(_dereq_, module, exports) {
        module.exports = Stream;
        var EE = _dereq_(8).EventEmitter;
        var inherits = _dereq_(24);
        inherits(Stream, EE);
        Stream.Readable = _dereq_(40);
        Stream.Writable = _dereq_(42);
        Stream.Duplex = _dereq_(28);
        Stream.Transform = _dereq_(41);
        Stream.PassThrough = _dereq_(39);
        Stream.Stream = Stream;
        function Stream() {
            EE.call(this);
        }
        Stream.prototype.pipe = function(dest, options) {
            var source = this;
            function ondata(chunk) {
                if (dest.writable) {
                    if (false === dest.write(chunk) && source.pause) {
                        source.pause();
                    }
                }
            }
            source.on("data", ondata);
            function ondrain() {
                if (source.readable && source.resume) {
                    source.resume();
                }
            }
            dest.on("drain", ondrain);
            if (!dest._isStdio && (!options || options.end !== false)) {
                source.on("end", onend);
                source.on("close", onclose);
            }
            var didOnEnd = false;
            function onend() {
                if (didOnEnd) return;
                didOnEnd = true;
                dest.end();
            }
            function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;
                if (typeof dest.destroy === "function") dest.destroy();
            }
            function onerror(er) {
                cleanup();
                if (EE.listenerCount(this, "error") === 0) {
                    throw er;
                }
            }
            source.on("error", onerror);
            dest.on("error", onerror);
            function cleanup() {
                source.removeListener("data", ondata);
                dest.removeListener("drain", ondrain);
                source.removeListener("end", onend);
                source.removeListener("close", onclose);
                source.removeListener("error", onerror);
                dest.removeListener("error", onerror);
                source.removeListener("end", cleanup);
                source.removeListener("close", cleanup);
                dest.removeListener("close", cleanup);
            }
            source.on("end", cleanup);
            source.on("close", cleanup);
            dest.on("close", cleanup);
            dest.emit("pipe", source);
            return dest;
        };
    }, {
        24: 24,
        28: 28,
        39: 39,
        40: 40,
        41: 41,
        42: 42,
        8: 8
    } ],
    10: [ function(_dereq_, module, exports) {
        "use strict";
        var Buffer = _dereq_(43).Buffer;
        var isEncoding = Buffer.isEncoding || function(encoding) {
            encoding = "" + encoding;
            switch (encoding && encoding.toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
              case "raw":
                return true;

              default:
                return false;
            }
        };
        function _normalizeEncoding(enc) {
            if (!enc) return "utf8";
            var retried;
            while (true) {
                switch (enc) {
                  case "utf8":
                  case "utf-8":
                    return "utf8";

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return "utf16le";

                  case "latin1":
                  case "binary":
                    return "latin1";

                  case "base64":
                  case "ascii":
                  case "hex":
                    return enc;

                  default:
                    if (retried) return;
                    enc = ("" + enc).toLowerCase();
                    retried = true;
                }
            }
        }
        function normalizeEncoding(enc) {
            var nenc = _normalizeEncoding(enc);
            if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
            return nenc || enc;
        }
        exports.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
            this.encoding = normalizeEncoding(encoding);
            var nb;
            switch (this.encoding) {
              case "utf16le":
                this.text = utf16Text;
                this.end = utf16End;
                nb = 4;
                break;

              case "utf8":
                this.fillLast = utf8FillLast;
                nb = 4;
                break;

              case "base64":
                this.text = base64Text;
                this.end = base64End;
                nb = 3;
                break;

              default:
                this.write = simpleWrite;
                this.end = simpleEnd;
                return;
            }
            this.lastNeed = 0;
            this.lastTotal = 0;
            this.lastChar = Buffer.allocUnsafe(nb);
        }
        StringDecoder.prototype.write = function(buf) {
            if (buf.length === 0) return "";
            var r;
            var i;
            if (this.lastNeed) {
                r = this.fillLast(buf);
                if (r === undefined) return "";
                i = this.lastNeed;
                this.lastNeed = 0;
            } else {
                i = 0;
            }
            if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
            return r || "";
        };
        StringDecoder.prototype.end = utf8End;
        StringDecoder.prototype.text = utf8Text;
        StringDecoder.prototype.fillLast = function(buf) {
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
            this.lastNeed -= buf.length;
        };
        function utf8CheckByte(byte) {
            if (byte <= 127) return 0; else if (byte >> 5 === 6) return 2; else if (byte >> 4 === 14) return 3; else if (byte >> 3 === 30) return 4;
            return byte >> 6 === 2 ? -1 : -2;
        }
        function utf8CheckIncomplete(self, buf, i) {
            var j = buf.length - 1;
            if (j < i) return 0;
            var nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 1;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 2;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) {
                    if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
                }
                return nb;
            }
            return 0;
        }
        function utf8CheckExtraBytes(self, buf, p) {
            if ((buf[0] & 192) !== 128) {
                self.lastNeed = 0;
                return "�";
            }
            if (self.lastNeed > 1 && buf.length > 1) {
                if ((buf[1] & 192) !== 128) {
                    self.lastNeed = 1;
                    return "�";
                }
                if (self.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 192) !== 128) {
                        self.lastNeed = 2;
                        return "�";
                    }
                }
            }
        }
        function utf8FillLast(buf) {
            var p = this.lastTotal - this.lastNeed;
            var r = utf8CheckExtraBytes(this, buf, p);
            if (r !== undefined) return r;
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, p, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, p, 0, buf.length);
            this.lastNeed -= buf.length;
        }
        function utf8Text(buf, i) {
            var total = utf8CheckIncomplete(this, buf, i);
            if (!this.lastNeed) return buf.toString("utf8", i);
            this.lastTotal = total;
            var end = buf.length - (total - this.lastNeed);
            buf.copy(this.lastChar, 0, end);
            return buf.toString("utf8", i, end);
        }
        function utf8End(buf) {
            var r = buf && buf.length ? this.write(buf) : "";
            if (this.lastNeed) return r + "�";
            return r;
        }
        function utf16Text(buf, i) {
            if ((buf.length - i) % 2 === 0) {
                var r = buf.toString("utf16le", i);
                if (r) {
                    var c = r.charCodeAt(r.length - 1);
                    if (c >= 55296 && c <= 56319) {
                        this.lastNeed = 2;
                        this.lastTotal = 4;
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                        return r.slice(0, -1);
                    }
                }
                return r;
            }
            this.lastNeed = 1;
            this.lastTotal = 2;
            this.lastChar[0] = buf[buf.length - 1];
            return buf.toString("utf16le", i, buf.length - 1);
        }
        function utf16End(buf) {
            var r = buf && buf.length ? this.write(buf) : "";
            if (this.lastNeed) {
                var end = this.lastTotal - this.lastNeed;
                return r + this.lastChar.toString("utf16le", 0, end);
            }
            return r;
        }
        function base64Text(buf, i) {
            var n = (buf.length - i) % 3;
            if (n === 0) return buf.toString("base64", i);
            this.lastNeed = 3 - n;
            this.lastTotal = 3;
            if (n === 1) {
                this.lastChar[0] = buf[buf.length - 1];
            } else {
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
            }
            return buf.toString("base64", i, buf.length - n);
        }
        function base64End(buf) {
            var r = buf && buf.length ? this.write(buf) : "";
            if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
            return r;
        }
        function simpleWrite(buf) {
            return buf.toString(this.encoding);
        }
        function simpleEnd(buf) {
            return buf && buf.length ? this.write(buf) : "";
        }
    }, {
        43: 43
    } ],
    11: [ function(_dereq_, module, exports) {
        (function(setImmediate, clearImmediate) {
            var nextTick = _dereq_(27).nextTick;
            var apply = Function.prototype.apply;
            var slice = Array.prototype.slice;
            var immediateIds = {};
            var nextImmediateId = 0;
            exports.setTimeout = function() {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
            };
            exports.setInterval = function() {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
            };
            exports.clearTimeout = exports.clearInterval = function(timeout) {
                timeout.close();
            };
            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {};
            Timeout.prototype.close = function() {
                this._clearFn.call(window, this._id);
            };
            exports.enroll = function(item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };
            exports.unenroll = function(item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };
            exports._unrefActive = exports.active = function(item) {
                clearTimeout(item._idleTimeoutId);
                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout) item._onTimeout();
                    }, msecs);
                }
            };
            exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
                var id = nextImmediateId++;
                var args = arguments.length < 2 ? false : slice.call(arguments, 1);
                immediateIds[id] = true;
                nextTick(function onNextTick() {
                    if (immediateIds[id]) {
                        if (args) {
                            fn.apply(null, args);
                        } else {
                            fn.call(null);
                        }
                        exports.clearImmediate(id);
                    }
                });
                return id;
            };
            exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
                delete immediateIds[id];
            };
        }).call(this, _dereq_(11).setImmediate, _dereq_(11).clearImmediate);
    }, {
        11: 11,
        27: 27
    } ],
    12: [ function(_dereq_, module, exports) {
        (function(Buffer) {
            "use strict";
            var base64 = _dereq_(6);
            var ieee754 = _dereq_(16);
            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;
            var K_MAX_LENGTH = 2147483647;
            exports.kMaxLength = K_MAX_LENGTH;
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
                console.error("This browser lacks typed array (Uint8Array) support which is required by " + "`buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
            }
            function typedArraySupport() {
                try {
                    var arr = new Uint8Array(1);
                    arr.__proto__ = {
                        __proto__: Uint8Array.prototype,
                        foo: function() {
                            return 42;
                        }
                    };
                    return arr.foo() === 42;
                } catch (e) {
                    return false;
                }
            }
            Object.defineProperty(Buffer.prototype, "parent", {
                enumerable: true,
                get: function() {
                    if (!Buffer.isBuffer(this)) return undefined;
                    return this.buffer;
                }
            });
            Object.defineProperty(Buffer.prototype, "offset", {
                enumerable: true,
                get: function() {
                    if (!Buffer.isBuffer(this)) return undefined;
                    return this.byteOffset;
                }
            });
            function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                    throw new RangeError('The value "' + length + '" is invalid for option "size"');
                }
                var buf = new Uint8Array(length);
                buf.__proto__ = Buffer.prototype;
                return buf;
            }
            function Buffer(arg, encodingOrOffset, length) {
                if (typeof arg === "number") {
                    if (typeof encodingOrOffset === "string") {
                        throw new TypeError('The "string" argument must be of type string. Received type number');
                    }
                    return allocUnsafe(arg);
                }
                return from(arg, encodingOrOffset, length);
            }
            if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
                Object.defineProperty(Buffer, Symbol.species, {
                    value: null,
                    configurable: true,
                    enumerable: false,
                    writable: false
                });
            }
            Buffer.poolSize = 8192;
            function from(value, encodingOrOffset, length) {
                if (typeof value === "string") {
                    return fromString(value, encodingOrOffset);
                }
                if (ArrayBuffer.isView(value)) {
                    return fromArrayLike(value);
                }
                if (value == null) {
                    throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof value);
                }
                if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                    return fromArrayBuffer(value, encodingOrOffset, length);
                }
                if (typeof value === "number") {
                    throw new TypeError('The "value" argument must not be of type number. Received type number');
                }
                var valueOf = value.valueOf && value.valueOf();
                if (valueOf != null && valueOf !== value) {
                    return Buffer.from(valueOf, encodingOrOffset, length);
                }
                var b = fromObject(value);
                if (b) return b;
                if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                    return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
                }
                throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof value);
            }
            Buffer.from = function(value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length);
            };
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;
            function assertSize(size) {
                if (typeof size !== "number") {
                    throw new TypeError('"size" argument must be of type number');
                } else if (size < 0) {
                    throw new RangeError('The value "' + size + '" is invalid for option "size"');
                }
            }
            function alloc(size, fill, encoding) {
                assertSize(size);
                if (size <= 0) {
                    return createBuffer(size);
                }
                if (fill !== undefined) {
                    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                }
                return createBuffer(size);
            }
            Buffer.alloc = function(size, fill, encoding) {
                return alloc(size, fill, encoding);
            };
            function allocUnsafe(size) {
                assertSize(size);
                return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }
            Buffer.allocUnsafe = function(size) {
                return allocUnsafe(size);
            };
            Buffer.allocUnsafeSlow = function(size) {
                return allocUnsafe(size);
            };
            function fromString(string, encoding) {
                if (typeof encoding !== "string" || encoding === "") {
                    encoding = "utf8";
                }
                if (!Buffer.isEncoding(encoding)) {
                    throw new TypeError("Unknown encoding: " + encoding);
                }
                var length = byteLength(string, encoding) | 0;
                var buf = createBuffer(length);
                var actual = buf.write(string, encoding);
                if (actual !== length) {
                    buf = buf.slice(0, actual);
                }
                return buf;
            }
            function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0;
                var buf = createBuffer(length);
                for (var i = 0; i < length; i += 1) {
                    buf[i] = array[i] & 255;
                }
                return buf;
            }
            function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError('"offset" is outside of buffer bounds');
                }
                if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError('"length" is outside of buffer bounds');
                }
                var buf;
                if (byteOffset === undefined && length === undefined) {
                    buf = new Uint8Array(array);
                } else if (length === undefined) {
                    buf = new Uint8Array(array, byteOffset);
                } else {
                    buf = new Uint8Array(array, byteOffset, length);
                }
                buf.__proto__ = Buffer.prototype;
                return buf;
            }
            function fromObject(obj) {
                if (Buffer.isBuffer(obj)) {
                    var len = checked(obj.length) | 0;
                    var buf = createBuffer(len);
                    if (buf.length === 0) {
                        return buf;
                    }
                    obj.copy(buf, 0, 0, len);
                    return buf;
                }
                if (obj.length !== undefined) {
                    if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                        return createBuffer(0);
                    }
                    return fromArrayLike(obj);
                }
                if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                    return fromArrayLike(obj.data);
                }
            }
            function checked(length) {
                if (length >= K_MAX_LENGTH) {
                    throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
                }
                return length | 0;
            }
            function SlowBuffer(length) {
                if (+length != length) {
                    length = 0;
                }
                return Buffer.alloc(+length);
            }
            Buffer.isBuffer = function isBuffer(b) {
                return b != null && b._isBuffer === true && b !== Buffer.prototype;
            };
            Buffer.compare = function compare(a, b) {
                if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
                if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                }
                if (a === b) return 0;
                var x = a.length;
                var y = b.length;
                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i];
                        y = b[i];
                        break;
                    }
                }
                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
            };
            Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                  case "hex":
                  case "utf8":
                  case "utf-8":
                  case "ascii":
                  case "latin1":
                  case "binary":
                  case "base64":
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return true;

                  default:
                    return false;
                }
            };
            Buffer.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                }
                if (list.length === 0) {
                    return Buffer.alloc(0);
                }
                var i;
                if (length === undefined) {
                    length = 0;
                    for (i = 0; i < list.length; ++i) {
                        length += list[i].length;
                    }
                }
                var buffer = Buffer.allocUnsafe(length);
                var pos = 0;
                for (i = 0; i < list.length; ++i) {
                    var buf = list[i];
                    if (isInstance(buf, Uint8Array)) {
                        buf = Buffer.from(buf);
                    }
                    if (!Buffer.isBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    buf.copy(buffer, pos);
                    pos += buf.length;
                }
                return buffer;
            };
            function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                    return string.length;
                }
                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                    return string.byteLength;
                }
                if (typeof string !== "string") {
                    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + "Received type " + typeof string);
                }
                var len = string.length;
                var mustMatch = arguments.length > 2 && arguments[2] === true;
                if (!mustMatch && len === 0) return 0;
                var loweredCase = false;
                for (;;) {
                    switch (encoding) {
                      case "ascii":
                      case "latin1":
                      case "binary":
                        return len;

                      case "utf8":
                      case "utf-8":
                        return utf8ToBytes(string).length;

                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return len * 2;

                      case "hex":
                        return len >>> 1;

                      case "base64":
                        return base64ToBytes(string).length;

                      default:
                        if (loweredCase) {
                            return mustMatch ? -1 : utf8ToBytes(string).length;
                        }
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true;
                    }
                }
            }
            Buffer.byteLength = byteLength;
            function slowToString(encoding, start, end) {
                var loweredCase = false;
                if (start === undefined || start < 0) {
                    start = 0;
                }
                if (start > this.length) {
                    return "";
                }
                if (end === undefined || end > this.length) {
                    end = this.length;
                }
                if (end <= 0) {
                    return "";
                }
                end >>>= 0;
                start >>>= 0;
                if (end <= start) {
                    return "";
                }
                if (!encoding) encoding = "utf8";
                while (true) {
                    switch (encoding) {
                      case "hex":
                        return hexSlice(this, start, end);

                      case "utf8":
                      case "utf-8":
                        return utf8Slice(this, start, end);

                      case "ascii":
                        return asciiSlice(this, start, end);

                      case "latin1":
                      case "binary":
                        return latin1Slice(this, start, end);

                      case "base64":
                        return base64Slice(this, start, end);

                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return utf16leSlice(this, start, end);

                      default:
                        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                        encoding = (encoding + "").toLowerCase();
                        loweredCase = true;
                    }
                }
            }
            Buffer.prototype._isBuffer = true;
            function swap(b, n, m) {
                var i = b[n];
                b[n] = b[m];
                b[m] = i;
            }
            Buffer.prototype.swap16 = function swap16() {
                var len = this.length;
                if (len % 2 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 16-bits");
                }
                for (var i = 0; i < len; i += 2) {
                    swap(this, i, i + 1);
                }
                return this;
            };
            Buffer.prototype.swap32 = function swap32() {
                var len = this.length;
                if (len % 4 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 32-bits");
                }
                for (var i = 0; i < len; i += 4) {
                    swap(this, i, i + 3);
                    swap(this, i + 1, i + 2);
                }
                return this;
            };
            Buffer.prototype.swap64 = function swap64() {
                var len = this.length;
                if (len % 8 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 64-bits");
                }
                for (var i = 0; i < len; i += 8) {
                    swap(this, i, i + 7);
                    swap(this, i + 1, i + 6);
                    swap(this, i + 2, i + 5);
                    swap(this, i + 3, i + 4);
                }
                return this;
            };
            Buffer.prototype.toString = function toString() {
                var length = this.length;
                if (length === 0) return "";
                if (arguments.length === 0) return utf8Slice(this, 0, length);
                return slowToString.apply(this, arguments);
            };
            Buffer.prototype.toLocaleString = Buffer.prototype.toString;
            Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
                if (this === b) return true;
                return Buffer.compare(this, b) === 0;
            };
            Buffer.prototype.inspect = function inspect() {
                var str = "";
                var max = exports.INSPECT_MAX_BYTES;
                str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
                if (this.length > max) str += " ... ";
                return "<Buffer " + str + ">";
            };
            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (isInstance(target, Uint8Array)) {
                    target = Buffer.from(target, target.offset, target.byteLength);
                }
                if (!Buffer.isBuffer(target)) {
                    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + "Received type " + typeof target);
                }
                if (start === undefined) {
                    start = 0;
                }
                if (end === undefined) {
                    end = target ? target.length : 0;
                }
                if (thisStart === undefined) {
                    thisStart = 0;
                }
                if (thisEnd === undefined) {
                    thisEnd = this.length;
                }
                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError("out of range index");
                }
                if (thisStart >= thisEnd && start >= end) {
                    return 0;
                }
                if (thisStart >= thisEnd) {
                    return -1;
                }
                if (start >= end) {
                    return 1;
                }
                start >>>= 0;
                end >>>= 0;
                thisStart >>>= 0;
                thisEnd >>>= 0;
                if (this === target) return 0;
                var x = thisEnd - thisStart;
                var y = end - start;
                var len = Math.min(x, y);
                var thisCopy = this.slice(thisStart, thisEnd);
                var targetCopy = target.slice(start, end);
                for (var i = 0; i < len; ++i) {
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i];
                        y = targetCopy[i];
                        break;
                    }
                }
                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
            };
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                if (buffer.length === 0) return -1;
                if (typeof byteOffset === "string") {
                    encoding = byteOffset;
                    byteOffset = 0;
                } else if (byteOffset > 2147483647) {
                    byteOffset = 2147483647;
                } else if (byteOffset < -2147483648) {
                    byteOffset = -2147483648;
                }
                byteOffset = +byteOffset;
                if (numberIsNaN(byteOffset)) {
                    byteOffset = dir ? 0 : buffer.length - 1;
                }
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                if (byteOffset >= buffer.length) {
                    if (dir) return -1; else byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                    if (dir) byteOffset = 0; else return -1;
                }
                if (typeof val === "string") {
                    val = Buffer.from(val, encoding);
                }
                if (Buffer.isBuffer(val)) {
                    if (val.length === 0) {
                        return -1;
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                } else if (typeof val === "number") {
                    val = val & 255;
                    if (typeof Uint8Array.prototype.indexOf === "function") {
                        if (dir) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                        }
                    }
                    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
                }
                throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1;
                var arrLength = arr.length;
                var valLength = val.length;
                if (encoding !== undefined) {
                    encoding = String(encoding).toLowerCase();
                    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                        if (arr.length < 2 || val.length < 2) {
                            return -1;
                        }
                        indexSize = 2;
                        arrLength /= 2;
                        valLength /= 2;
                        byteOffset /= 2;
                    }
                }
                function read(buf, i) {
                    if (indexSize === 1) {
                        return buf[i];
                    } else {
                        return buf.readUInt16BE(i * indexSize);
                    }
                }
                var i;
                if (dir) {
                    var foundIndex = -1;
                    for (i = byteOffset; i < arrLength; i++) {
                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i;
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex;
                            foundIndex = -1;
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                    for (i = byteOffset; i >= 0; i--) {
                        var found = true;
                        for (var j = 0; j < valLength; j++) {
                            if (read(arr, i + j) !== read(val, j)) {
                                found = false;
                                break;
                            }
                        }
                        if (found) return i;
                    }
                }
                return -1;
            }
            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = Number(length);
                    if (length > remaining) {
                        length = remaining;
                    }
                }
                var strLen = string.length;
                if (length > strLen / 2) {
                    length = strLen / 2;
                }
                for (var i = 0; i < length; ++i) {
                    var parsed = parseInt(string.substr(i * 2, 2), 16);
                    if (numberIsNaN(parsed)) return i;
                    buf[offset + i] = parsed;
                }
                return i;
            }
            function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer.prototype.write = function write(string, offset, length, encoding) {
                if (offset === undefined) {
                    encoding = "utf8";
                    length = this.length;
                    offset = 0;
                } else if (length === undefined && typeof offset === "string") {
                    encoding = offset;
                    length = this.length;
                    offset = 0;
                } else if (isFinite(offset)) {
                    offset = offset >>> 0;
                    if (isFinite(length)) {
                        length = length >>> 0;
                        if (encoding === undefined) encoding = "utf8";
                    } else {
                        encoding = length;
                        length = undefined;
                    }
                } else {
                    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                }
                var remaining = this.length - offset;
                if (length === undefined || length > remaining) length = remaining;
                if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                    throw new RangeError("Attempt to write outside buffer bounds");
                }
                if (!encoding) encoding = "utf8";
                var loweredCase = false;
                for (;;) {
                    switch (encoding) {
                      case "hex":
                        return hexWrite(this, string, offset, length);

                      case "utf8":
                      case "utf-8":
                        return utf8Write(this, string, offset, length);

                      case "ascii":
                        return asciiWrite(this, string, offset, length);

                      case "latin1":
                      case "binary":
                        return latin1Write(this, string, offset, length);

                      case "base64":
                        return base64Write(this, string, offset, length);

                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return ucs2Write(this, string, offset, length);

                      default:
                        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true;
                    }
                }
            };
            Buffer.prototype.toJSON = function toJSON() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                };
            };
            function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf);
                } else {
                    return base64.fromByteArray(buf.slice(start, end));
                }
            }
            function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                var res = [];
                var i = start;
                while (i < end) {
                    var firstByte = buf[i];
                    var codePoint = null;
                    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint;
                        switch (bytesPerSequence) {
                          case 1:
                            if (firstByte < 128) {
                                codePoint = firstByte;
                            }
                            break;

                          case 2:
                            secondByte = buf[i + 1];
                            if ((secondByte & 192) === 128) {
                                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                                if (tempCodePoint > 127) {
                                    codePoint = tempCodePoint;
                                }
                            }
                            break;

                          case 3:
                            secondByte = buf[i + 1];
                            thirdByte = buf[i + 2];
                            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                                    codePoint = tempCodePoint;
                                }
                            }
                            break;

                          case 4:
                            secondByte = buf[i + 1];
                            thirdByte = buf[i + 2];
                            fourthByte = buf[i + 3];
                            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                                    codePoint = tempCodePoint;
                                }
                            }
                        }
                    }
                    if (codePoint === null) {
                        codePoint = 65533;
                        bytesPerSequence = 1;
                    } else if (codePoint > 65535) {
                        codePoint -= 65536;
                        res.push(codePoint >>> 10 & 1023 | 55296);
                        codePoint = 56320 | codePoint & 1023;
                    }
                    res.push(codePoint);
                    i += bytesPerSequence;
                }
                return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints);
                }
                var res = "";
                var i = 0;
                while (i < len) {
                    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                }
                return res;
            }
            function asciiSlice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i] & 127);
                }
                return ret;
            }
            function latin1Slice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i]);
                }
                return ret;
            }
            function hexSlice(buf, start, end) {
                var len = buf.length;
                if (!start || start < 0) start = 0;
                if (!end || end < 0 || end > len) end = len;
                var out = "";
                for (var i = start; i < end; ++i) {
                    out += toHex(buf[i]);
                }
                return out;
            }
            function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end);
                var res = "";
                for (var i = 0; i < bytes.length; i += 2) {
                    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                }
                return res;
            }
            Buffer.prototype.slice = function slice(start, end) {
                var len = this.length;
                start = ~~start;
                end = end === undefined ? len : ~~end;
                if (start < 0) {
                    start += len;
                    if (start < 0) start = 0;
                } else if (start > len) {
                    start = len;
                }
                if (end < 0) {
                    end += len;
                    if (end < 0) end = 0;
                } else if (end > len) {
                    end = len;
                }
                if (end < start) end = start;
                var newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer.prototype;
                return newBuf;
            };
            function checkOffset(offset, ext, length) {
                if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
                if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;
                while (++i < byteLength && (mul *= 256)) {
                    val += this[offset + i] * mul;
                }
                return val;
            };
            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) {
                    checkOffset(offset, byteLength, this.length);
                }
                var val = this[offset + --byteLength];
                var mul = 1;
                while (byteLength > 0 && (mul *= 256)) {
                    val += this[offset + --byteLength] * mul;
                }
                return val;
            };
            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 1, this.length);
                return this[offset];
            };
            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] | this[offset + 1] << 8;
            };
            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] << 8 | this[offset + 1];
            };
            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;
                while (++i < byteLength && (mul *= 256)) {
                    val += this[offset + i] * mul;
                }
                mul *= 128;
                if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                return val;
            };
            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);
                var i = byteLength;
                var mul = 1;
                var val = this[offset + --i];
                while (i > 0 && (mul *= 256)) {
                    val += this[offset + --i] * mul;
                }
                mul *= 128;
                if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                return val;
            };
            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 1, this.length);
                if (!(this[offset] & 128)) return this[offset];
                return (255 - this[offset] + 1) * -1;
            };
            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset] | this[offset + 1] << 8;
                return val & 32768 ? val | 4294901760 : val;
            };
            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | this[offset] << 8;
                return val & 32768 ? val | 4294901760 : val;
            };
            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length) throw new RangeError("Index out of range");
            }
            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                    checkInt(this, value, offset, byteLength, maxBytes, 0);
                }
                var mul = 1;
                var i = 0;
                this[offset] = value & 255;
                while (++i < byteLength && (mul *= 256)) {
                    this[offset + i] = value / mul & 255;
                }
                return offset + byteLength;
            };
            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                    checkInt(this, value, offset, byteLength, maxBytes, 0);
                }
                var i = byteLength - 1;
                var mul = 1;
                this[offset + i] = value & 255;
                while (--i >= 0 && (mul *= 256)) {
                    this[offset + i] = value / mul & 255;
                }
                return offset + byteLength;
            };
            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
                this[offset] = value & 255;
                return offset + 1;
            };
            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                return offset + 2;
            };
            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
                return offset + 2;
            };
            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 255;
                return offset + 4;
            };
            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
                return offset + 4;
            };
            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1);
                    checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }
                var i = 0;
                var mul = 1;
                var sub = 0;
                this[offset] = value & 255;
                while (++i < byteLength && (mul *= 256)) {
                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1;
                    }
                    this[offset + i] = (value / mul >> 0) - sub & 255;
                }
                return offset + byteLength;
            };
            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1);
                    checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }
                var i = byteLength - 1;
                var mul = 1;
                var sub = 0;
                this[offset + i] = value & 255;
                while (--i >= 0 && (mul *= 256)) {
                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1;
                    }
                    this[offset + i] = (value / mul >> 0) - sub & 255;
                }
                return offset + byteLength;
            };
            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
                if (value < 0) value = 255 + value + 1;
                this[offset] = value & 255;
                return offset + 1;
            };
            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                return offset + 2;
            };
            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
                return offset + 2;
            };
            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
                return offset + 4;
            };
            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
                if (value < 0) value = 4294967295 + value + 1;
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
                return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError("Index out of range");
                if (offset < 0) throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4);
                return offset + 4;
            }
            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8);
                return offset + 8;
            }
            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
                if (!start) start = 0;
                if (!end && end !== 0) end = this.length;
                if (targetStart >= target.length) targetStart = target.length;
                if (!targetStart) targetStart = 0;
                if (end > 0 && end < start) end = start;
                if (end === start) return 0;
                if (target.length === 0 || this.length === 0) return 0;
                if (targetStart < 0) {
                    throw new RangeError("targetStart out of bounds");
                }
                if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
                if (end < 0) throw new RangeError("sourceEnd out of bounds");
                if (end > this.length) end = this.length;
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start;
                }
                var len = end - start;
                if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                    this.copyWithin(targetStart, start, end);
                } else if (this === target && start < targetStart && targetStart < end) {
                    for (var i = len - 1; i >= 0; --i) {
                        target[i + targetStart] = this[i + start];
                    }
                } else {
                    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
                }
                return len;
            };
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
                if (typeof val === "string") {
                    if (typeof start === "string") {
                        encoding = start;
                        start = 0;
                        end = this.length;
                    } else if (typeof end === "string") {
                        encoding = end;
                        end = this.length;
                    }
                    if (encoding !== undefined && typeof encoding !== "string") {
                        throw new TypeError("encoding must be a string");
                    }
                    if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
                        throw new TypeError("Unknown encoding: " + encoding);
                    }
                    if (val.length === 1) {
                        var code = val.charCodeAt(0);
                        if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                            val = code;
                        }
                    }
                } else if (typeof val === "number") {
                    val = val & 255;
                }
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError("Out of range index");
                }
                if (end <= start) {
                    return this;
                }
                start = start >>> 0;
                end = end === undefined ? this.length : end >>> 0;
                if (!val) val = 0;
                var i;
                if (typeof val === "number") {
                    for (i = start; i < end; ++i) {
                        this[i] = val;
                    }
                } else {
                    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                    var len = bytes.length;
                    if (len === 0) {
                        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                    }
                    for (i = 0; i < end - start; ++i) {
                        this[i + start] = bytes[i % len];
                    }
                }
                return this;
            };
            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
            function base64clean(str) {
                str = str.split("=")[0];
                str = str.trim().replace(INVALID_BASE64_RE, "");
                if (str.length < 2) return "";
                while (str.length % 4 !== 0) {
                    str = str + "=";
                }
                return str;
            }
            function toHex(n) {
                if (n < 16) return "0" + n.toString(16);
                return n.toString(16);
            }
            function utf8ToBytes(string, units) {
                units = units || Infinity;
                var codePoint;
                var length = string.length;
                var leadSurrogate = null;
                var bytes = [];
                for (var i = 0; i < length; ++i) {
                    codePoint = string.charCodeAt(i);
                    if (codePoint > 55295 && codePoint < 57344) {
                        if (!leadSurrogate) {
                            if (codePoint > 56319) {
                                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                continue;
                            } else if (i + 1 === length) {
                                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                continue;
                            }
                            leadSurrogate = codePoint;
                            continue;
                        }
                        if (codePoint < 56320) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            leadSurrogate = codePoint;
                            continue;
                        }
                        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                    } else if (leadSurrogate) {
                        if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    }
                    leadSurrogate = null;
                    if (codePoint < 128) {
                        if ((units -= 1) < 0) break;
                        bytes.push(codePoint);
                    } else if (codePoint < 2048) {
                        if ((units -= 2) < 0) break;
                        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                    } else if (codePoint < 65536) {
                        if ((units -= 3) < 0) break;
                        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                    } else if (codePoint < 1114112) {
                        if ((units -= 4) < 0) break;
                        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                    } else {
                        throw new Error("Invalid code point");
                    }
                }
                return bytes;
            }
            function asciiToBytes(str) {
                var byteArray = [];
                for (var i = 0; i < str.length; ++i) {
                    byteArray.push(str.charCodeAt(i) & 255);
                }
                return byteArray;
            }
            function utf16leToBytes(str, units) {
                var c, hi, lo;
                var byteArray = [];
                for (var i = 0; i < str.length; ++i) {
                    if ((units -= 2) < 0) break;
                    c = str.charCodeAt(i);
                    hi = c >> 8;
                    lo = c % 256;
                    byteArray.push(lo);
                    byteArray.push(hi);
                }
                return byteArray;
            }
            function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                    if (i + offset >= dst.length || i >= src.length) break;
                    dst[i + offset] = src[i];
                }
                return i;
            }
            function isInstance(obj, type) {
                return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
            }
            function numberIsNaN(obj) {
                return obj !== obj;
            }
        }).call(this, _dereq_(12).Buffer);
    }, {
        12: 12,
        16: 16,
        6: 6
    } ],
    13: [ function(_dereq_, module, exports) {
        var ISOBoxer = {};
        ISOBoxer.parseBuffer = function(arrayBuffer) {
            return new ISOFile(arrayBuffer).parse();
        };
        ISOBoxer.addBoxProcessor = function(type, parser) {
            if (typeof type !== "string" || typeof parser !== "function") {
                return;
            }
            ISOBox.prototype._boxProcessors[type] = parser;
        };
        ISOBoxer.createFile = function() {
            return new ISOFile();
        };
        ISOBoxer.createBox = function(type, parent, pos) {
            var newBox = ISOBox.create(type);
            if (parent) {
                parent.append(newBox, pos);
            }
            return newBox;
        };
        ISOBoxer.createFullBox = function(type, parent, pos) {
            var newBox = ISOBoxer.createBox(type, parent, pos);
            newBox.version = 0;
            newBox.flags = 0;
            return newBox;
        };
        ISOBoxer.Utils = {};
        ISOBoxer.Utils.dataViewToString = function(dataView, encoding) {
            var impliedEncoding = encoding || "utf-8";
            if (typeof TextDecoder !== "undefined") {
                return new TextDecoder(impliedEncoding).decode(dataView);
            }
            var a = [];
            var i = 0;
            if (impliedEncoding === "utf-8") {
                while (i < dataView.byteLength) {
                    var c = dataView.getUint8(i++);
                    if (c < 128) {} else if (c < 224) {
                        c = (c & 31) << 6;
                        c |= dataView.getUint8(i++) & 63;
                    } else if (c < 240) {
                        c = (c & 15) << 12;
                        c |= (dataView.getUint8(i++) & 63) << 6;
                        c |= dataView.getUint8(i++) & 63;
                    } else {
                        c = (c & 7) << 18;
                        c |= (dataView.getUint8(i++) & 63) << 12;
                        c |= (dataView.getUint8(i++) & 63) << 6;
                        c |= dataView.getUint8(i++) & 63;
                    }
                    a.push(String.fromCharCode(c));
                }
            } else {
                while (i < dataView.byteLength) {
                    a.push(String.fromCharCode(dataView.getUint8(i++)));
                }
            }
            return a.join("");
        };
        ISOBoxer.Utils.utf8ToByteArray = function(string) {
            var u, i;
            if (typeof TextEncoder !== "undefined") {
                u = new TextEncoder().encode(string);
            } else {
                u = [];
                for (i = 0; i < string.length; ++i) {
                    var c = string.charCodeAt(i);
                    if (c < 128) {
                        u.push(c);
                    } else if (c < 2048) {
                        u.push(192 | c >> 6);
                        u.push(128 | 63 & c);
                    } else if (c < 65536) {
                        u.push(224 | c >> 12);
                        u.push(128 | 63 & c >> 6);
                        u.push(128 | 63 & c);
                    } else {
                        u.push(240 | c >> 18);
                        u.push(128 | 63 & c >> 12);
                        u.push(128 | 63 & c >> 6);
                        u.push(128 | 63 & c);
                    }
                }
            }
            return u;
        };
        ISOBoxer.Utils.appendBox = function(parent, box, pos) {
            box._offset = parent._cursor.offset;
            box._root = parent._root ? parent._root : parent;
            box._raw = parent._raw;
            box._parent = parent;
            if (pos === -1) {
                return;
            }
            if (pos === undefined || pos === null) {
                parent.boxes.push(box);
                return;
            }
            var index = -1, type;
            if (typeof pos === "number") {
                index = pos;
            } else {
                if (typeof pos === "string") {
                    type = pos;
                } else if (typeof pos === "object" && pos.type) {
                    type = pos.type;
                } else {
                    parent.boxes.push(box);
                    return;
                }
                for (var i = 0; i < parent.boxes.length; i++) {
                    if (type === parent.boxes[i].type) {
                        index = i + 1;
                        break;
                    }
                }
            }
            parent.boxes.splice(index, 0, box);
        };
        if (typeof exports !== "undefined") {
            exports.parseBuffer = ISOBoxer.parseBuffer;
            exports.addBoxProcessor = ISOBoxer.addBoxProcessor;
            exports.createFile = ISOBoxer.createFile;
            exports.createBox = ISOBoxer.createBox;
            exports.createFullBox = ISOBoxer.createFullBox;
            exports.Utils = ISOBoxer.Utils;
        }
        ISOBoxer.Cursor = function(initialOffset) {
            this.offset = typeof initialOffset == "undefined" ? 0 : initialOffset;
        };
        var ISOFile = function(arrayBuffer) {
            this._cursor = new ISOBoxer.Cursor();
            this.boxes = [];
            if (arrayBuffer) {
                this._raw = new DataView(arrayBuffer);
            }
        };
        ISOFile.prototype.fetch = function(type) {
            var result = this.fetchAll(type, true);
            return result.length ? result[0] : null;
        };
        ISOFile.prototype.fetchAll = function(type, returnEarly) {
            var result = [];
            ISOFile._sweep.call(this, type, result, returnEarly);
            return result;
        };
        ISOFile.prototype.parse = function() {
            this._cursor.offset = 0;
            this.boxes = [];
            while (this._cursor.offset < this._raw.byteLength) {
                var box = ISOBox.parse(this);
                if (typeof box.type === "undefined") break;
                this.boxes.push(box);
            }
            return this;
        };
        ISOFile._sweep = function(type, result, returnEarly) {
            if (this.type && this.type == type) result.push(this);
            for (var box in this.boxes) {
                if (result.length && returnEarly) return;
                ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);
            }
        };
        ISOFile.prototype.write = function() {
            var length = 0, i;
            for (i = 0; i < this.boxes.length; i++) {
                length += this.boxes[i].getLength(false);
            }
            var bytes = new Uint8Array(length);
            this._rawo = new DataView(bytes.buffer);
            this.bytes = bytes;
            this._cursor.offset = 0;
            for (i = 0; i < this.boxes.length; i++) {
                this.boxes[i].write();
            }
            return bytes.buffer;
        };
        ISOFile.prototype.append = function(box, pos) {
            ISOBoxer.Utils.appendBox(this, box, pos);
        };
        var ISOBox = function() {
            this._cursor = new ISOBoxer.Cursor();
        };
        ISOBox.parse = function(parent) {
            var newBox = new ISOBox();
            newBox._offset = parent._cursor.offset;
            newBox._root = parent._root ? parent._root : parent;
            newBox._raw = parent._raw;
            newBox._parent = parent;
            newBox._parseBox();
            parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength;
            return newBox;
        };
        ISOBox.create = function(type) {
            var newBox = new ISOBox();
            newBox.type = type;
            newBox.boxes = [];
            return newBox;
        };
        ISOBox.prototype._boxContainers = [ "dinf", "edts", "mdia", "meco", "mfra", "minf", "moof", "moov", "mvex", "stbl", "strk", "traf", "trak", "tref", "udta", "vttc", "sinf", "schi", "encv", "enca" ];
        ISOBox.prototype._boxProcessors = {};
        ISOBox.prototype._procField = function(name, type, size) {
            if (this._parsing) {
                this[name] = this._readField(type, size);
            } else {
                this._writeField(type, size, this[name]);
            }
        };
        ISOBox.prototype._procFieldArray = function(name, length, type, size) {
            var i;
            if (this._parsing) {
                this[name] = [];
                for (i = 0; i < length; i++) {
                    this[name][i] = this._readField(type, size);
                }
            } else {
                for (i = 0; i < this[name].length; i++) {
                    this._writeField(type, size, this[name][i]);
                }
            }
        };
        ISOBox.prototype._procFullBox = function() {
            this._procField("version", "uint", 8);
            this._procField("flags", "uint", 24);
        };
        ISOBox.prototype._procEntries = function(name, length, fn) {
            var i;
            if (this._parsing) {
                this[name] = [];
                for (i = 0; i < length; i++) {
                    this[name].push({});
                    fn.call(this, this[name][i]);
                }
            } else {
                for (i = 0; i < length; i++) {
                    fn.call(this, this[name][i]);
                }
            }
        };
        ISOBox.prototype._procSubEntries = function(entry, name, length, fn) {
            var i;
            if (this._parsing) {
                entry[name] = [];
                for (i = 0; i < length; i++) {
                    entry[name].push({});
                    fn.call(this, entry[name][i]);
                }
            } else {
                for (i = 0; i < length; i++) {
                    fn.call(this, entry[name][i]);
                }
            }
        };
        ISOBox.prototype._procEntryField = function(entry, name, type, size) {
            if (this._parsing) {
                entry[name] = this._readField(type, size);
            } else {
                this._writeField(type, size, entry[name]);
            }
        };
        ISOBox.prototype._procSubBoxes = function(name, length) {
            var i;
            if (this._parsing) {
                this[name] = [];
                for (i = 0; i < length; i++) {
                    this[name].push(ISOBox.parse(this));
                }
            } else {
                for (i = 0; i < length; i++) {
                    if (this._rawo) {
                        this[name][i].write();
                    } else {
                        this.size += this[name][i].getLength();
                    }
                }
            }
        };
        ISOBox.prototype._readField = function(type, size) {
            switch (type) {
              case "uint":
                return this._readUint(size);

              case "int":
                return this._readInt(size);

              case "template":
                return this._readTemplate(size);

              case "string":
                return size === -1 ? this._readTerminatedString() : this._readString(size);

              case "data":
                return this._readData(size);

              case "utf8":
                return this._readUTF8String();

              default:
                return -1;
            }
        };
        ISOBox.prototype._readInt = function(size) {
            var result = null, offset = this._cursor.offset - this._raw.byteOffset;
            switch (size) {
              case 8:
                result = this._raw.getInt8(offset);
                break;

              case 16:
                result = this._raw.getInt16(offset);
                break;

              case 32:
                result = this._raw.getInt32(offset);
                break;

              case 64:
                var s1 = this._raw.getInt32(offset);
                var s2 = this._raw.getInt32(offset + 4);
                result = s1 * Math.pow(2, 32) + s2;
                break;
            }
            this._cursor.offset += size >> 3;
            return result;
        };
        ISOBox.prototype._readUint = function(size) {
            var result = null, offset = this._cursor.offset - this._raw.byteOffset, s1, s2;
            switch (size) {
              case 8:
                result = this._raw.getUint8(offset);
                break;

              case 16:
                result = this._raw.getUint16(offset);
                break;

              case 24:
                s1 = this._raw.getUint16(offset);
                s2 = this._raw.getUint8(offset + 2);
                result = (s1 << 8) + s2;
                break;

              case 32:
                result = this._raw.getUint32(offset);
                break;

              case 64:
                s1 = this._raw.getUint32(offset);
                s2 = this._raw.getUint32(offset + 4);
                result = s1 * Math.pow(2, 32) + s2;
                break;
            }
            this._cursor.offset += size >> 3;
            return result;
        };
        ISOBox.prototype._readString = function(length) {
            var str = "";
            for (var c = 0; c < length; c++) {
                var char = this._readUint(8);
                str += String.fromCharCode(char);
            }
            return str;
        };
        ISOBox.prototype._readTemplate = function(size) {
            var pre = this._readUint(size / 2);
            var post = this._readUint(size / 2);
            return pre + post / Math.pow(2, size / 2);
        };
        ISOBox.prototype._readTerminatedString = function() {
            var str = "";
            while (this._cursor.offset - this._offset < this._raw.byteLength) {
                var char = this._readUint(8);
                if (char === 0) break;
                str += String.fromCharCode(char);
            }
            return str;
        };
        ISOBox.prototype._readData = function(size) {
            var length = size > 0 ? size : this._raw.byteLength - (this._cursor.offset - this._offset);
            if (length > 0) {
                var data = new Uint8Array(this._raw.buffer, this._cursor.offset, length);
                this._cursor.offset += length;
                return data;
            } else {
                return null;
            }
        };
        ISOBox.prototype._readUTF8String = function() {
            var length = this._raw.byteLength - (this._cursor.offset - this._offset);
            var data = null;
            if (length > 0) {
                data = new DataView(this._raw.buffer, this._cursor.offset, length);
                this._cursor.offset += length;
            }
            return data ? ISOBoxer.Utils.dataViewToString(data) : data;
        };
        ISOBox.prototype._parseBox = function() {
            this._parsing = true;
            this._cursor.offset = this._offset;
            if (this._offset + 8 > this._raw.buffer.byteLength) {
                this._root._incomplete = true;
                return;
            }
            this._procField("size", "uint", 32);
            this._procField("type", "string", 4);
            if (this.size === 1) {
                this._procField("largesize", "uint", 64);
            }
            if (this.type === "uuid") {
                this._procFieldArray("usertype", 16, "uint", 8);
            }
            switch (this.size) {
              case 0:
                this._raw = new DataView(this._raw.buffer, this._offset, this._raw.byteLength - this._cursor.offset + 8);
                break;

              case 1:
                if (this._offset + this.size > this._raw.buffer.byteLength) {
                    this._incomplete = true;
                    this._root._incomplete = true;
                } else {
                    this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);
                }
                break;

              default:
                if (this._offset + this.size > this._raw.buffer.byteLength) {
                    this._incomplete = true;
                    this._root._incomplete = true;
                } else {
                    this._raw = new DataView(this._raw.buffer, this._offset, this.size);
                }
            }
            if (!this._incomplete) {
                if (this._boxProcessors[this.type]) {
                    this._boxProcessors[this.type].call(this);
                }
                if (this._boxContainers.indexOf(this.type) !== -1) {
                    this._parseContainerBox();
                } else {
                    this._data = this._readData();
                }
            }
        };
        ISOBox.prototype._parseFullBox = function() {
            this.version = this._readUint(8);
            this.flags = this._readUint(24);
        };
        ISOBox.prototype._parseContainerBox = function() {
            this.boxes = [];
            while (this._cursor.offset - this._raw.byteOffset < this._raw.byteLength) {
                this.boxes.push(ISOBox.parse(this));
            }
        };
        ISOBox.prototype.append = function(box, pos) {
            ISOBoxer.Utils.appendBox(this, box, pos);
        };
        ISOBox.prototype.getLength = function() {
            this._parsing = false;
            this._rawo = null;
            this.size = 0;
            this._procField("size", "uint", 32);
            this._procField("type", "string", 4);
            if (this.size === 1) {
                this._procField("largesize", "uint", 64);
            }
            if (this.type === "uuid") {
                this._procFieldArray("usertype", 16, "uint", 8);
            }
            if (this._boxProcessors[this.type]) {
                this._boxProcessors[this.type].call(this);
            }
            if (this._boxContainers.indexOf(this.type) !== -1) {
                for (var i = 0; i < this.boxes.length; i++) {
                    this.size += this.boxes[i].getLength();
                }
            }
            if (this._data) {
                this._writeData(this._data);
            }
            return this.size;
        };
        ISOBox.prototype.write = function() {
            this._parsing = false;
            this._cursor.offset = this._parent._cursor.offset;
            switch (this.size) {
              case 0:
                this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.parent._rawo.byteLength - this._cursor.offset);
                break;

              case 1:
                this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);
                break;

              default:
                this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);
            }
            this._procField("size", "uint", 32);
            this._procField("type", "string", 4);
            if (this.size === 1) {
                this._procField("largesize", "uint", 64);
            }
            if (this.type === "uuid") {
                this._procFieldArray("usertype", 16, "uint", 8);
            }
            if (this._boxProcessors[this.type]) {
                this._boxProcessors[this.type].call(this);
            }
            if (this._boxContainers.indexOf(this.type) !== -1) {
                for (var i = 0; i < this.boxes.length; i++) {
                    this.boxes[i].write();
                }
            }
            if (this._data) {
                this._writeData(this._data);
            }
            this._parent._cursor.offset += this.size;
            return this.size;
        };
        ISOBox.prototype._writeInt = function(size, value) {
            if (this._rawo) {
                var offset = this._cursor.offset - this._rawo.byteOffset;
                switch (size) {
                  case 8:
                    this._rawo.setInt8(offset, value);
                    break;

                  case 16:
                    this._rawo.setInt16(offset, value);
                    break;

                  case 32:
                    this._rawo.setInt32(offset, value);
                    break;

                  case 64:
                    var s1 = Math.floor(value / Math.pow(2, 32));
                    var s2 = value - s1 * Math.pow(2, 32);
                    this._rawo.setUint32(offset, s1);
                    this._rawo.setUint32(offset + 4, s2);
                    break;
                }
                this._cursor.offset += size >> 3;
            } else {
                this.size += size >> 3;
            }
        };
        ISOBox.prototype._writeUint = function(size, value) {
            if (this._rawo) {
                var offset = this._cursor.offset - this._rawo.byteOffset, s1, s2;
                switch (size) {
                  case 8:
                    this._rawo.setUint8(offset, value);
                    break;

                  case 16:
                    this._rawo.setUint16(offset, value);
                    break;

                  case 24:
                    s1 = (value & 16776960) >> 8;
                    s2 = value & 255;
                    this._rawo.setUint16(offset, s1);
                    this._rawo.setUint8(offset + 2, s2);
                    break;

                  case 32:
                    this._rawo.setUint32(offset, value);
                    break;

                  case 64:
                    s1 = Math.floor(value / Math.pow(2, 32));
                    s2 = value - s1 * Math.pow(2, 32);
                    this._rawo.setUint32(offset, s1);
                    this._rawo.setUint32(offset + 4, s2);
                    break;
                }
                this._cursor.offset += size >> 3;
            } else {
                this.size += size >> 3;
            }
        };
        ISOBox.prototype._writeString = function(size, str) {
            for (var c = 0; c < size; c++) {
                this._writeUint(8, str.charCodeAt(c));
            }
        };
        ISOBox.prototype._writeTerminatedString = function(str) {
            if (str.length === 0) {
                return;
            }
            for (var c = 0; c < str.length; c++) {
                this._writeUint(8, str.charCodeAt(c));
            }
            this._writeUint(8, 0);
        };
        ISOBox.prototype._writeTemplate = function(size, value) {
            var pre = Math.floor(value);
            var post = (value - pre) * Math.pow(2, size / 2);
            this._writeUint(size / 2, pre);
            this._writeUint(size / 2, post);
        };
        ISOBox.prototype._writeData = function(data) {
            var i;
            if (data) {
                if (this._rawo) {
                    if (data instanceof Array) {
                        var offset = this._cursor.offset - this._rawo.byteOffset;
                        for (var i = 0; i < data.length; i++) {
                            this._rawo.setInt8(offset + i, data[i]);
                        }
                        this._cursor.offset += data.length;
                    }
                    if (data instanceof Uint8Array) {
                        this._root.bytes.set(data, this._cursor.offset);
                        this._cursor.offset += data.length;
                    }
                } else {
                    this.size += data.length;
                }
            }
        };
        ISOBox.prototype._writeUTF8String = function(string) {
            var u = ISOBoxer.Utils.utf8ToByteArray(string);
            if (this._rawo) {
                var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length);
                for (var i = 0; i < u.length; i++) {
                    dataView.setUint8(i, u[i]);
                }
            } else {
                this.size += u.length;
            }
        };
        ISOBox.prototype._writeField = function(type, size, value) {
            switch (type) {
              case "uint":
                this._writeUint(size, value);
                break;

              case "int":
                this._writeInt(size, value);
                break;

              case "template":
                this._writeTemplate(size, value);
                break;

              case "string":
                if (size == -1) {
                    this._writeTerminatedString(value);
                } else {
                    this._writeString(size, value);
                }
                break;

              case "data":
                this._writeData(value);
                break;

              case "utf8":
                this._writeUTF8String(value);
                break;

              default:
                break;
            }
        };
        ISOBox.prototype._boxProcessors["avc1"] = ISOBox.prototype._boxProcessors["encv"] = function() {
            this._procFieldArray("reserved1", 6, "uint", 8);
            this._procField("data_reference_index", "uint", 16);
            this._procField("pre_defined1", "uint", 16);
            this._procField("reserved2", "uint", 16);
            this._procFieldArray("pre_defined2", 3, "uint", 32);
            this._procField("width", "uint", 16);
            this._procField("height", "uint", 16);
            this._procField("horizresolution", "template", 32);
            this._procField("vertresolution", "template", 32);
            this._procField("reserved3", "uint", 32);
            this._procField("frame_count", "uint", 16);
            this._procFieldArray("compressorname", 32, "uint", 8);
            this._procField("depth", "uint", 16);
            this._procField("pre_defined3", "int", 16);
            this._procField("config", "data", -1);
        };
        ISOBox.prototype._boxProcessors["dref"] = function() {
            this._procFullBox();
            this._procField("entry_count", "uint", 32);
            this._procSubBoxes("entries", this.entry_count);
        };
        ISOBox.prototype._boxProcessors["elst"] = function() {
            this._procFullBox();
            this._procField("entry_count", "uint", 32);
            this._procEntries("entries", this.entry_count, function(entry) {
                this._procEntryField(entry, "segment_duration", "uint", this.version === 1 ? 64 : 32);
                this._procEntryField(entry, "media_time", "int", this.version === 1 ? 64 : 32);
                this._procEntryField(entry, "media_rate_integer", "int", 16);
                this._procEntryField(entry, "media_rate_fraction", "int", 16);
            });
        };
        ISOBox.prototype._boxProcessors["emsg"] = function() {
            this._procFullBox();
            if (this.version == 1) {
                this._procField("timescale", "uint", 32);
                this._procField("presentation_time", "uint", 64);
                this._procField("event_duration", "uint", 32);
                this._procField("id", "uint", 32);
                this._procField("scheme_id_uri", "string", -1);
                this._procField("value", "string", -1);
            } else {
                this._procField("scheme_id_uri", "string", -1);
                this._procField("value", "string", -1);
                this._procField("timescale", "uint", 32);
                this._procField("presentation_time_delta", "uint", 32);
                this._procField("event_duration", "uint", 32);
                this._procField("id", "uint", 32);
            }
            this._procField("message_data", "data", -1);
        };
        ISOBox.prototype._boxProcessors["free"] = ISOBox.prototype._boxProcessors["skip"] = function() {
            this._procField("data", "data", -1);
        };
        ISOBox.prototype._boxProcessors["frma"] = function() {
            this._procField("data_format", "uint", 32);
        };
        ISOBox.prototype._boxProcessors["ftyp"] = ISOBox.prototype._boxProcessors["styp"] = function() {
            this._procField("major_brand", "string", 4);
            this._procField("minor_version", "uint", 32);
            var nbCompatibleBrands = -1;
            if (this._parsing) {
                nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4;
            }
            this._procFieldArray("compatible_brands", nbCompatibleBrands, "string", 4);
        };
        ISOBox.prototype._boxProcessors["hdlr"] = function() {
            this._procFullBox();
            this._procField("pre_defined", "uint", 32);
            this._procField("handler_type", "string", 4);
            this._procFieldArray("reserved", 3, "uint", 32);
            this._procField("name", "string", -1);
        };
        ISOBox.prototype._boxProcessors["mdat"] = function() {
            this._procField("data", "data", -1);
        };
        ISOBox.prototype._boxProcessors["mdhd"] = function() {
            this._procFullBox();
            this._procField("creation_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("modification_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("timescale", "uint", 32);
            this._procField("duration", "uint", this.version == 1 ? 64 : 32);
            if (!this._parsing && typeof this.language === "string") {
                this.language = this.language.charCodeAt(0) - 96 << 10 | this.language.charCodeAt(1) - 96 << 5 | this.language.charCodeAt(2) - 96;
            }
            this._procField("language", "uint", 16);
            if (this._parsing) {
                this.language = String.fromCharCode((this.language >> 10 & 31) + 96, (this.language >> 5 & 31) + 96, (this.language & 31) + 96);
            }
            this._procField("pre_defined", "uint", 16);
        };
        ISOBox.prototype._boxProcessors["mehd"] = function() {
            this._procFullBox();
            this._procField("fragment_duration", "uint", this.version == 1 ? 64 : 32);
        };
        ISOBox.prototype._boxProcessors["mfhd"] = function() {
            this._procFullBox();
            this._procField("sequence_number", "uint", 32);
        };
        ISOBox.prototype._boxProcessors["mfro"] = function() {
            this._procFullBox();
            this._procField("mfra_size", "uint", 32);
        };
        ISOBox.prototype._boxProcessors["mp4a"] = ISOBox.prototype._boxProcessors["enca"] = function() {
            this._procFieldArray("reserved1", 6, "uint", 8);
            this._procField("data_reference_index", "uint", 16);
            this._procFieldArray("reserved2", 2, "uint", 32);
            this._procField("channelcount", "uint", 16);
            this._procField("samplesize", "uint", 16);
            this._procField("pre_defined", "uint", 16);
            this._procField("reserved3", "uint", 16);
            this._procField("samplerate", "template", 32);
            this._procField("esds", "data", -1);
        };
        ISOBox.prototype._boxProcessors["mvhd"] = function() {
            this._procFullBox();
            this._procField("creation_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("modification_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("timescale", "uint", 32);
            this._procField("duration", "uint", this.version == 1 ? 64 : 32);
            this._procField("rate", "template", 32);
            this._procField("volume", "template", 16);
            this._procField("reserved1", "uint", 16);
            this._procFieldArray("reserved2", 2, "uint", 32);
            this._procFieldArray("matrix", 9, "template", 32);
            this._procFieldArray("pre_defined", 6, "uint", 32);
            this._procField("next_track_ID", "uint", 32);
        };
        ISOBox.prototype._boxProcessors["payl"] = function() {
            this._procField("cue_text", "utf8");
        };
        ISOBox.prototype._boxProcessors["pssh"] = function() {
            this._procFullBox();
            this._procFieldArray("SystemID", 16, "uint", 8);
            this._procField("DataSize", "uint", 32);
            this._procFieldArray("Data", this.DataSize, "uint", 8);
        };
        ISOBox.prototype._boxProcessors["schm"] = function() {
            this._procFullBox();
            this._procField("scheme_type", "uint", 32);
            this._procField("scheme_version", "uint", 32);
            if (this.flags & 1) {
                this._procField("scheme_uri", "string", -1);
            }
        };
        ISOBox.prototype._boxProcessors["sdtp"] = function() {
            this._procFullBox();
            var sample_count = -1;
            if (this._parsing) {
                sample_count = this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset);
            }
            this._procFieldArray("sample_dependency_table", sample_count, "uint", 8);
        };
        ISOBox.prototype._boxProcessors["sidx"] = function() {
            this._procFullBox();
            this._procField("reference_ID", "uint", 32);
            this._procField("timescale", "uint", 32);
            this._procField("earliest_presentation_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("first_offset", "uint", this.version == 1 ? 64 : 32);
            this._procField("reserved", "uint", 16);
            this._procField("reference_count", "uint", 16);
            this._procEntries("references", this.reference_count, function(entry) {
                if (!this._parsing) {
                    entry.reference = (entry.reference_type & 1) << 31;
                    entry.reference |= entry.referenced_size & 2147483647;
                    entry.sap = (entry.starts_with_SAP & 1) << 31;
                    entry.sap |= (entry.SAP_type & 3) << 28;
                    entry.sap |= entry.SAP_delta_time & 268435455;
                }
                this._procEntryField(entry, "reference", "uint", 32);
                this._procEntryField(entry, "subsegment_duration", "uint", 32);
                this._procEntryField(entry, "sap", "uint", 32);
                if (this._parsing) {
                    entry.reference_type = entry.reference >> 31 & 1;
                    entry.referenced_size = entry.reference & 2147483647;
                    entry.starts_with_SAP = entry.sap >> 31 & 1;
                    entry.SAP_type = entry.sap >> 28 & 7;
                    entry.SAP_delta_time = entry.sap & 268435455;
                }
            });
        };
        ISOBox.prototype._boxProcessors["smhd"] = function() {
            this._procFullBox();
            this._procField("balance", "uint", 16);
            this._procField("reserved", "uint", 16);
        };
        ISOBox.prototype._boxProcessors["ssix"] = function() {
            this._procFullBox();
            this._procField("subsegment_count", "uint", 32);
            this._procEntries("subsegments", this.subsegment_count, function(subsegment) {
                this._procEntryField(subsegment, "ranges_count", "uint", 32);
                this._procSubEntries(subsegment, "ranges", subsegment.ranges_count, function(range) {
                    this._procEntryField(range, "level", "uint", 8);
                    this._procEntryField(range, "range_size", "uint", 24);
                });
            });
        };
        ISOBox.prototype._boxProcessors["stsd"] = function() {
            this._procFullBox();
            this._procField("entry_count", "uint", 32);
            this._procSubBoxes("entries", this.entry_count);
        };
        ISOBox.prototype._boxProcessors["subs"] = function() {
            this._procFullBox();
            this._procField("entry_count", "uint", 32);
            this._procEntries("entries", this.entry_count, function(entry) {
                this._procEntryField(entry, "sample_delta", "uint", 32);
                this._procEntryField(entry, "subsample_count", "uint", 16);
                this._procSubEntries(entry, "subsamples", entry.subsample_count, function(subsample) {
                    this._procEntryField(subsample, "subsample_size", "uint", this.version === 1 ? 32 : 16);
                    this._procEntryField(subsample, "subsample_priority", "uint", 8);
                    this._procEntryField(subsample, "discardable", "uint", 8);
                    this._procEntryField(subsample, "codec_specific_parameters", "uint", 32);
                });
            });
        };
        ISOBox.prototype._boxProcessors["tenc"] = function() {
            this._procFullBox();
            this._procField("default_IsEncrypted", "uint", 24);
            this._procField("default_IV_size", "uint", 8);
            this._procFieldArray("default_KID", 16, "uint", 8);
        };
        ISOBox.prototype._boxProcessors["tfdt"] = function() {
            this._procFullBox();
            this._procField("baseMediaDecodeTime", "uint", this.version == 1 ? 64 : 32);
        };
        ISOBox.prototype._boxProcessors["tfhd"] = function() {
            this._procFullBox();
            this._procField("track_ID", "uint", 32);
            if (this.flags & 1) this._procField("base_data_offset", "uint", 64);
            if (this.flags & 2) this._procField("sample_description_offset", "uint", 32);
            if (this.flags & 8) this._procField("default_sample_duration", "uint", 32);
            if (this.flags & 16) this._procField("default_sample_size", "uint", 32);
            if (this.flags & 32) this._procField("default_sample_flags", "uint", 32);
        };
        ISOBox.prototype._boxProcessors["tfra"] = function() {
            this._procFullBox();
            this._procField("track_ID", "uint", 32);
            if (!this._parsing) {
                this.reserved = 0;
                this.reserved |= (this.length_size_of_traf_num & 48) << 4;
                this.reserved |= (this.length_size_of_trun_num & 12) << 2;
                this.reserved |= this.length_size_of_sample_num & 3;
            }
            this._procField("reserved", "uint", 32);
            if (this._parsing) {
                this.length_size_of_traf_num = (this.reserved & 48) >> 4;
                this.length_size_of_trun_num = (this.reserved & 12) >> 2;
                this.length_size_of_sample_num = this.reserved & 3;
            }
            this._procField("number_of_entry", "uint", 32);
            this._procEntries("entries", this.number_of_entry, function(entry) {
                this._procEntryField(entry, "time", "uint", this.version === 1 ? 64 : 32);
                this._procEntryField(entry, "moof_offset", "uint", this.version === 1 ? 64 : 32);
                this._procEntryField(entry, "traf_number", "uint", (this.length_size_of_traf_num + 1) * 8);
                this._procEntryField(entry, "trun_number", "uint", (this.length_size_of_trun_num + 1) * 8);
                this._procEntryField(entry, "sample_number", "uint", (this.length_size_of_sample_num + 1) * 8);
            });
        };
        ISOBox.prototype._boxProcessors["tkhd"] = function() {
            this._procFullBox();
            this._procField("creation_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("modification_time", "uint", this.version == 1 ? 64 : 32);
            this._procField("track_ID", "uint", 32);
            this._procField("reserved1", "uint", 32);
            this._procField("duration", "uint", this.version == 1 ? 64 : 32);
            this._procFieldArray("reserved2", 2, "uint", 32);
            this._procField("layer", "uint", 16);
            this._procField("alternate_group", "uint", 16);
            this._procField("volume", "template", 16);
            this._procField("reserved3", "uint", 16);
            this._procFieldArray("matrix", 9, "template", 32);
            this._procField("width", "template", 32);
            this._procField("height", "template", 32);
        };
        ISOBox.prototype._boxProcessors["trex"] = function() {
            this._procFullBox();
            this._procField("track_ID", "uint", 32);
            this._procField("default_sample_description_index", "uint", 32);
            this._procField("default_sample_duration", "uint", 32);
            this._procField("default_sample_size", "uint", 32);
            this._procField("default_sample_flags", "uint", 32);
        };
        ISOBox.prototype._boxProcessors["trun"] = function() {
            this._procFullBox();
            this._procField("sample_count", "uint", 32);
            if (this.flags & 1) this._procField("data_offset", "int", 32);
            if (this.flags & 4) this._procField("first_sample_flags", "uint", 32);
            this._procEntries("samples", this.sample_count, function(sample) {
                if (this.flags & 256) this._procEntryField(sample, "sample_duration", "uint", 32);
                if (this.flags & 512) this._procEntryField(sample, "sample_size", "uint", 32);
                if (this.flags & 1024) this._procEntryField(sample, "sample_flags", "uint", 32);
                if (this.flags & 2048) this._procEntryField(sample, "sample_composition_time_offset", this.version === 1 ? "int" : "uint", 32);
            });
        };
        ISOBox.prototype._boxProcessors["url "] = ISOBox.prototype._boxProcessors["urn "] = function() {
            this._procFullBox();
            if (this.type === "urn ") {
                this._procField("name", "string", -1);
            }
            this._procField("location", "string", -1);
        };
        ISOBox.prototype._boxProcessors["vlab"] = function() {
            this._procField("source_label", "utf8");
        };
        ISOBox.prototype._boxProcessors["vmhd"] = function() {
            this._procFullBox();
            this._procField("graphicsmode", "uint", 16);
            this._procFieldArray("opcolor", 3, "uint", 16);
        };
        ISOBox.prototype._boxProcessors["vttC"] = function() {
            this._procField("config", "utf8");
        };
        ISOBox.prototype._boxProcessors["vtte"] = function() {};
    }, {} ],
    14: [ function(_dereq_, module, exports) {
        (function(Buffer) {
            function isArray(arg) {
                if (Array.isArray) {
                    return Array.isArray(arg);
                }
                return objectToString(arg) === "[object Array]";
            }
            exports.isArray = isArray;
            function isBoolean(arg) {
                return typeof arg === "boolean";
            }
            exports.isBoolean = isBoolean;
            function isNull(arg) {
                return arg === null;
            }
            exports.isNull = isNull;
            function isNullOrUndefined(arg) {
                return arg == null;
            }
            exports.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
                return typeof arg === "number";
            }
            exports.isNumber = isNumber;
            function isString(arg) {
                return typeof arg === "string";
            }
            exports.isString = isString;
            function isSymbol(arg) {
                return typeof arg === "symbol";
            }
            exports.isSymbol = isSymbol;
            function isUndefined(arg) {
                return arg === void 0;
            }
            exports.isUndefined = isUndefined;
            function isRegExp(re) {
                return objectToString(re) === "[object RegExp]";
            }
            exports.isRegExp = isRegExp;
            function isObject(arg) {
                return typeof arg === "object" && arg !== null;
            }
            exports.isObject = isObject;
            function isDate(d) {
                return objectToString(d) === "[object Date]";
            }
            exports.isDate = isDate;
            function isError(e) {
                return objectToString(e) === "[object Error]" || e instanceof Error;
            }
            exports.isError = isError;
            function isFunction(arg) {
                return typeof arg === "function";
            }
            exports.isFunction = isFunction;
            function isPrimitive(arg) {
                return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
            }
            exports.isPrimitive = isPrimitive;
            exports.isBuffer = Buffer.isBuffer;
            function objectToString(o) {
                return Object.prototype.toString.call(o);
            }
        }).call(this, {
            isBuffer: _dereq_(25)
        });
    }, {
        25: 25
    } ],
    15: [ function(_dereq_, module, exports) {
        "use strict";
        var isArray = Array.isArray;
        var keyList = Object.keys;
        var hasProp = Object.prototype.hasOwnProperty;
        module.exports = function equal(a, b) {
            if (a === b) return true;
            if (a && b && typeof a == "object" && typeof b == "object") {
                var arrA = isArray(a), arrB = isArray(b), i, length, key;
                if (arrA && arrB) {
                    length = a.length;
                    if (length != b.length) return false;
                    for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false;
                    return true;
                }
                if (arrA != arrB) return false;
                var dateA = a instanceof Date, dateB = b instanceof Date;
                if (dateA != dateB) return false;
                if (dateA && dateB) return a.getTime() == b.getTime();
                var regexpA = a instanceof RegExp, regexpB = b instanceof RegExp;
                if (regexpA != regexpB) return false;
                if (regexpA && regexpB) return a.toString() == b.toString();
                var keys = keyList(a);
                length = keys.length;
                if (length !== keyList(b).length) return false;
                for (i = length; i-- !== 0; ) if (!hasProp.call(b, keys[i])) return false;
                for (i = length; i-- !== 0; ) {
                    key = keys[i];
                    if (!equal(a[key], b[key])) return false;
                }
                return true;
            }
            return a !== a && b !== b;
        };
    }, {} ],
    16: [ function(_dereq_, module, exports) {
        exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (;nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (;nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            if (e === 0) {
                e = 1 - eBias;
            } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };
        exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
            } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                }
                if (e + eBias >= 1) {
                    value += rt / c;
                } else {
                    value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2;
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                }
            }
            for (;mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
            e = e << mLen | m;
            eLen += mLen;
            for (;eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
            buffer[offset + i - d] |= s * 128;
        };
    }, {} ],
    17: [ function(_dereq_, module, exports) {
        (function(imscDoc, sax, imscNames, imscStyles, imscUtils) {
            imscDoc.fromXML = function(xmlstring, errorHandler, metadataHandler) {
                var p = sax.parser(true, {
                    xmlns: true
                });
                var estack = [];
                var xmllangstack = [];
                var xmlspacestack = [];
                var metadata_depth = 0;
                var doc = null;
                p.onclosetag = function(node) {
                    if (estack[0] instanceof Styling) {
                        for (var sid in estack[0].styles) {
                            mergeChainedStyles(estack[0], estack[0].styles[sid], errorHandler);
                        }
                    } else if (estack[0] instanceof P || estack[0] instanceof Span) {
                        if (estack[0].contents.length > 1) {
                            var cs = [ estack[0].contents[0] ];
                            var c;
                            for (c = 1; c < estack[0].contents.length; c++) {
                                if (estack[0].contents[c] instanceof AnonymousSpan && cs[cs.length - 1] instanceof AnonymousSpan) {
                                    cs[cs.length - 1].text += estack[0].contents[c].text;
                                } else {
                                    cs.push(estack[0].contents[c]);
                                }
                            }
                            estack[0].contents = cs;
                        }
                        if (estack[0] instanceof Span && estack[0].contents.length === 1 && estack[0].contents[0] instanceof AnonymousSpan) {
                            estack[0].text = estack[0].contents[0].text;
                            delete estack[0].contents;
                        }
                    } else if (estack[0] instanceof ForeignElement) {
                        if (estack[0].node.uri === imscNames.ns_tt && estack[0].node.local === "metadata") {
                            metadata_depth--;
                        } else if (metadata_depth > 0 && metadataHandler && "onCloseTag" in metadataHandler) {
                            metadataHandler.onCloseTag();
                        }
                    }
                    xmlspacestack.shift();
                    xmllangstack.shift();
                    estack.shift();
                };
                p.ontext = function(str) {
                    if (estack[0] === undefined) {} else if (estack[0] instanceof Span || estack[0] instanceof P) {
                        var s = new AnonymousSpan();
                        s.initFromText(doc, estack[0], str, xmlspacestack[0], errorHandler);
                        estack[0].contents.push(s);
                    } else if (estack[0] instanceof ForeignElement && metadata_depth > 0 && metadataHandler && "onText" in metadataHandler) {
                        metadataHandler.onText(str);
                    }
                };
                p.onopentag = function(node) {
                    var xmlspace = node.attributes["xml:space"];
                    if (xmlspace) {
                        xmlspacestack.unshift(xmlspace.value);
                    } else {
                        if (xmlspacestack.length === 0) {
                            xmlspacestack.unshift("default");
                        } else {
                            xmlspacestack.unshift(xmlspacestack[0]);
                        }
                    }
                    var xmllang = node.attributes["xml:lang"];
                    if (xmllang) {
                        xmllangstack.unshift(xmllang.value);
                    } else {
                        if (xmllangstack.length === 0) {
                            xmllangstack.unshift("");
                        } else {
                            xmllangstack.unshift(xmllangstack[0]);
                        }
                    }
                    if (node.uri === imscNames.ns_tt) {
                        if (node.local === "tt") {
                            if (doc !== null) {
                                reportFatal(errorHandler, "Two <tt> elements at (" + this.line + "," + this.column + ")");
                            }
                            doc = new TT();
                            doc.initFromNode(node, errorHandler);
                            estack.unshift(doc);
                        } else if (node.local === "head") {
                            if (!(estack[0] instanceof TT)) {
                                reportFatal(errorHandler, "Parent of <head> element is not <tt> at (" + this.line + "," + this.column + ")");
                            }
                            if (doc.head !== null) {
                                reportFatal("Second <head> element at (" + this.line + "," + this.column + ")");
                            }
                            doc.head = new Head();
                            estack.unshift(doc.head);
                        } else if (node.local === "styling") {
                            if (!(estack[0] instanceof Head)) {
                                reportFatal(errorHandler, "Parent of <styling> element is not <head> at (" + this.line + "," + this.column + ")");
                            }
                            if (doc.head.styling !== null) {
                                reportFatal("Second <styling> element at (" + this.line + "," + this.column + ")");
                            }
                            doc.head.styling = new Styling();
                            estack.unshift(doc.head.styling);
                        } else if (node.local === "style") {
                            var s;
                            if (estack[0] instanceof Styling) {
                                s = new Style();
                                s.initFromNode(node, errorHandler);
                                if (!s.id) {
                                    reportError(errorHandler, "<style> element missing @id attribute");
                                } else {
                                    doc.head.styling.styles[s.id] = s;
                                }
                                estack.unshift(s);
                            } else if (estack[0] instanceof Region) {
                                s = new Style();
                                s.initFromNode(node, errorHandler);
                                mergeStylesIfNotPresent(s.styleAttrs, estack[0].styleAttrs);
                                estack.unshift(s);
                            } else {
                                reportFatal(errorHandler, "Parent of <style> element is not <styling> or <region> at (" + this.line + "," + this.column + ")");
                            }
                        } else if (node.local === "layout") {
                            if (!(estack[0] instanceof Head)) {
                                reportFatal(errorHandler, "Parent of <layout> element is not <head> at " + this.line + "," + this.column + ")");
                            }
                            if (doc.head.layout !== null) {
                                reportFatal(errorHandler, "Second <layout> element at " + this.line + "," + this.column + ")");
                            }
                            doc.head.layout = new Layout();
                            estack.unshift(doc.head.layout);
                        } else if (node.local === "region") {
                            if (!(estack[0] instanceof Layout)) {
                                reportFatal(errorHandler, "Parent of <region> element is not <layout> at " + this.line + "," + this.column + ")");
                            }
                            var r = new Region();
                            r.initFromNode(doc, node, errorHandler);
                            if (!r.id || r.id in doc.head.layout.regions) {
                                reportError(errorHandler, "Ignoring <region> with duplicate or missing @id at " + this.line + "," + this.column + ")");
                            } else {
                                doc.head.layout.regions[r.id] = r;
                            }
                            estack.unshift(r);
                        } else if (node.local === "body") {
                            if (!(estack[0] instanceof TT)) {
                                reportFatal(errorHandler, "Parent of <body> element is not <tt> at " + this.line + "," + this.column + ")");
                            }
                            if (doc.body !== null) {
                                reportFatal(errorHandler, "Second <body> element at " + this.line + "," + this.column + ")");
                            }
                            var b = new Body();
                            b.initFromNode(doc, node, errorHandler);
                            doc.body = b;
                            estack.unshift(b);
                        } else if (node.local === "div") {
                            if (!(estack[0] instanceof Div || estack[0] instanceof Body)) {
                                reportFatal(errorHandler, "Parent of <div> element is not <body> or <div> at " + this.line + "," + this.column + ")");
                            }
                            var d = new Div();
                            d.initFromNode(doc, estack[0], node, errorHandler);
                            estack[0].contents.push(d);
                            estack.unshift(d);
                        } else if (node.local === "p") {
                            if (!(estack[0] instanceof Div)) {
                                reportFatal(errorHandler, "Parent of <p> element is not <div> at " + this.line + "," + this.column + ")");
                            }
                            var p = new P();
                            p.initFromNode(doc, estack[0], node, errorHandler);
                            estack[0].contents.push(p);
                            estack.unshift(p);
                        } else if (node.local === "span") {
                            if (!(estack[0] instanceof Span || estack[0] instanceof P)) {
                                reportFatal(errorHandler, "Parent of <span> element is not <span> or <p> at " + this.line + "," + this.column + ")");
                            }
                            var ns = new Span();
                            ns.initFromNode(doc, estack[0], node, xmlspacestack[0], errorHandler);
                            estack[0].contents.push(ns);
                            estack.unshift(ns);
                        } else if (node.local === "br") {
                            if (!(estack[0] instanceof Span || estack[0] instanceof P)) {
                                reportFatal(errorHandler, "Parent of <br> element is not <span> or <p> at " + this.line + "," + this.column + ")");
                            }
                            var nb = new Br();
                            nb.initFromNode(doc, estack[0], node, errorHandler);
                            estack[0].contents.push(nb);
                            estack.unshift(nb);
                        } else if (node.local === "set") {
                            if (!(estack[0] instanceof Span || estack[0] instanceof P || estack[0] instanceof Div || estack[0] instanceof Body || estack[0] instanceof Region || estack[0] instanceof Br)) {
                                reportFatal(errorHandler, "Parent of <set> element is not a content element or a region at " + this.line + "," + this.column + ")");
                            }
                            var st = new Set();
                            st.initFromNode(doc, estack[0], node, errorHandler);
                            estack[0].sets.push(st);
                            estack.unshift(st);
                        } else {
                            estack.unshift(new ForeignElement(node));
                        }
                    } else {
                        estack.unshift(new ForeignElement(node));
                    }
                    if (estack[0] instanceof ForeignElement) {
                        if (node.uri === imscNames.ns_tt && node.local === "metadata") {
                            metadata_depth++;
                        } else if (metadata_depth > 0 && metadataHandler && "onOpenTag" in metadataHandler) {
                            var attrs = [];
                            for (var a in node.attributes) {
                                attrs[node.attributes[a].uri + " " + node.attributes[a].local] = {
                                    uri: node.attributes[a].uri,
                                    local: node.attributes[a].local,
                                    value: node.attributes[a].value
                                };
                            }
                            metadataHandler.onOpenTag(node.uri, node.local, attrs);
                        }
                    }
                };
                p.write(xmlstring).close();
                if (doc.head !== null) {
                    delete doc.head.styling;
                } else {
                    doc.head = new Head();
                }
                if (doc.head.layout === null) {
                    doc.head.layout = new Layout();
                }
                var hasRegions = false;
                for (var i in doc.head.layout.regions) {
                    hasRegions = true;
                    break;
                }
                if (!hasRegions) {
                    var dr = Region.prototype.createDefaultRegion();
                    doc.head.layout.regions[dr.id] = dr;
                }
                for (var region_i in doc.head.layout.regions) {
                    resolveTiming(doc, doc.head.layout.regions[region_i], null, null);
                }
                if (doc.body) {
                    resolveTiming(doc, doc.body, null, null);
                }
                return doc;
            };
            function resolveTiming(doc, element, prev_sibling, parent) {
                var isinseq = parent && parent.timeContainer === "seq";
                var implicit_begin = 0;
                if (parent) {
                    if (isinseq && prev_sibling) {
                        implicit_begin = prev_sibling.end;
                    } else {
                        implicit_begin = parent.begin;
                    }
                }
                element.begin = element.explicit_begin ? element.explicit_begin + implicit_begin : implicit_begin;
                var implicit_end = element.begin;
                var s = null;
                for (var set_i in element.sets) {
                    resolveTiming(doc, element.sets[set_i], s, element);
                    if (element.timeContainer === "seq") {
                        implicit_end = element.sets[set_i].end;
                    } else {
                        implicit_end = Math.max(implicit_end, element.sets[set_i].end);
                    }
                    s = element.sets[set_i];
                }
                if (!("contents" in element)) {
                    if (isinseq) {
                        implicit_end = element.begin;
                    } else {
                        implicit_end = Number.POSITIVE_INFINITY;
                    }
                } else {
                    for (var content_i in element.contents) {
                        resolveTiming(doc, element.contents[content_i], s, element);
                        if (element.timeContainer === "seq") {
                            implicit_end = element.contents[content_i].end;
                        } else {
                            implicit_end = Math.max(implicit_end, element.contents[content_i].end);
                        }
                        s = element.contents[content_i];
                    }
                }
                if (element.explicit_end !== null && element.explicit_dur !== null) {
                    element.end = Math.min(element.begin + element.explicit_dur, implicit_begin + element.explicit_end);
                } else if (element.explicit_end === null && element.explicit_dur !== null) {
                    element.end = element.begin + element.explicit_dur;
                } else if (element.explicit_end !== null && element.explicit_dur === null) {
                    element.end = implicit_begin + element.explicit_end;
                } else {
                    element.end = implicit_end;
                }
                delete element.explicit_begin;
                delete element.explicit_dur;
                delete element.explicit_end;
                doc._registerEvent(element);
            }
            function ForeignElement(node) {
                this.node = node;
            }
            function TT() {
                this.events = [];
                this.head = null;
                this.body = null;
            }
            TT.prototype.initFromNode = function(node, errorHandler) {
                this.cellResolution = extractCellResolution(node, errorHandler);
                var frtr = extractFrameAndTickRate(node, errorHandler);
                this.effectiveFrameRate = frtr.effectiveFrameRate;
                this.tickRate = frtr.tickRate;
                this.aspectRatio = extractAspectRatio(node, errorHandler);
                var attr = findAttribute(node, imscNames.ns_ttp, "timeBase");
                if (attr !== null && attr !== "media") {
                    reportFatal(errorHandler, "Unsupported time base");
                }
                var e = extractExtent(node, errorHandler);
                if (e === null) {
                    this.pxDimensions = {
                        h: 480,
                        w: 640
                    };
                } else {
                    if (e.h.unit !== "px" || e.w.unit !== "px") {
                        reportFatal(errorHandler, "Extent on TT must be in px or absent");
                    }
                    this.pxDimensions = {
                        h: e.h.value,
                        w: e.w.value
                    };
                }
            };
            TT.prototype._registerEvent = function(elem) {
                if (elem.end <= elem.begin) return;
                var b_i = indexOf(this.events, elem.begin);
                if (!b_i.found) {
                    this.events.splice(b_i.index, 0, elem.begin);
                }
                if (elem.end !== Number.POSITIVE_INFINITY) {
                    var e_i = indexOf(this.events, elem.end);
                    if (!e_i.found) {
                        this.events.splice(e_i.index, 0, elem.end);
                    }
                }
            };
            TT.prototype.getMediaTimeRange = function() {
                return [ this.events[0], this.events[this.events.length - 1] ];
            };
            TT.prototype.getMediaTimeEvents = function() {
                return this.events;
            };
            function Head() {
                this.styling = null;
                this.layout = null;
            }
            function Styling() {
                this.styles = {};
            }
            function Style() {
                this.id = null;
                this.styleAttrs = null;
                this.styleRefs = null;
            }
            Style.prototype.initFromNode = function(node, errorHandler) {
                this.id = elementGetXMLID(node);
                this.styleAttrs = elementGetStyles(node, errorHandler);
                this.styleRefs = elementGetStyleRefs(node);
            };
            function Layout() {
                this.regions = {};
            }
            function ContentElement(kind) {
                this.kind = kind;
            }
            function IdentifiedElement(id) {
                this.id = id;
            }
            IdentifiedElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                this.id = elementGetXMLID(node);
            };
            function LayoutElement(id) {
                this.regionID = id;
            }
            LayoutElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                this.regionID = elementGetRegionID(node);
            };
            function StyledElement(styleAttrs) {
                this.styleAttrs = styleAttrs;
            }
            StyledElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                this.styleAttrs = elementGetStyles(node, errorHandler);
                if (doc.head !== null && doc.head.styling !== null) {
                    mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
                }
            };
            function AnimatedElement(sets) {
                this.sets = sets;
            }
            AnimatedElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                this.sets = [];
            };
            function ContainerElement(contents) {
                this.contents = contents;
            }
            ContainerElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                this.contents = [];
            };
            function TimedElement(explicit_begin, explicit_end, explicit_dur) {
                this.explicit_begin = explicit_begin;
                this.explicit_end = explicit_end;
                this.explicit_dur = explicit_dur;
            }
            TimedElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                var t = processTiming(doc, parent, node, errorHandler);
                this.explicit_begin = t.explicit_begin;
                this.explicit_end = t.explicit_end;
                this.explicit_dur = t.explicit_dur;
                this.timeContainer = elementGetTimeContainer(node, errorHandler);
            };
            function Body() {
                ContentElement.call(this, "body");
            }
            Body.prototype.initFromNode = function(doc, node, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
            };
            function Div() {
                ContentElement.call(this, "div");
            }
            Div.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
            };
            function P() {
                ContentElement.call(this, "p");
            }
            P.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
            };
            function Span() {
                ContentElement.call(this, "span");
            }
            Span.prototype.initFromNode = function(doc, parent, node, xmlspace, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                this.space = xmlspace;
            };
            function AnonymousSpan() {
                ContentElement.call(this, "span");
            }
            AnonymousSpan.prototype.initFromText = function(doc, parent, text, xmlspace, errorHandler) {
                TimedElement.prototype.initFromNode.call(this, doc, parent, null, errorHandler);
                this.text = text;
                this.space = xmlspace;
            };
            function Br() {
                ContentElement.call(this, "br");
            }
            Br.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
            };
            function Region() {}
            Region.prototype.createDefaultRegion = function() {
                var r = new Region();
                IdentifiedElement.call(r, "");
                StyledElement.call(r, {});
                AnimatedElement.call(r, []);
                TimedElement.call(r, 0, Number.POSITIVE_INFINITY, null);
                return r;
            };
            Region.prototype.initFromNode = function(doc, node, errorHandler) {
                IdentifiedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                if (doc.head !== null && doc.head.styling !== null) {
                    mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
                }
            };
            function Set() {}
            Set.prototype.initFromNode = function(doc, parent, node, errorHandler) {
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                var styles = elementGetStyles(node, errorHandler);
                this.qname = null;
                this.value = null;
                for (var qname in styles) {
                    if (this.qname) {
                        reportError(errorHandler, "More than one style specified on set");
                        break;
                    }
                    this.qname = qname;
                    this.value = styles[qname];
                }
            };
            function elementGetXMLID(node) {
                return node && "xml:id" in node.attributes ? node.attributes["xml:id"].value || null : null;
            }
            function elementGetRegionID(node) {
                return node && "region" in node.attributes ? node.attributes.region.value : "";
            }
            function elementGetTimeContainer(node, errorHandler) {
                var tc = node && "timeContainer" in node.attributes ? node.attributes.timeContainer.value : null;
                if (!tc || tc === "par") {
                    return "par";
                } else if (tc === "seq") {
                    return "seq";
                } else {
                    reportError(errorHandler, "Illegal value of timeContainer (assuming 'par')");
                    return "par";
                }
            }
            function elementGetStyleRefs(node) {
                return node && "style" in node.attributes ? node.attributes.style.value.split(" ") : [];
            }
            function elementGetStyles(node, errorHandler) {
                var s = {};
                if (node !== null) {
                    for (var i in node.attributes) {
                        var qname = node.attributes[i].uri + " " + node.attributes[i].local;
                        var sa = imscStyles.byQName[qname];
                        if (sa !== undefined) {
                            var val = sa.parse(node.attributes[i].value);
                            if (val !== null) {
                                s[qname] = val;
                                if (sa === imscStyles.byName.zIndex) {
                                    reportWarning(errorHandler, "zIndex attribute present but not used by IMSC1 since regions do not overlap");
                                }
                            } else {
                                reportError(errorHandler, "Cannot parse styling attribute " + qname + " --\x3e " + node.attributes[i].value);
                            }
                        }
                    }
                }
                return s;
            }
            function findAttribute(node, ns, name) {
                for (var i in node.attributes) {
                    if (node.attributes[i].uri === ns && node.attributes[i].local === name) {
                        return node.attributes[i].value;
                    }
                }
                return null;
            }
            function extractAspectRatio(node, errorHandler) {
                var ar = findAttribute(node, imscNames.ns_ittp, "aspectRatio");
                var rslt = null;
                if (ar !== null) {
                    var ASPECT_RATIO_RE = /(\d+) (\d+)/;
                    var m = ASPECT_RATIO_RE.exec(ar);
                    if (m !== null) {
                        var w = parseInt(m[1]);
                        var h = parseInt(m[2]);
                        if (w !== 0 && h !== 0) {
                            rslt = w / h;
                        } else {
                            reportError(errorHandler, "Illegal aspectRatio values (ignoring)");
                        }
                    } else {
                        reportError(errorHandler, "Malformed aspectRatio attribute (ignoring)");
                    }
                }
                return rslt;
            }
            function extractCellResolution(node, errorHandler) {
                var cr = findAttribute(node, imscNames.ns_ttp, "cellResolution");
                var h = 15;
                var w = 32;
                if (cr !== null) {
                    var CELL_RESOLUTION_RE = /(\d+) (\d+)/;
                    var m = CELL_RESOLUTION_RE.exec(cr);
                    if (m !== null) {
                        w = parseInt(m[1]);
                        h = parseInt(m[2]);
                    } else {
                        reportWarning(errorHandler, "Malformed cellResolution value (using initial value instead)");
                    }
                }
                return {
                    w: w,
                    h: h
                };
            }
            function extractFrameAndTickRate(node, errorHandler) {
                var fps_attr = findAttribute(node, imscNames.ns_ttp, "frameRate");
                var fps = 30;
                var m;
                if (fps_attr !== null) {
                    var FRAME_RATE_RE = /(\d+)/;
                    m = FRAME_RATE_RE.exec(fps_attr);
                    if (m !== null) {
                        fps = parseInt(m[1]);
                    } else {
                        reportWarning(errorHandler, "Malformed frame rate attribute (using initial value instead)");
                    }
                }
                var frm_attr = findAttribute(node, imscNames.ns_ttp, "frameRateMultiplier");
                var frm = 1;
                if (frm_attr !== null) {
                    var FRAME_RATE_MULT_RE = /(\d+) (\d+)/;
                    m = FRAME_RATE_MULT_RE.exec(frm_attr);
                    if (m !== null) {
                        frm = parseInt(m[1]) / parseInt(m[2]);
                    } else {
                        reportWarning(errorHandler, "Malformed frame rate multiplier attribute (using initial value instead)");
                    }
                }
                var efps = frm * fps;
                var tr = 1;
                var trattr = findAttribute(node, imscNames.ns_ttp, "tickRate");
                if (trattr === null) {
                    if (fps_attr !== null) tr = efps;
                } else {
                    var TICK_RATE_RE = /(\d+)/;
                    m = TICK_RATE_RE.exec(trattr);
                    if (m !== null) {
                        tr = parseInt(m[1]);
                    } else {
                        reportWarning(errorHandler, "Malformed tick rate attribute (using initial value instead)");
                    }
                }
                return {
                    effectiveFrameRate: efps,
                    tickRate: tr
                };
            }
            function extractExtent(node, errorHandler) {
                var attr = findAttribute(node, imscNames.ns_tts, "extent");
                if (attr === null) return null;
                var s = attr.split(" ");
                if (s.length !== 2) {
                    reportWarning(errorHandler, "Malformed extent (ignoring)");
                    return null;
                }
                var w = imscUtils.parseLength(s[0]);
                var h = imscUtils.parseLength(s[1]);
                if (!h || !w) {
                    reportWarning(errorHandler, "Malformed extent values (ignoring)");
                    return null;
                }
                return {
                    h: h,
                    w: w
                };
            }
            function parseTimeExpression(tickRate, effectiveFrameRate, str) {
                var CLOCK_TIME_FRACTION_RE = /^(\d{2,}):(\d\d):(\d\d(?:\.\d+)?)$/;
                var CLOCK_TIME_FRAMES_RE = /^(\d{2,}):(\d\d):(\d\d)\:(\d{2,})$/;
                var OFFSET_FRAME_RE = /^(\d+(?:\.\d+)?)f$/;
                var OFFSET_TICK_RE = /^(\d+(?:\.\d+)?)t$/;
                var OFFSET_MS_RE = /^(\d+(?:\.\d+)?)ms$/;
                var OFFSET_S_RE = /^(\d+(?:\.\d+)?)s$/;
                var OFFSET_H_RE = /^(\d+(?:\.\d+)?)h$/;
                var OFFSET_M_RE = /^(\d+(?:\.\d+)?)m$/;
                var m;
                var r = null;
                if ((m = OFFSET_FRAME_RE.exec(str)) !== null) {
                    if (effectiveFrameRate !== null) {
                        r = parseFloat(m[1]) / effectiveFrameRate;
                    }
                } else if ((m = OFFSET_TICK_RE.exec(str)) !== null) {
                    if (tickRate !== null) {
                        r = parseFloat(m[1]) / tickRate;
                    }
                } else if ((m = OFFSET_MS_RE.exec(str)) !== null) {
                    r = parseFloat(m[1]) / 1e3;
                } else if ((m = OFFSET_S_RE.exec(str)) !== null) {
                    r = parseFloat(m[1]);
                } else if ((m = OFFSET_H_RE.exec(str)) !== null) {
                    r = parseFloat(m[1]) * 3600;
                } else if ((m = OFFSET_M_RE.exec(str)) !== null) {
                    r = parseFloat(m[1]) * 60;
                } else if ((m = CLOCK_TIME_FRACTION_RE.exec(str)) !== null) {
                    r = parseInt(m[1]) * 3600 + parseInt(m[2]) * 60 + parseFloat(m[3]);
                } else if ((m = CLOCK_TIME_FRAMES_RE.exec(str)) !== null) {
                    if (effectiveFrameRate !== null) {
                        r = parseInt(m[1]) * 3600 + parseInt(m[2]) * 60 + parseInt(m[3]) + (m[4] === null ? 0 : parseInt(m[4]) / effectiveFrameRate);
                    }
                }
                return r;
            }
            function processTiming(doc, parent, node, errorHandler) {
                var explicit_begin = null;
                if (node && "begin" in node.attributes) {
                    explicit_begin = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.begin.value);
                    if (explicit_begin === null) {
                        reportWarning(errorHandler, "Malformed begin value " + node.attributes.begin.value + " (using 0)");
                    }
                }
                var explicit_dur = null;
                if (node && "dur" in node.attributes) {
                    explicit_dur = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.dur.value);
                    if (explicit_dur === null) {
                        reportWarning(errorHandler, "Malformed dur value " + node.attributes.dur.value + " (ignoring)");
                    }
                }
                var explicit_end = null;
                if (node && "end" in node.attributes) {
                    explicit_end = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.end.value);
                    if (explicit_end === null) {
                        reportWarning(errorHandler, "Malformed end value (ignoring)");
                    }
                }
                return {
                    explicit_begin: explicit_begin,
                    explicit_end: explicit_end,
                    explicit_dur: explicit_dur
                };
            }
            function mergeChainedStyles(styling, style, errorHandler) {
                while (style.styleRefs.length > 0) {
                    var sref = style.styleRefs.pop();
                    if (!(sref in styling.styles)) {
                        reportError(errorHandler, "Non-existant style id referenced");
                        continue;
                    }
                    mergeChainedStyles(styling, styling.styles[sref], errorHandler);
                    mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, style.styleAttrs);
                }
            }
            function mergeReferencedStyles(styling, stylerefs, styleattrs, errorHandler) {
                for (var i = stylerefs.length - 1; i >= 0; i--) {
                    var sref = stylerefs[i];
                    if (!(sref in styling.styles)) {
                        reportError(errorHandler, "Non-existant style id referenced");
                        continue;
                    }
                    mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, styleattrs);
                }
            }
            function mergeStylesIfNotPresent(from_styles, into_styles) {
                for (var sname in from_styles) {
                    if (sname in into_styles) continue;
                    into_styles[sname] = from_styles[sname];
                }
            }
            function reportInfo(errorHandler, msg) {
                if (errorHandler && errorHandler.info && errorHandler.info(msg)) throw msg;
            }
            function reportWarning(errorHandler, msg) {
                if (errorHandler && errorHandler.warn && errorHandler.warn(msg)) throw msg;
            }
            function reportError(errorHandler, msg) {
                if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
            }
            function reportFatal(errorHandler, msg) {
                if (errorHandler && errorHandler.fatal) errorHandler.fatal(msg);
                throw msg;
            }
            function indexOf(arr, searchval) {
                var min = 0;
                var max = arr.length - 1;
                var cur;
                while (min <= max) {
                    cur = Math.floor((min + max) / 2);
                    var curval = arr[cur];
                    if (curval < searchval) {
                        min = cur + 1;
                    } else if (curval > searchval) {
                        max = cur - 1;
                    } else {
                        return {
                            found: true,
                            index: cur
                        };
                    }
                }
                return {
                    found: false,
                    index: min
                };
            }
        })(typeof exports === "undefined" ? this.imscDoc = {} : exports, typeof sax === "undefined" ? _dereq_(44) : sax, typeof imscNames === "undefined" ? _dereq_(21) : imscNames, typeof imscStyles === "undefined" ? _dereq_(22) : imscStyles, typeof imscUtils === "undefined" ? _dereq_(23) : imscUtils);
    }, {
        21: 21,
        22: 22,
        23: 23,
        44: 44
    } ],
    18: [ function(_dereq_, module, exports) {
        (function(imscHTML, imscNames, imscStyles) {
            imscHTML.render = function(isd, element, imgResolver, eheight, ewidth, displayForcedOnlyMode, errorHandler, previousISDState, enableRollUp) {
                var height = eheight || element.clientHeight;
                var width = ewidth || element.clientWidth;
                if (isd.aspectRatio !== null) {
                    var twidth = height * isd.aspectRatio;
                    if (twidth > width) {
                        height = Math.round(width / isd.aspectRatio);
                    } else {
                        width = twidth;
                    }
                }
                var rootcontainer = document.createElement("div");
                rootcontainer.style.position = "relative";
                rootcontainer.style.width = width + "px";
                rootcontainer.style.height = height + "px";
                rootcontainer.style.margin = "auto";
                rootcontainer.style.top = 0;
                rootcontainer.style.bottom = 0;
                rootcontainer.style.left = 0;
                rootcontainer.style.right = 0;
                rootcontainer.style.zIndex = 0;
                var context = {
                    h: height,
                    w: width,
                    regionH: null,
                    regionW: null,
                    imgResolver: imgResolver,
                    displayForcedOnlyMode: displayForcedOnlyMode || false,
                    isd: isd,
                    errorHandler: errorHandler,
                    previousISDState: previousISDState,
                    enableRollUp: enableRollUp || false,
                    currentISDState: {},
                    flg: null,
                    lp: null,
                    mra: null,
                    ipd: null,
                    bpd: null
                };
                element.appendChild(rootcontainer);
                for (var i in isd.contents) {
                    processElement(context, rootcontainer, isd.contents[i]);
                }
                return context.currentISDState;
            };
            function processElement(context, dom_parent, isd_element) {
                var e;
                if (isd_element.kind === "region") {
                    e = document.createElement("div");
                    e.style.position = "absolute";
                } else if (isd_element.kind === "body") {
                    e = document.createElement("div");
                } else if (isd_element.kind === "div") {
                    e = document.createElement("div");
                } else if (isd_element.kind === "p") {
                    e = document.createElement("p");
                } else if (isd_element.kind === "span") {
                    e = document.createElement("span");
                } else if (isd_element.kind === "br") {
                    e = document.createElement("br");
                }
                if (!e) {
                    reportError(context.errorHandler, "Error processing ISD element kind: " + isd_element.kind);
                    return;
                }
                e.style.margin = "0";
                for (var i in STYLING_MAP_DEFS) {
                    var sm = STYLING_MAP_DEFS[i];
                    var attr = isd_element.styleAttrs[sm.qname];
                    if (attr !== undefined && sm.map !== null) {
                        sm.map(context, e, isd_element, attr);
                    }
                }
                var proc_e = e;
                if (isd_element.kind === "region") {
                    var wdir = isd_element.styleAttrs[imscStyles.byName.writingMode.qname];
                    if (wdir === "lrtb" || wdir === "lr") {
                        context.ipd = "lr";
                        context.bpd = "tb";
                    } else if (wdir === "rltb" || wdir === "rl") {
                        context.ipd = "rl";
                        context.bpd = "tb";
                    } else if (wdir === "tblr") {
                        context.ipd = "tb";
                        context.bpd = "lr";
                    } else if (wdir === "tbrl" || wdir === "tb") {
                        context.ipd = "tb";
                        context.bpd = "rl";
                    }
                }
                var lp = isd_element.styleAttrs[imscStyles.byName.linePadding.qname];
                if (lp && lp > 0) {
                    var padmeasure = Math.ceil(lp * context.h) + "px";
                    if (context.bpd === "tb") {
                        proc_e.style.paddingLeft = padmeasure;
                        proc_e.style.paddingRight = padmeasure;
                    } else {
                        proc_e.style.paddingTop = padmeasure;
                        proc_e.style.paddingBottom = padmeasure;
                    }
                    context.lp = lp;
                }
                var mra = isd_element.styleAttrs[imscStyles.byName.multiRowAlign.qname];
                if (mra && mra !== "auto") {
                    var s = document.createElement("span");
                    s.style.display = "inline-block";
                    s.style.textAlign = mra;
                    e.appendChild(s);
                    proc_e = s;
                    context.mra = mra;
                }
                if (isd_element.styleAttrs[imscStyles.byName.fillLineGap.qname]) {
                    context.flg = true;
                }
                if (isd_element.kind === "span" && isd_element.text) {
                    if (context.lp || context.mra || context.flg) {
                        var cbuf = "";
                        for (var j = 0; j < isd_element.text.length; j++) {
                            cbuf += isd_element.text.charAt(j);
                            var cc = isd_element.text.charCodeAt(j);
                            if (cc < 55296 || cc > 56319 || j === isd_element.text.length) {
                                var span = document.createElement("span");
                                span.textContent = cbuf;
                                e.appendChild(span);
                                cbuf = "";
                            }
                        }
                    } else {
                        e.textContent = isd_element.text;
                    }
                }
                dom_parent.appendChild(e);
                for (var k in isd_element.contents) {
                    processElement(context, proc_e, isd_element.contents[k]);
                }
                var linelist = [];
                if ((context.lp || context.mra || context.flg) && isd_element.kind === "p") {
                    constructLineList(context, proc_e, linelist, null);
                    if (context.mra) {
                        applyMultiRowAlign(linelist);
                        context.mra = null;
                    }
                    if (context.lp) {
                        applyLinePadding(linelist, context.lp * context.h, context);
                        context.lp = null;
                    }
                    if (context.flg) {
                        var par_edges = rect2edges(proc_e.getBoundingClientRect(), context);
                        applyFillLineGap(linelist, par_edges.before, par_edges.after, context);
                        context.flg = null;
                    }
                }
                if (isd_element.kind === "region") {
                    constructLineList(context, proc_e, linelist);
                    if (context.bpd === "tb" && context.enableRollUp && isd_element.contents.length > 0 && isd_element.styleAttrs[imscStyles.byName.displayAlign.qname] === "after") {
                        var rid = isd_element.id === "" ? "_" : isd_element.id;
                        var rb = new RegionPBuffer(rid, linelist);
                        context.currentISDState[rb.id] = rb;
                        if (context.previousISDState && rb.id in context.previousISDState && context.previousISDState[rb.id].plist.length > 0 && rb.plist.length > 1 && rb.plist[rb.plist.length - 2].text === context.previousISDState[rb.id].plist[context.previousISDState[rb.id].plist.length - 1].text) {
                            var body_elem = e.firstElementChild;
                            var h = rb.plist[rb.plist.length - 1].after - rb.plist[rb.plist.length - 1].before;
                            body_elem.style.bottom = "-" + h + "px";
                            body_elem.style.transition = "transform 0.4s";
                            body_elem.style.position = "relative";
                            body_elem.style.transform = "translateY(-" + h + "px)";
                        }
                    }
                }
            }
            function applyLinePadding(lineList, lp, context) {
                for (var i in lineList) {
                    var l = lineList[i].elements.length;
                    var se = lineList[i].elements[lineList[i].start_elem];
                    var ee = lineList[i].elements[lineList[i].end_elem];
                    var pospadpxlen = Math.ceil(lp) + "px";
                    var negpadpxlen = "-" + Math.ceil(lp) + "px";
                    if (l !== 0) {
                        if (context.ipd === "lr") {
                            se.node.style.borderLeftColor = se.bgcolor || "#00000000";
                            se.node.style.borderLeftStyle = "solid";
                            se.node.style.borderLeftWidth = pospadpxlen;
                            se.node.style.marginLeft = negpadpxlen;
                        } else if (context.ipd === "rl") {
                            se.node.style.borderRightColor = se.bgcolor || "#00000000";
                            se.node.style.borderRightStyle = "solid";
                            se.node.style.borderRightWidth = pospadpxlen;
                            se.node.style.marginRight = negpadpxlen;
                        } else if (context.ipd === "tb") {
                            se.node.style.borderTopColor = se.bgcolor || "#00000000";
                            se.node.style.borderTopStyle = "solid";
                            se.node.style.borderTopWidth = pospadpxlen;
                            se.node.style.marginTop = negpadpxlen;
                        }
                        if (context.ipd === "lr") {
                            ee.node.style.borderRightColor = ee.bgcolor || "#00000000";
                            ee.node.style.borderRightStyle = "solid";
                            ee.node.style.borderRightWidth = pospadpxlen;
                            ee.node.style.marginRight = negpadpxlen;
                        } else if (context.ipd === "rl") {
                            ee.node.style.borderLeftColor = ee.bgcolor || "#00000000";
                            ee.node.style.borderLeftStyle = "solid";
                            ee.node.style.borderLeftWidth = pospadpxlen;
                            ee.node.style.marginLeft = negpadpxlen;
                        } else if (context.ipd === "tb") {
                            ee.node.style.borderBottomColor = ee.bgcolor || "#00000000";
                            ee.node.style.borderBottomStyle = "solid";
                            ee.node.style.borderBottomWidth = pospadpxlen;
                            ee.node.style.marginBottom = negpadpxlen;
                        }
                    }
                }
            }
            function applyMultiRowAlign(lineList) {
                for (var i = 0; i < lineList.length - 1; i++) {
                    var l = lineList[i].elements.length;
                    if (l !== 0 && lineList[i].br === false) {
                        var br = document.createElement("br");
                        var lastnode = lineList[i].elements[l - 1].node;
                        lastnode.parentElement.insertBefore(br, lastnode.nextSibling);
                    }
                }
            }
            function applyFillLineGap(lineList, par_before, par_after, context) {
                var s = Math.sign(par_after - par_before);
                for (var i = 0; i <= lineList.length; i++) {
                    var frontier;
                    if (i === 0) {
                        frontier = par_before;
                    } else if (i === lineList.length) {
                        frontier = par_after;
                    } else {
                        frontier = (lineList[i].before + lineList[i - 1].after) / 2;
                    }
                    var pad;
                    var e;
                    if (i > 0) {
                        for (var j = 0; j < lineList[i - 1].elements.length; j++) {
                            if (lineList[i - 1].elements[j].bgcolor === null) continue;
                            e = lineList[i - 1].elements[j];
                            if (s * (e.after - frontier) < 0) {
                                pad = Math.ceil(Math.abs(frontier - e.after)) + "px";
                                e.node.style.backgroundColor = e.bgcolor;
                                if (context.bpd === "lr") {
                                    e.node.style.paddingRight = pad;
                                } else if (context.bpd === "rl") {
                                    e.node.style.paddingLeft = pad;
                                } else if (context.bpd === "tb") {
                                    e.node.style.paddingBottom = pad;
                                }
                            }
                        }
                    }
                    if (i < lineList.length) {
                        for (var k = 0; k < lineList[i].elements.length; k++) {
                            e = lineList[i].elements[k];
                            if (e.bgcolor === null) continue;
                            if (s * (e.before - frontier) > 0) {
                                pad = Math.ceil(Math.abs(e.before - frontier)) + "px";
                                e.node.style.backgroundColor = e.bgcolor;
                                if (context.bpd === "lr") {
                                    e.node.style.paddingLeft = pad;
                                } else if (context.bpd === "rl") {
                                    e.node.style.paddingRight = pad;
                                } else if (context.bpd === "tb") {
                                    e.node.style.paddingTop = pad;
                                }
                            }
                        }
                    }
                }
            }
            function RegionPBuffer(id, lineList) {
                this.id = id;
                this.plist = lineList;
            }
            function pruneEmptySpans(element) {
                var child = element.firstChild;
                while (child) {
                    var nchild = child.nextSibling;
                    if (child.nodeType === Node.ELEMENT_NODE && child.localName === "span") {
                        pruneEmptySpans(child);
                        if (child.childElementCount === 0 && child.textContent.length === 0) {
                            element.removeChild(child);
                        }
                    }
                    child = nchild;
                }
            }
            function rect2edges(rect, context) {
                var edges = {
                    before: null,
                    after: null,
                    start: null,
                    end: null
                };
                if (context.bpd === "tb") {
                    edges.before = rect.top;
                    edges.after = rect.bottom;
                    if (context.ipd === "lr") {
                        edges.start = rect.left;
                        edges.end = rect.right;
                    } else {
                        edges.start = rect.right;
                        edges.end = rect.left;
                    }
                } else if (context.bpd === "lr") {
                    edges.before = rect.left;
                    edges.after = rect.right;
                    edges.start = rect.top;
                    edges.end = rect.bottom;
                } else if (context.bpd === "rl") {
                    edges.before = rect.right;
                    edges.after = rect.left;
                    edges.start = rect.top;
                    edges.end = rect.bottom;
                }
                return edges;
            }
            function constructLineList(context, element, llist, bgcolor) {
                var curbgcolor = element.style.backgroundColor || bgcolor;
                if (element.childElementCount === 0) {
                    if (element.localName === "span") {
                        var r = element.getBoundingClientRect();
                        if (r.height === 0 || r.width === 0) return;
                        var edges = rect2edges(r, context);
                        if (llist.length === 0 || !isSameLine(edges.before, edges.after, llist[llist.length - 1].before, llist[llist.length - 1].after)) {
                            llist.push({
                                before: edges.before,
                                after: edges.after,
                                start: edges.start,
                                end: edges.end,
                                start_elem: 0,
                                end_elem: 0,
                                elements: [],
                                text: "",
                                br: false
                            });
                        } else {
                            var bpd_dir = Math.sign(edges.after - edges.before);
                            var ipd_dir = Math.sign(edges.end - edges.start);
                            if (bpd_dir * (edges.before - llist[llist.length - 1].before) < 0) {
                                llist[llist.length - 1].before = edges.before;
                            }
                            if (bpd_dir * (edges.after - llist[llist.length - 1].after) > 0) {
                                llist[llist.length - 1].after = edges.after;
                            }
                            if (ipd_dir * (edges.start - llist[llist.length - 1].start) < 0) {
                                llist[llist.length - 1].start = edges.start;
                                llist[llist.length - 1].start_elem = llist[llist.length - 1].elements.length;
                            }
                            if (ipd_dir * (edges.end - llist[llist.length - 1].end) > 0) {
                                llist[llist.length - 1].end = edges.end;
                                llist[llist.length - 1].end_elem = llist[llist.length - 1].elements.length;
                            }
                        }
                        llist[llist.length - 1].text += element.textContent;
                        llist[llist.length - 1].elements.push({
                            node: element,
                            bgcolor: curbgcolor,
                            before: edges.before,
                            after: edges.after
                        });
                    } else if (element.localName === "br" && llist.length !== 0) {
                        llist[llist.length - 1].br = true;
                    }
                } else {
                    var child = element.firstChild;
                    while (child) {
                        if (child.nodeType === Node.ELEMENT_NODE) {
                            constructLineList(context, child, llist, curbgcolor);
                        }
                        child = child.nextSibling;
                    }
                }
            }
            function isSameLine(before1, after1, before2, after2) {
                return after1 < after2 && before1 > before2 || after2 <= after1 && before2 >= before1;
            }
            function HTMLStylingMapDefintion(qName, mapFunc) {
                this.qname = qName;
                this.map = mapFunc;
            }
            var STYLING_MAP_DEFS = [ new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling backgroundColor", function(context, dom_element, isd_element, attr) {
                if (attr[3] === 0) return;
                dom_element.style.backgroundColor = "rgba(" + attr[0].toString() + "," + attr[1].toString() + "," + attr[2].toString() + "," + (attr[3] / 255).toString() + ")";
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling color", function(context, dom_element, isd_element, attr) {
                dom_element.style.color = "rgba(" + attr[0].toString() + "," + attr[1].toString() + "," + attr[2].toString() + "," + (attr[3] / 255).toString() + ")";
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling direction", function(context, dom_element, isd_element, attr) {
                dom_element.style.direction = attr;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling display", function(context, dom_element, isd_element, attr) {}), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling displayAlign", function(context, dom_element, isd_element, attr) {
                dom_element.style.display = "flex";
                dom_element.style.flexDirection = "column";
                if (attr === "before") {
                    dom_element.style.justifyContent = "flex-start";
                } else if (attr === "center") {
                    dom_element.style.justifyContent = "center";
                } else if (attr === "after") {
                    dom_element.style.justifyContent = "flex-end";
                }
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling extent", function(context, dom_element, isd_element, attr) {
                context.regionH = attr.h * context.h;
                context.regionW = attr.w * context.w;
                var hdelta = 0;
                var wdelta = 0;
                var p = isd_element.styleAttrs["http://www.w3.org/ns/ttml#styling padding"];
                if (!p) {} else {
                    hdelta = (p[0] + p[2]) * context.h;
                    wdelta = (p[1] + p[3]) * context.w;
                }
                dom_element.style.height = context.regionH - hdelta + "px";
                dom_element.style.width = context.regionW - wdelta + "px";
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontFamily", function(context, dom_element, isd_element, attr) {
                var rslt = [];
                for (var i in attr) {
                    if (attr[i] === "monospaceSerif") {
                        rslt.push("Courier New");
                        rslt.push('"Liberation Mono"');
                        rslt.push("Courier");
                        rslt.push("monospace");
                    } else if (attr[i] === "proportionalSansSerif") {
                        rslt.push("Arial");
                        rslt.push("Helvetica");
                        rslt.push('"Liberation Sans"');
                        rslt.push("sans-serif");
                    } else if (attr[i] === "monospace") {
                        rslt.push("monospace");
                    } else if (attr[i] === "sansSerif") {
                        rslt.push("sans-serif");
                    } else if (attr[i] === "serif") {
                        rslt.push("serif");
                    } else if (attr[i] === "monospaceSansSerif") {
                        rslt.push("Consolas");
                        rslt.push("monospace");
                    } else if (attr[i] === "proportionalSerif") {
                        rslt.push("serif");
                    } else {
                        rslt.push(attr[i]);
                    }
                }
                dom_element.style.fontFamily = rslt.join(",");
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontSize", function(context, dom_element, isd_element, attr) {
                dom_element.style.fontSize = attr * context.h + "px";
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontStyle", function(context, dom_element, isd_element, attr) {
                dom_element.style.fontStyle = attr;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontWeight", function(context, dom_element, isd_element, attr) {
                dom_element.style.fontWeight = attr;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling lineHeight", function(context, dom_element, isd_element, attr) {
                if (attr === "normal") {
                    dom_element.style.lineHeight = "normal";
                } else {
                    dom_element.style.lineHeight = attr * context.h + "px";
                }
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling opacity", function(context, dom_element, isd_element, attr) {
                dom_element.style.opacity = attr;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling origin", function(context, dom_element, isd_element, attr) {
                dom_element.style.top = attr.h * context.h + "px";
                dom_element.style.left = attr.w * context.w + "px";
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling overflow", function(context, dom_element, isd_element, attr) {
                dom_element.style.overflow = attr;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling padding", function(context, dom_element, isd_element, attr) {
                var rslt = [];
                rslt[0] = attr[0] * context.h + "px";
                rslt[1] = attr[3] * context.w + "px";
                rslt[2] = attr[2] * context.h + "px";
                rslt[3] = attr[1] * context.w + "px";
                dom_element.style.padding = rslt.join(" ");
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling showBackground", null), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textAlign", function(context, dom_element, isd_element, attr) {
                var ta;
                var dir = isd_element.styleAttrs[imscStyles.byName.direction.qname];
                if (attr === "start") {
                    ta = dir === "rtl" ? "right" : "left";
                } else if (attr === "end") {
                    ta = dir === "rtl" ? "left" : "right";
                } else {
                    ta = attr;
                }
                dom_element.style.textAlign = ta;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textDecoration", function(context, dom_element, isd_element, attr) {
                dom_element.style.textDecoration = attr.join(" ").replace("lineThrough", "line-through");
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textOutline", function(context, dom_element, isd_element, attr) {
                if (attr === "none") {
                    dom_element.style.textShadow = "";
                } else {
                    dom_element.style.textShadow = "rgba(" + attr.color[0].toString() + "," + attr.color[1].toString() + "," + attr.color[2].toString() + "," + (attr.color[3] / 255).toString() + ")" + " 0px 0px " + attr.thickness * context.h + "px";
                }
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling unicodeBidi", function(context, dom_element, isd_element, attr) {
                var ub;
                if (attr === "bidiOverride") {
                    ub = "bidi-override";
                } else {
                    ub = attr;
                }
                dom_element.style.unicodeBidi = ub;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling visibility", function(context, dom_element, isd_element, attr) {
                dom_element.style.visibility = attr;
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling wrapOption", function(context, dom_element, isd_element, attr) {
                if (attr === "wrap") {
                    if (isd_element.space === "preserve") {
                        dom_element.style.whiteSpace = "pre-wrap";
                    } else {
                        dom_element.style.whiteSpace = "normal";
                    }
                } else {
                    if (isd_element.space === "preserve") {
                        dom_element.style.whiteSpace = "pre";
                    } else {
                        dom_element.style.whiteSpace = "noWrap";
                    }
                }
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling writingMode", function(context, dom_element, isd_element, attr) {
                if (attr === "lrtb" || attr === "lr") {
                    dom_element.style.writingMode = "horizontal-tb";
                } else if (attr === "rltb" || attr === "rl") {
                    dom_element.style.writingMode = "horizontal-tb";
                } else if (attr === "tblr") {
                    dom_element.style.writingMode = "vertical-lr";
                } else if (attr === "tbrl" || attr === "tb") {
                    dom_element.style.writingMode = "vertical-rl";
                }
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling zIndex", function(context, dom_element, isd_element, attr) {
                dom_element.style.zIndex = attr;
            }), new HTMLStylingMapDefintion("http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt backgroundImage", function(context, dom_element, isd_element, attr) {
                if (context.imgResolver !== null && attr !== null) {
                    var img = document.createElement("img");
                    var uri = context.imgResolver(attr, img);
                    if (uri) img.src = uri;
                    img.height = context.regionH;
                    img.width = context.regionW;
                    dom_element.appendChild(img);
                }
            }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", function(context, dom_element, isd_element, attr) {
                if (context.displayForcedOnlyMode && attr === false) {
                    dom_element.style.visibility = "hidden";
                }
            }) ];
            var STYLMAP_BY_QNAME = {};
            for (var i in STYLING_MAP_DEFS) {
                STYLMAP_BY_QNAME[STYLING_MAP_DEFS[i].qname] = STYLING_MAP_DEFS[i];
            }
            function reportError(errorHandler, msg) {
                if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
            }
        })(typeof exports === "undefined" ? this.imscHTML = {} : exports, typeof imscNames === "undefined" ? _dereq_(21) : imscNames, typeof imscStyles === "undefined" ? _dereq_(22) : imscStyles);
    }, {
        21: 21,
        22: 22
    } ],
    19: [ function(_dereq_, module, exports) {
        (function(imscISD, imscNames, imscStyles) {
            imscISD.generateISD = function(tt, offset, errorHandler) {
                var isd = new ISD(tt);
                var context = {};
                for (var r in tt.head.layout.regions) {
                    var c = isdProcessContentElement(tt, offset, tt.head.layout.regions[r], tt.body, null, "", tt.head.layout.regions[r], errorHandler, context);
                    if (c !== null) {
                        isd.contents.push(c.element);
                    }
                }
                return isd;
            };
            function isdProcessContentElement(doc, offset, region, body, parent, inherited_region_id, elem, errorHandler, context) {
                if (offset < elem.begin || offset >= elem.end) {
                    return null;
                }
                var associated_region_id = "regionID" in elem && elem.regionID !== "" ? elem.regionID : inherited_region_id;
                if (parent !== null && associated_region_id !== region.id && (!("contents" in elem) || "contents" in elem && elem.contents.length === 0 || associated_region_id !== "")) return null;
                var isd_element = new ISDContentElement(elem);
                for (var i in elem.sets) {
                    if (offset < elem.sets[i].begin || offset >= elem.sets[i].end) continue;
                    isd_element.styleAttrs[elem.sets[i].qname] = elem.sets[i].value;
                }
                var spec_attr = {};
                for (var qname in isd_element.styleAttrs) {
                    spec_attr[qname] = true;
                    if (qname === imscStyles.byName.writingMode.qname && !(imscStyles.byName.direction.qname in isd_element.styleAttrs)) {
                        var wm = isd_element.styleAttrs[qname];
                        if (wm === "lrtb" || wm === "lr") {
                            isd_element.styleAttrs[imscStyles.byName.direction.qname] = "ltr";
                        } else if (wm === "rltb" || wm === "rl") {
                            isd_element.styleAttrs[imscStyles.byName.direction.qname] = "rtl";
                        }
                    }
                }
                if (parent !== null) {
                    for (var j in imscStyles.all) {
                        var sa = imscStyles.all[j];
                        if (sa.qname === imscStyles.byName.textDecoration.qname) {
                            var ps = parent.styleAttrs[sa.qname];
                            var es = isd_element.styleAttrs[sa.qname];
                            var outs = [];
                            if (es === undefined) {
                                outs = ps;
                            } else if (es.indexOf("none") === -1) {
                                if (es.indexOf("noUnderline") === -1 && ps.indexOf("underline") !== -1 || es.indexOf("underline") !== -1) {
                                    outs.push("underline");
                                }
                                if (es.indexOf("noLineThrough") === -1 && ps.indexOf("lineThrough") !== -1 || es.indexOf("lineThrough") !== -1) {
                                    outs.push("lineThrough");
                                }
                                if (es.indexOf("noOverline") === -1 && ps.indexOf("overline") !== -1 || es.indexOf("overline") !== -1) {
                                    outs.push("overline");
                                }
                            } else {
                                outs.push("none");
                            }
                            isd_element.styleAttrs[sa.qname] = outs;
                        } else if (sa.inherit && sa.qname in parent.styleAttrs && !(sa.qname in isd_element.styleAttrs)) {
                            isd_element.styleAttrs[sa.qname] = parent.styleAttrs[sa.qname];
                        }
                    }
                }
                for (var k in imscStyles.all) {
                    var ivs = imscStyles.all[k];
                    if (ivs.qname in isd_element.styleAttrs) continue;
                    if (isd_element.kind === "region" || ivs.inherit === false && ivs.initial !== null) {
                        isd_element.styleAttrs[ivs.qname] = ivs.parse(ivs.initial);
                        spec_attr[ivs.qname] = true;
                    }
                }
                for (var z in imscStyles.all) {
                    var cs = imscStyles.all[z];
                    if (!(cs.qname in spec_attr)) continue;
                    if (cs.compute !== null) {
                        var cstyle = cs.compute(doc, parent, isd_element, isd_element.styleAttrs[cs.qname], context);
                        if (cstyle !== null) {
                            isd_element.styleAttrs[cs.qname] = cstyle;
                        } else {
                            reportError(errorHandler, "Style '" + cs.qname + "' on element '" + isd_element.kind + "' cannot be computed");
                        }
                    }
                }
                if (isd_element.styleAttrs[imscStyles.byName.display.qname] === "none") return null;
                var contents;
                if (parent === null) {
                    if (body === null) {
                        contents = [];
                    } else {
                        contents = [ body ];
                    }
                } else if ("contents" in elem) {
                    contents = elem.contents;
                }
                for (var x in contents) {
                    var c = isdProcessContentElement(doc, offset, region, body, isd_element, associated_region_id, contents[x], errorHandler, context);
                    if (c !== null) {
                        isd_element.contents.push(c.element);
                    }
                }
                for (var qnameb in isd_element.styleAttrs) {
                    var da = imscStyles.byQName[qnameb];
                    if (da.applies.indexOf(isd_element.kind) === -1) {
                        delete isd_element.styleAttrs[qnameb];
                    }
                }
                if (isd_element.kind === "span" && isd_element.text && isd_element.space === "default") {
                    var trimmedspan = isd_element.text.replace(/\s+/g, " ");
                    isd_element.text = trimmedspan;
                }
                if (isd_element.kind === "p") {
                    var elist = [];
                    constructSpanList(isd_element, elist);
                    var l = 0;
                    var state = "after_br";
                    var br_pos = 0;
                    while (true) {
                        if (state === "after_br") {
                            if (l >= elist.length || elist[l].kind === "br") {
                                state = "before_br";
                                br_pos = l;
                                l--;
                            } else {
                                if (elist[l].space !== "preserve") {
                                    elist[l].text = elist[l].text.replace(/^\s+/g, "");
                                }
                                if (elist[l].text.length > 0) {
                                    state = "looking_br";
                                    l++;
                                } else {
                                    elist.splice(l, 1);
                                }
                            }
                        } else if (state === "before_br") {
                            if (l < 0 || elist[l].kind === "br") {
                                state = "after_br";
                                l = br_pos + 1;
                                if (l >= elist.length) break;
                            } else {
                                if (elist[l].space !== "preserve") {
                                    elist[l].text = elist[l].text.replace(/\s+$/g, "");
                                }
                                if (elist[l].text.length > 0) {
                                    state = "after_br";
                                    l = br_pos + 1;
                                    if (l >= elist.length) break;
                                } else {
                                    elist.splice(l, 1);
                                    l--;
                                }
                            }
                        } else {
                            if (l >= elist.length || elist[l].kind === "br") {
                                state = "before_br";
                                br_pos = l;
                                l--;
                            } else {
                                l++;
                            }
                        }
                    }
                    pruneEmptySpans(isd_element);
                }
                if (isd_element.kind === "div" && imscStyles.byName.backgroundImage.qname in isd_element.styleAttrs || isd_element.kind === "br" || "contents" in isd_element && isd_element.contents.length > 0 || isd_element.kind === "span" && isd_element.text !== null || isd_element.kind === "region" && isd_element.styleAttrs[imscStyles.byName.showBackground.qname] === "always") {
                    return {
                        region_id: associated_region_id,
                        element: isd_element
                    };
                }
                return null;
            }
            function constructSpanList(element, elist) {
                if ("contents" in element) {
                    for (var i in element.contents) {
                        constructSpanList(element.contents[i], elist);
                    }
                } else {
                    elist.push(element);
                }
            }
            function pruneEmptySpans(element) {
                if (element.kind === "br") {
                    return false;
                } else if ("text" in element) {
                    return element.text.length === 0;
                } else if ("contents" in element) {
                    var i = element.contents.length;
                    while (i--) {
                        if (pruneEmptySpans(element.contents[i])) {
                            element.contents.splice(i, 1);
                        }
                    }
                    return element.contents.length === 0;
                }
            }
            function ISD(tt) {
                this.contents = [];
                this.aspectRatio = tt.aspectRatio;
            }
            function ISDContentElement(ttelem) {
                this.kind = ttelem.kind || "region";
                if (ttelem.id) {
                    this.id = ttelem.id;
                }
                this.styleAttrs = {};
                for (var sname in ttelem.styleAttrs) {
                    this.styleAttrs[sname] = ttelem.styleAttrs[sname];
                }
                if ("text" in ttelem) {
                    this.text = ttelem.text;
                } else if (ttelem.kind !== "br") {
                    this.contents = [];
                }
                if ("space" in ttelem) {
                    this.space = ttelem.space;
                }
            }
            function reportInfo(errorHandler, msg) {
                if (errorHandler && errorHandler.info && errorHandler.info(msg)) throw msg;
            }
            function reportWarning(errorHandler, msg) {
                if (errorHandler && errorHandler.warn && errorHandler.warn(msg)) throw msg;
            }
            function reportError(errorHandler, msg) {
                if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
            }
            function reportFatal(errorHandler, msg) {
                if (errorHandler && errorHandler.fatal) errorHandler.fatal(msg);
                throw msg;
            }
        })(typeof exports === "undefined" ? this.imscISD = {} : exports, typeof imscNames === "undefined" ? _dereq_(21) : imscNames, typeof imscStyles === "undefined" ? _dereq_(22) : imscStyles);
    }, {
        21: 21,
        22: 22
    } ],
    20: [ function(_dereq_, module, exports) {
        exports.generateISD = _dereq_(19).generateISD;
        exports.fromXML = _dereq_(17).fromXML;
        exports.renderHTML = _dereq_(18).render;
    }, {
        17: 17,
        18: 18,
        19: 19
    } ],
    21: [ function(_dereq_, module, exports) {
        (function(imscNames) {
            imscNames.ns_tt = "http://www.w3.org/ns/ttml";
            imscNames.ns_tts = "http://www.w3.org/ns/ttml#styling";
            imscNames.ns_ttp = "http://www.w3.org/ns/ttml#parameter";
            imscNames.ns_xml = "http://www.w3.org/XML/1998/namespace";
            imscNames.ns_itts = "http://www.w3.org/ns/ttml/profile/imsc1#styling";
            imscNames.ns_ittp = "http://www.w3.org/ns/ttml/profile/imsc1#parameter";
            imscNames.ns_smpte = "http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt";
            imscNames.ns_ebutts = "urn:ebu:tt:style";
        })(typeof exports === "undefined" ? this.imscNames = {} : exports);
    }, {} ],
    22: [ function(_dereq_, module, exports) {
        (function(imscStyles, imscNames, imscUtils) {
            function StylingAttributeDefinition(ns, name, initialValue, appliesTo, isInherit, isAnimatable, parseFunc, computeFunc) {
                this.name = name;
                this.ns = ns;
                this.qname = ns + " " + name;
                this.inherit = isInherit;
                this.animatable = isAnimatable;
                this.initial = initialValue;
                this.applies = appliesTo;
                this.parse = parseFunc;
                this.compute = computeFunc;
            }
            imscStyles.all = [ new StylingAttributeDefinition(imscNames.ns_tts, "backgroundColor", "transparent", [ "body", "div", "p", "region", "span" ], false, true, imscUtils.parseColor, null), new StylingAttributeDefinition(imscNames.ns_tts, "color", "white", [ "span" ], true, true, imscUtils.parseColor, null), new StylingAttributeDefinition(imscNames.ns_tts, "direction", "ltr", [ "p", "span" ], true, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "display", "auto", [ "body", "div", "p", "region", "span" ], false, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "displayAlign", "before", [ "region" ], false, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "extent", "auto", [ "tt", "region" ], false, true, function(str) {
                if (str === "auto") {
                    return str;
                } else {
                    var s = str.split(" ");
                    if (s.length !== 2) return null;
                    var w = imscUtils.parseLength(s[0]);
                    var h = imscUtils.parseLength(s[1]);
                    if (!h || !w) return null;
                    return {
                        h: h,
                        w: w
                    };
                }
            }, function(doc, parent, element, attr, context) {
                var h;
                var w;
                if (attr === "auto") {
                    h = 1;
                } else if (attr.h.unit === "%") {
                    h = attr.h.value / 100;
                } else if (attr.h.unit === "px") {
                    h = attr.h.value / doc.pxDimensions.h;
                } else {
                    return null;
                }
                if (attr === "auto") {
                    w = 1;
                } else if (attr.w.unit === "%") {
                    w = attr.w.value / 100;
                } else if (attr.w.unit === "px") {
                    w = attr.w.value / doc.pxDimensions.w;
                } else {
                    return null;
                }
                return {
                    h: h,
                    w: w
                };
            }), new StylingAttributeDefinition(imscNames.ns_tts, "fontFamily", "default", [ "span" ], true, true, function(str) {
                var ffs = str.split(",");
                var rslt = [];
                for (var i in ffs) {
                    if (ffs[i].charAt(0) !== "'" && ffs[i].charAt(0) !== '"') {
                        if (ffs[i] === "default") {
                            rslt.push("monospaceSerif");
                        } else {
                            rslt.push(ffs[i]);
                        }
                    } else {
                        rslt.push(ffs[i]);
                    }
                }
                return rslt;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "fontSize", "1c", [ "span" ], true, true, imscUtils.parseLength, function(doc, parent, element, attr, context) {
                var fs;
                if (attr.unit === "%") {
                    if (parent !== null) {
                        fs = parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100;
                    } else {
                        fs = attr.value / 100 / doc.cellResolution.h;
                    }
                } else if (attr.unit === "em") {
                    if (parent !== null) {
                        fs = parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value;
                    } else {
                        fs = attr.value / doc.cellResolution.h;
                    }
                } else if (attr.unit === "c") {
                    fs = attr.value / doc.cellResolution.h;
                } else if (attr.unit === "px") {
                    fs = attr.value / doc.pxDimensions.h;
                } else {
                    return null;
                }
                return fs;
            }), new StylingAttributeDefinition(imscNames.ns_tts, "fontStyle", "normal", [ "span" ], true, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "fontWeight", "normal", [ "span" ], true, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "lineHeight", "normal", [ "p" ], true, true, function(str) {
                if (str === "normal") {
                    return str;
                } else {
                    return imscUtils.parseLength(str);
                }
            }, function(doc, parent, element, attr, context) {
                var lh;
                if (attr === "normal") {
                    lh = attr;
                } else if (attr.unit === "%") {
                    lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100;
                } else if (attr.unit === "em") {
                    lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value;
                } else if (attr.unit === "c") {
                    lh = attr.value / doc.cellResolution.h;
                } else if (attr.unit === "px") {
                    lh = attr.value / doc.pxDimensions.h;
                } else {
                    return null;
                }
                return lh;
            }), new StylingAttributeDefinition(imscNames.ns_tts, "opacity", 1, [ "region" ], false, true, parseFloat, null), new StylingAttributeDefinition(imscNames.ns_tts, "origin", "auto", [ "region" ], false, true, function(str) {
                if (str === "auto") {
                    return str;
                } else {
                    var s = str.split(" ");
                    if (s.length !== 2) return null;
                    var w = imscUtils.parseLength(s[0]);
                    var h = imscUtils.parseLength(s[1]);
                    if (!h || !w) return null;
                    return {
                        h: h,
                        w: w
                    };
                }
            }, function(doc, parent, element, attr, context) {
                var h;
                var w;
                if (attr === "auto") {
                    h = 0;
                } else if (attr.h.unit === "%") {
                    h = attr.h.value / 100;
                } else if (attr.h.unit === "px") {
                    h = attr.h.value / doc.pxDimensions.h;
                } else {
                    return null;
                }
                if (attr === "auto") {
                    w = 0;
                } else if (attr.w.unit === "%") {
                    w = attr.w.value / 100;
                } else if (attr.w.unit === "px") {
                    w = attr.w.value / doc.pxDimensions.w;
                } else {
                    return null;
                }
                return {
                    h: h,
                    w: w
                };
            }), new StylingAttributeDefinition(imscNames.ns_tts, "overflow", "hidden", [ "region" ], false, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "padding", "0px", [ "region" ], false, true, function(str) {
                var s = str.split(" ");
                if (s.length > 4) return null;
                var r = [];
                for (var i in s) {
                    var l = imscUtils.parseLength(s[i]);
                    if (!l) return null;
                    r.push(l);
                }
                return r;
            }, function(doc, parent, element, attr, context) {
                var padding;
                if (attr.length === 1) {
                    padding = [ attr[0], attr[0], attr[0], attr[0] ];
                } else if (attr.length === 2) {
                    padding = [ attr[0], attr[1], attr[0], attr[1] ];
                } else if (attr.length === 3) {
                    padding = [ attr[0], attr[1], attr[2], attr[1] ];
                } else if (attr.length === 4) {
                    padding = [ attr[0], attr[1], attr[2], attr[3] ];
                } else {
                    return null;
                }
                var dir = element.styleAttrs[imscStyles.byName.writingMode.qname];
                if (dir === "lrtb" || dir === "lr") {
                    padding = [ padding[0], padding[3], padding[2], padding[1] ];
                } else if (dir === "rltb" || dir === "rl") {
                    padding = [ padding[0], padding[1], padding[2], padding[3] ];
                } else if (dir === "tblr") {
                    padding = [ padding[3], padding[0], padding[1], padding[2] ];
                } else if (dir === "tbrl" || dir === "tb") {
                    padding = [ padding[3], padding[2], padding[1], padding[0] ];
                } else {
                    return null;
                }
                var out = [];
                for (var i in padding) {
                    if (padding[i].value === 0) {
                        out[i] = 0;
                    } else if (padding[i].unit === "%") {
                        if (i === "0" || i === "2") {
                            out[i] = element.styleAttrs[imscStyles.byName.extent.qname].h * padding[i].value / 100;
                        } else {
                            out[i] = element.styleAttrs[imscStyles.byName.extent.qname].w * padding[i].value / 100;
                        }
                    } else if (padding[i].unit === "em") {
                        out[i] = element.styleAttrs[imscStyles.byName.fontSize.qname] * padding[i].value;
                    } else if (padding[i].unit === "c") {
                        out[i] = padding[i].value / doc.cellResolution.h;
                    } else if (padding[i].unit === "px") {
                        if (i === "0" || i === "2") {
                            out[i] = padding[i].value / doc.pxDimensions.h;
                        } else {
                            out[i] = padding[i].value / doc.pxDimensions.w;
                        }
                    } else {
                        return null;
                    }
                }
                return out;
            }), new StylingAttributeDefinition(imscNames.ns_tts, "showBackground", "always", [ "region" ], false, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "textAlign", "start", [ "p" ], true, true, function(str) {
                return str;
            }, function(doc, parent, element, attr, context) {
                if (attr === "left") {
                    return "start";
                } else if (attr === "right") {
                    return "end";
                } else {
                    return attr;
                }
            }), new StylingAttributeDefinition(imscNames.ns_tts, "textDecoration", "none", [ "span" ], true, true, function(str) {
                return str.split(" ");
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "textOutline", "none", [ "span" ], true, true, function(str) {
                if (str === "none") {
                    return str;
                } else {
                    var r = {};
                    var s = str.split(" ");
                    if (s.length === 0 || s.length > 2) return null;
                    var c = imscUtils.parseColor(s[0]);
                    r.color = c;
                    if (c !== null) s.shift();
                    if (s.length !== 1) return null;
                    var l = imscUtils.parseLength(s[0]);
                    if (!l) return null;
                    r.thickness = l;
                    return r;
                }
            }, function(doc, parent, element, attr, context) {
                if (attr === "none") return attr;
                var rslt = {};
                if (attr.color === null) {
                    rslt.color = element.styleAttrs[imscStyles.byName.color.qname];
                } else {
                    rslt.color = attr.color;
                }
                if (attr.thickness.unit === "%") {
                    rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value / 100;
                } else if (attr.thickness.unit === "em") {
                    rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value;
                } else if (attr.thickness.unit === "c") {
                    rslt.thickness = attr.thickness.value / doc.cellResolution.h;
                } else if (attr.thickness.unit === "px") {
                    rslt.thickness = attr.thickness.value / doc.pxDimensions.h;
                } else {
                    return null;
                }
                return rslt;
            }), new StylingAttributeDefinition(imscNames.ns_tts, "unicodeBidi", "normal", [ "span", "p" ], false, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "visibility", "visible", [ "body", "div", "p", "region", "span" ], true, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "wrapOption", "wrap", [ "span" ], true, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "writingMode", "lrtb", [ "region" ], false, true, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_tts, "zIndex", "auto", [ "region" ], false, true, function(str) {
                var rslt;
                if (str === "auto") {
                    rslt = str;
                } else {
                    rslt = parseInt(str);
                    if (isNaN(rslt)) {
                        rslt = null;
                    }
                }
                return rslt;
            }, null), new StylingAttributeDefinition(imscNames.ns_ebutts, "linePadding", "0c", [ "p" ], true, false, imscUtils.parseLength, function(doc, parent, element, attr, context) {
                if (attr.unit === "c") {
                    return attr.value / doc.cellResolution.h;
                } else {
                    return null;
                }
            }), new StylingAttributeDefinition(imscNames.ns_ebutts, "multiRowAlign", "auto", [ "p" ], true, false, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_smpte, "backgroundImage", null, [ "div" ], false, false, function(str) {
                return str;
            }, null), new StylingAttributeDefinition(imscNames.ns_itts, "forcedDisplay", "false", [ "body", "div", "p", "region", "span" ], true, true, function(str) {
                return str === "true" ? true : false;
            }, null), new StylingAttributeDefinition(imscNames.ns_itts, "fillLineGap", "false", [ "p" ], true, true, function(str) {
                return str === "true" ? true : false;
            }, null) ];
            imscStyles.byQName = {};
            for (var i in imscStyles.all) {
                imscStyles.byQName[imscStyles.all[i].qname] = imscStyles.all[i];
            }
            imscStyles.byName = {};
            for (var j in imscStyles.all) {
                imscStyles.byName[imscStyles.all[j].name] = imscStyles.all[j];
            }
        })(typeof exports === "undefined" ? this.imscStyles = {} : exports, typeof imscNames === "undefined" ? _dereq_(21) : imscNames, typeof imscUtils === "undefined" ? _dereq_(23) : imscUtils);
    }, {
        21: 21,
        23: 23
    } ],
    23: [ function(_dereq_, module, exports) {
        (function(imscUtils) {
            var HEX_COLOR_RE = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?/;
            var DEC_COLOR_RE = /rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
            var DEC_COLORA_RE = /rgba\(\s*(\d+),\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
            var NAMED_COLOR = {
                transparent: [ 0, 0, 0, 0 ],
                black: [ 0, 0, 0, 255 ],
                silver: [ 192, 192, 192, 255 ],
                gray: [ 128, 128, 128, 255 ],
                white: [ 255, 255, 255, 255 ],
                maroon: [ 128, 0, 0, 255 ],
                red: [ 255, 0, 0, 255 ],
                purple: [ 128, 0, 128, 255 ],
                fuchsia: [ 255, 0, 255, 255 ],
                magenta: [ 255, 0, 255, 255 ],
                green: [ 0, 128, 0, 255 ],
                lime: [ 0, 255, 0, 255 ],
                olive: [ 128, 128, 0, 255 ],
                yellow: [ 255, 255, 0, 255 ],
                navy: [ 0, 0, 128, 255 ],
                blue: [ 0, 0, 255, 255 ],
                teal: [ 0, 128, 128, 255 ],
                aqua: [ 0, 255, 255, 255 ],
                cyan: [ 0, 255, 255, 255 ]
            };
            imscUtils.parseColor = function(str) {
                var m;
                var r = null;
                var nc = NAMED_COLOR[str.toLowerCase()];
                if (nc !== undefined) {
                    r = nc;
                } else if ((m = HEX_COLOR_RE.exec(str)) !== null) {
                    r = [ parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] !== undefined ? parseInt(m[4], 16) : 255 ];
                } else if ((m = DEC_COLOR_RE.exec(str)) !== null) {
                    r = [ parseInt(m[1]), parseInt(m[2]), parseInt(m[3]), 255 ];
                } else if ((m = DEC_COLORA_RE.exec(str)) !== null) {
                    r = [ parseInt(m[1]), parseInt(m[2]), parseInt(m[3]), parseInt(m[4]) ];
                }
                return r;
            };
            var LENGTH_RE = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%)$/;
            imscUtils.parseLength = function(str) {
                var m;
                var r = null;
                if ((m = LENGTH_RE.exec(str)) !== null) {
                    r = {
                        value: parseFloat(m[1]),
                        unit: m[2]
                    };
                }
                return r;
            };
        })(typeof exports === "undefined" ? this.imscUtils = {} : exports);
    }, {} ],
    24: [ function(_dereq_, module, exports) {
        if (typeof Object.create === "function") {
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            };
        } else {
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function() {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            };
        }
    }, {} ],
    25: [ function(_dereq_, module, exports) {
        module.exports = function(obj) {
            return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
        };
        function isBuffer(obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
        }
        function isSlowBuffer(obj) {
            return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
        }
    }, {} ],
    26: [ function(_dereq_, module, exports) {
        (function(process) {
            "use strict";
            if (!process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
                module.exports = {
                    nextTick: nextTick
                };
            } else {
                module.exports = process;
            }
            function nextTick(fn, arg1, arg2, arg3) {
                if (typeof fn !== "function") {
                    throw new TypeError('"callback" argument must be a function');
                }
                var len = arguments.length;
                var args, i;
                switch (len) {
                  case 0:
                  case 1:
                    return process.nextTick(fn);

                  case 2:
                    return process.nextTick(function afterTickOne() {
                        fn.call(null, arg1);
                    });

                  case 3:
                    return process.nextTick(function afterTickTwo() {
                        fn.call(null, arg1, arg2);
                    });

                  case 4:
                    return process.nextTick(function afterTickThree() {
                        fn.call(null, arg1, arg2, arg3);
                    });

                  default:
                    args = new Array(len - 1);
                    i = 0;
                    while (i < args.length) {
                        args[i++] = arguments[i];
                    }
                    return process.nextTick(function afterTick() {
                        fn.apply(null, args);
                    });
                }
            }
        }).call(this, _dereq_(27));
    }, {
        27: 27
    } ],
    27: [ function(_dereq_, module, exports) {
        var process = module.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
        }
        (function() {
            try {
                if (typeof setTimeout === "function") {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === "function") {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        })();
        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                return setTimeout(fun, 0);
            }
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }
        }
        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                return clearTimeout(marker);
            }
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    return cachedClearTimeout.call(this, marker);
                }
            }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }
        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }
        Item.prototype.run = function() {
            this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
            return [];
        };
        process.binding = function(name) {
            throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
            return "/";
        };
        process.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
            return 0;
        };
    }, {} ],
    28: [ function(_dereq_, module, exports) {
        module.exports = _dereq_(29);
    }, {
        29: 29
    } ],
    29: [ function(_dereq_, module, exports) {
        "use strict";
        var pna = _dereq_(26);
        var objectKeys = Object.keys || function(obj) {
            var keys = [];
            for (var key in obj) {
                keys.push(key);
            }
            return keys;
        };
        module.exports = Duplex;
        var util = _dereq_(14);
        util.inherits = _dereq_(24);
        var Readable = _dereq_(31);
        var Writable = _dereq_(33);
        util.inherits(Duplex, Readable);
        {
            var keys = objectKeys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
        }
        function Duplex(options) {
            if (!(this instanceof Duplex)) return new Duplex(options);
            Readable.call(this, options);
            Writable.call(this, options);
            if (options && options.readable === false) this.readable = false;
            if (options && options.writable === false) this.writable = false;
            this.allowHalfOpen = true;
            if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
            this.once("end", onend);
        }
        Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
            enumerable: false,
            get: function() {
                return this._writableState.highWaterMark;
            }
        });
        function onend() {
            if (this.allowHalfOpen || this._writableState.ended) return;
            pna.nextTick(onEndNT, this);
        }
        function onEndNT(self) {
            self.end();
        }
        Object.defineProperty(Duplex.prototype, "destroyed", {
            get: function() {
                if (this._readableState === undefined || this._writableState === undefined) {
                    return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function(value) {
                if (this._readableState === undefined || this._writableState === undefined) {
                    return;
                }
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
            }
        });
        Duplex.prototype._destroy = function(err, cb) {
            this.push(null);
            this.end();
            pna.nextTick(cb, err);
        };
    }, {
        14: 14,
        24: 24,
        26: 26,
        31: 31,
        33: 33
    } ],
    30: [ function(_dereq_, module, exports) {
        "use strict";
        module.exports = PassThrough;
        var Transform = _dereq_(32);
        var util = _dereq_(14);
        util.inherits = _dereq_(24);
        util.inherits(PassThrough, Transform);
        function PassThrough(options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);
            Transform.call(this, options);
        }
        PassThrough.prototype._transform = function(chunk, encoding, cb) {
            cb(null, chunk);
        };
    }, {
        14: 14,
        24: 24,
        32: 32
    } ],
    31: [ function(_dereq_, module, exports) {
        (function(process, global) {
            "use strict";
            var pna = _dereq_(26);
            module.exports = Readable;
            var isArray = _dereq_(37);
            var Duplex;
            Readable.ReadableState = ReadableState;
            var EE = _dereq_(8).EventEmitter;
            var EElistenerCount = function(emitter, type) {
                return emitter.listeners(type).length;
            };
            var Stream = _dereq_(36);
            var Buffer = _dereq_(43).Buffer;
            var OurUint8Array = global.Uint8Array || function() {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var util = _dereq_(14);
            util.inherits = _dereq_(24);
            var debugUtil = _dereq_(7);
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog("stream");
            } else {
                debug = function() {};
            }
            var BufferList = _dereq_(34);
            var destroyImpl = _dereq_(35);
            var StringDecoder;
            util.inherits(Readable, Stream);
            var kProxyEvents = [ "error", "close", "destroy", "pause", "resume" ];
            function prependListener(emitter, event, fn) {
                if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [ fn, emitter._events[event] ];
            }
            function ReadableState(options, stream) {
                Duplex = Duplex || _dereq_(29);
                options = options || {};
                var isDuplex = stream instanceof Duplex;
                this.objectMode = !!options.objectMode;
                if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
                var hwm = options.highWaterMark;
                var readableHwm = options.readableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;
                this.highWaterMark = Math.floor(this.highWaterMark);
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;
                this.sync = true;
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;
                this.destroyed = false;
                this.defaultEncoding = options.defaultEncoding || "utf8";
                this.awaitDrain = 0;
                this.readingMore = false;
                this.decoder = null;
                this.encoding = null;
                if (options.encoding) {
                    if (!StringDecoder) StringDecoder = _dereq_(38).StringDecoder;
                    this.decoder = new StringDecoder(options.encoding);
                    this.encoding = options.encoding;
                }
            }
            function Readable(options) {
                Duplex = Duplex || _dereq_(29);
                if (!(this instanceof Readable)) return new Readable(options);
                this._readableState = new ReadableState(options, this);
                this.readable = true;
                if (options) {
                    if (typeof options.read === "function") this._read = options.read;
                    if (typeof options.destroy === "function") this._destroy = options.destroy;
                }
                Stream.call(this);
            }
            Object.defineProperty(Readable.prototype, "destroyed", {
                get: function() {
                    if (this._readableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed;
                },
                set: function(value) {
                    if (!this._readableState) {
                        return;
                    }
                    this._readableState.destroyed = value;
                }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function(err, cb) {
                this.push(null);
                cb(err);
            };
            Readable.prototype.push = function(chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;
                if (!state.objectMode) {
                    if (typeof chunk === "string") {
                        encoding = encoding || state.defaultEncoding;
                        if (encoding !== state.encoding) {
                            chunk = Buffer.from(chunk, encoding);
                            encoding = "";
                        }
                        skipChunkCheck = true;
                    }
                } else {
                    skipChunkCheck = true;
                }
                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };
            Readable.prototype.unshift = function(chunk) {
                return readableAddChunk(this, chunk, null, true, false);
            };
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                var state = stream._readableState;
                if (chunk === null) {
                    state.reading = false;
                    onEofChunk(stream, state);
                } else {
                    var er;
                    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                    if (er) {
                        stream.emit("error", er);
                    } else if (state.objectMode || chunk && chunk.length > 0) {
                        if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }
                        if (addToFront) {
                            if (state.endEmitted) stream.emit("error", new Error("stream.unshift() after end event")); else addChunk(stream, state, chunk, true);
                        } else if (state.ended) {
                            stream.emit("error", new Error("stream.push() after EOF"));
                        } else {
                            state.reading = false;
                            if (state.decoder && !encoding) {
                                chunk = state.decoder.write(chunk);
                                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                            } else {
                                addChunk(stream, state, chunk, false);
                            }
                        }
                    } else if (!addToFront) {
                        state.reading = false;
                    }
                }
                return needMoreData(state);
            }
            function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                    stream.emit("data", chunk);
                    stream.read(0);
                } else {
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
                    if (state.needReadable) emitReadable(stream);
                }
                maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
                var er;
                if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) {
                    er = new TypeError("Invalid non-string/buffer chunk");
                }
                return er;
            }
            function needMoreData(state) {
                return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }
            Readable.prototype.isPaused = function() {
                return this._readableState.flowing === false;
            };
            Readable.prototype.setEncoding = function(enc) {
                if (!StringDecoder) StringDecoder = _dereq_(38).StringDecoder;
                this._readableState.decoder = new StringDecoder(enc);
                this._readableState.encoding = enc;
                return this;
            };
            var MAX_HWM = 8388608;
            function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                    n = MAX_HWM;
                } else {
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                }
                return n;
            }
            function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended) return 0;
                if (state.objectMode) return 1;
                if (n !== n) {
                    if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                }
                if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length) return n;
                if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                }
                return state.length;
            }
            Readable.prototype.read = function(n) {
                debug("read", n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;
                if (n !== 0) state.emittedReadable = false;
                if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                    debug("read: emitReadable", state.length, state.ended);
                    if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                    return null;
                }
                n = howMuchToRead(n, state);
                if (n === 0 && state.ended) {
                    if (state.length === 0) endReadable(this);
                    return null;
                }
                var doRead = state.needReadable;
                debug("need readable", doRead);
                if (state.length === 0 || state.length - n < state.highWaterMark) {
                    doRead = true;
                    debug("length less than watermark", doRead);
                }
                if (state.ended || state.reading) {
                    doRead = false;
                    debug("reading or ended", doRead);
                } else if (doRead) {
                    debug("do read");
                    state.reading = true;
                    state.sync = true;
                    if (state.length === 0) state.needReadable = true;
                    this._read(state.highWaterMark);
                    state.sync = false;
                    if (!state.reading) n = howMuchToRead(nOrig, state);
                }
                var ret;
                if (n > 0) ret = fromList(n, state); else ret = null;
                if (ret === null) {
                    state.needReadable = true;
                    n = 0;
                } else {
                    state.length -= n;
                }
                if (state.length === 0) {
                    if (!state.ended) state.needReadable = true;
                    if (nOrig !== n && state.ended) endReadable(this);
                }
                if (ret !== null) this.emit("data", ret);
                return ret;
            };
            function onEofChunk(stream, state) {
                if (state.ended) return;
                if (state.decoder) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) {
                        state.buffer.push(chunk);
                        state.length += state.objectMode ? 1 : chunk.length;
                    }
                }
                state.ended = true;
                emitReadable(stream);
            }
            function emitReadable(stream) {
                var state = stream._readableState;
                state.needReadable = false;
                if (!state.emittedReadable) {
                    debug("emitReadable", state.flowing);
                    state.emittedReadable = true;
                    if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
                }
            }
            function emitReadable_(stream) {
                debug("emit readable");
                stream.emit("readable");
                flow(stream);
            }
            function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                    state.readingMore = true;
                    pna.nextTick(maybeReadMore_, stream, state);
                }
            }
            function maybeReadMore_(stream, state) {
                var len = state.length;
                while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                    debug("maybeReadMore read 0");
                    stream.read(0);
                    if (len === state.length) break; else len = state.length;
                }
                state.readingMore = false;
            }
            Readable.prototype._read = function(n) {
                this.emit("error", new Error("_read() is not implemented"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
                var src = this;
                var state = this._readableState;
                switch (state.pipesCount) {
                  case 0:
                    state.pipes = dest;
                    break;

                  case 1:
                    state.pipes = [ state.pipes, dest ];
                    break;

                  default:
                    state.pipes.push(dest);
                    break;
                }
                state.pipesCount += 1;
                debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted) pna.nextTick(endFn); else src.once("end", endFn);
                dest.on("unpipe", onunpipe);
                function onunpipe(readable, unpipeInfo) {
                    debug("onunpipe");
                    if (readable === src) {
                        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                            unpipeInfo.hasUnpiped = true;
                            cleanup();
                        }
                    }
                }
                function onend() {
                    debug("onend");
                    dest.end();
                }
                var ondrain = pipeOnDrain(src);
                dest.on("drain", ondrain);
                var cleanedUp = false;
                function cleanup() {
                    debug("cleanup");
                    dest.removeListener("close", onclose);
                    dest.removeListener("finish", onfinish);
                    dest.removeListener("drain", ondrain);
                    dest.removeListener("error", onerror);
                    dest.removeListener("unpipe", onunpipe);
                    src.removeListener("end", onend);
                    src.removeListener("end", unpipe);
                    src.removeListener("data", ondata);
                    cleanedUp = true;
                    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                }
                var increasedAwaitDrain = false;
                src.on("data", ondata);
                function ondata(chunk) {
                    debug("ondata");
                    increasedAwaitDrain = false;
                    var ret = dest.write(chunk);
                    if (false === ret && !increasedAwaitDrain) {
                        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                            debug("false write response, pause", src._readableState.awaitDrain);
                            src._readableState.awaitDrain++;
                            increasedAwaitDrain = true;
                        }
                        src.pause();
                    }
                }
                function onerror(er) {
                    debug("onerror", er);
                    unpipe();
                    dest.removeListener("error", onerror);
                    if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
                }
                prependListener(dest, "error", onerror);
                function onclose() {
                    dest.removeListener("finish", onfinish);
                    unpipe();
                }
                dest.once("close", onclose);
                function onfinish() {
                    debug("onfinish");
                    dest.removeListener("close", onclose);
                    unpipe();
                }
                dest.once("finish", onfinish);
                function unpipe() {
                    debug("unpipe");
                    src.unpipe(dest);
                }
                dest.emit("pipe", src);
                if (!state.flowing) {
                    debug("pipe resume");
                    src.resume();
                }
                return dest;
            };
            function pipeOnDrain(src) {
                return function() {
                    var state = src._readableState;
                    debug("pipeOnDrain", state.awaitDrain);
                    if (state.awaitDrain) state.awaitDrain--;
                    if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                        state.flowing = true;
                        flow(src);
                    }
                };
            }
            Readable.prototype.unpipe = function(dest) {
                var state = this._readableState;
                var unpipeInfo = {
                    hasUnpiped: false
                };
                if (state.pipesCount === 0) return this;
                if (state.pipesCount === 1) {
                    if (dest && dest !== state.pipes) return this;
                    if (!dest) dest = state.pipes;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    if (dest) dest.emit("unpipe", this, unpipeInfo);
                    return this;
                }
                if (!dest) {
                    var dests = state.pipes;
                    var len = state.pipesCount;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    for (var i = 0; i < len; i++) {
                        dests[i].emit("unpipe", this, unpipeInfo);
                    }
                    return this;
                }
                var index = indexOf(state.pipes, dest);
                if (index === -1) return this;
                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1) state.pipes = state.pipes[0];
                dest.emit("unpipe", this, unpipeInfo);
                return this;
            };
            Readable.prototype.on = function(ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);
                if (ev === "data") {
                    if (this._readableState.flowing !== false) this.resume();
                } else if (ev === "readable") {
                    var state = this._readableState;
                    if (!state.endEmitted && !state.readableListening) {
                        state.readableListening = state.needReadable = true;
                        state.emittedReadable = false;
                        if (!state.reading) {
                            pna.nextTick(nReadingNextTick, this);
                        } else if (state.length) {
                            emitReadable(this);
                        }
                    }
                }
                return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            function nReadingNextTick(self) {
                debug("readable nexttick read 0");
                self.read(0);
            }
            Readable.prototype.resume = function() {
                var state = this._readableState;
                if (!state.flowing) {
                    debug("resume");
                    state.flowing = true;
                    resume(this, state);
                }
                return this;
            };
            function resume(stream, state) {
                if (!state.resumeScheduled) {
                    state.resumeScheduled = true;
                    pna.nextTick(resume_, stream, state);
                }
            }
            function resume_(stream, state) {
                if (!state.reading) {
                    debug("resume read 0");
                    stream.read(0);
                }
                state.resumeScheduled = false;
                state.awaitDrain = 0;
                stream.emit("resume");
                flow(stream);
                if (state.flowing && !state.reading) stream.read(0);
            }
            Readable.prototype.pause = function() {
                debug("call pause flowing=%j", this._readableState.flowing);
                if (false !== this._readableState.flowing) {
                    debug("pause");
                    this._readableState.flowing = false;
                    this.emit("pause");
                }
                return this;
            };
            function flow(stream) {
                var state = stream._readableState;
                debug("flow", state.flowing);
                while (state.flowing && stream.read() !== null) {}
            }
            Readable.prototype.wrap = function(stream) {
                var _this = this;
                var state = this._readableState;
                var paused = false;
                stream.on("end", function() {
                    debug("wrapped end");
                    if (state.decoder && !state.ended) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) _this.push(chunk);
                    }
                    _this.push(null);
                });
                stream.on("data", function(chunk) {
                    debug("wrapped data");
                    if (state.decoder) chunk = state.decoder.write(chunk);
                    if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;
                    var ret = _this.push(chunk);
                    if (!ret) {
                        paused = true;
                        stream.pause();
                    }
                });
                for (var i in stream) {
                    if (this[i] === undefined && typeof stream[i] === "function") {
                        this[i] = function(method) {
                            return function() {
                                return stream[method].apply(stream, arguments);
                            };
                        }(i);
                    }
                }
                for (var n = 0; n < kProxyEvents.length; n++) {
                    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                }
                this._read = function(n) {
                    debug("wrapped _read", n);
                    if (paused) {
                        paused = false;
                        stream.resume();
                    }
                };
                return this;
            };
            Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
                enumerable: false,
                get: function() {
                    return this._readableState.highWaterMark;
                }
            });
            Readable._fromList = fromList;
            function fromList(n, state) {
                if (state.length === 0) return null;
                var ret;
                if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                    if (state.decoder) ret = state.buffer.join(""); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
                    state.buffer.clear();
                } else {
                    ret = fromListPartial(n, state.buffer, state.decoder);
                }
                return ret;
            }
            function fromListPartial(n, list, hasStrings) {
                var ret;
                if (n < list.head.data.length) {
                    ret = list.head.data.slice(0, n);
                    list.head.data = list.head.data.slice(n);
                } else if (n === list.head.data.length) {
                    ret = list.shift();
                } else {
                    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                }
                return ret;
            }
            function copyFromBufferString(n, list) {
                var p = list.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str; else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) list.head = p.next; else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }
            function copyFromBuffer(n, list) {
                var ret = Buffer.allocUnsafe(n);
                var p = list.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) list.head = p.next; else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }
            function endReadable(stream) {
                var state = stream._readableState;
                if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
                if (!state.endEmitted) {
                    state.ended = true;
                    pna.nextTick(endReadableNT, state, stream);
                }
            }
            function endReadableNT(state, stream) {
                if (!state.endEmitted && state.length === 0) {
                    state.endEmitted = true;
                    stream.readable = false;
                    stream.emit("end");
                }
            }
            function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    if (xs[i] === x) return i;
                }
                return -1;
            }
        }).call(this, _dereq_(27), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
        14: 14,
        24: 24,
        26: 26,
        27: 27,
        29: 29,
        34: 34,
        35: 35,
        36: 36,
        37: 37,
        38: 38,
        43: 43,
        7: 7,
        8: 8
    } ],
    32: [ function(_dereq_, module, exports) {
        "use strict";
        module.exports = Transform;
        var Duplex = _dereq_(29);
        var util = _dereq_(14);
        util.inherits = _dereq_(24);
        util.inherits(Transform, Duplex);
        function afterTransform(er, data) {
            var ts = this._transformState;
            ts.transforming = false;
            var cb = ts.writecb;
            if (!cb) {
                return this.emit("error", new Error("write callback called multiple times"));
            }
            ts.writechunk = null;
            ts.writecb = null;
            if (data != null) this.push(data);
            cb(er);
            var rs = this._readableState;
            rs.reading = false;
            if (rs.needReadable || rs.length < rs.highWaterMark) {
                this._read(rs.highWaterMark);
            }
        }
        function Transform(options) {
            if (!(this instanceof Transform)) return new Transform(options);
            Duplex.call(this, options);
            this._transformState = {
                afterTransform: afterTransform.bind(this),
                needTransform: false,
                transforming: false,
                writecb: null,
                writechunk: null,
                writeencoding: null
            };
            this._readableState.needReadable = true;
            this._readableState.sync = false;
            if (options) {
                if (typeof options.transform === "function") this._transform = options.transform;
                if (typeof options.flush === "function") this._flush = options.flush;
            }
            this.on("prefinish", prefinish);
        }
        function prefinish() {
            var _this = this;
            if (typeof this._flush === "function") {
                this._flush(function(er, data) {
                    done(_this, er, data);
                });
            } else {
                done(this, null, null);
            }
        }
        Transform.prototype.push = function(chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
        };
        Transform.prototype._transform = function(chunk, encoding, cb) {
            throw new Error("_transform() is not implemented");
        };
        Transform.prototype._write = function(chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;
            if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
        };
        Transform.prototype._read = function(n) {
            var ts = this._transformState;
            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;
                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
                ts.needTransform = true;
            }
        };
        Transform.prototype._destroy = function(err, cb) {
            var _this2 = this;
            Duplex.prototype._destroy.call(this, err, function(err2) {
                cb(err2);
                _this2.emit("close");
            });
        };
        function done(stream, er, data) {
            if (er) return stream.emit("error", er);
            if (data != null) stream.push(data);
            if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
            if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
            return stream.push(null);
        }
    }, {
        14: 14,
        24: 24,
        29: 29
    } ],
    33: [ function(_dereq_, module, exports) {
        (function(process, global, setImmediate) {
            "use strict";
            var pna = _dereq_(26);
            module.exports = Writable;
            function WriteReq(chunk, encoding, cb) {
                this.chunk = chunk;
                this.encoding = encoding;
                this.callback = cb;
                this.next = null;
            }
            function CorkedRequest(state) {
                var _this = this;
                this.next = null;
                this.entry = null;
                this.finish = function() {
                    onCorkedFinish(_this, state);
                };
            }
            var asyncWrite = !process.browser && [ "v0.10", "v0.9." ].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
            var Duplex;
            Writable.WritableState = WritableState;
            var util = _dereq_(14);
            util.inherits = _dereq_(24);
            var internalUtil = {
                deprecate: _dereq_(45)
            };
            var Stream = _dereq_(36);
            var Buffer = _dereq_(43).Buffer;
            var OurUint8Array = global.Uint8Array || function() {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = _dereq_(35);
            util.inherits(Writable, Stream);
            function nop() {}
            function WritableState(options, stream) {
                Duplex = Duplex || _dereq_(29);
                options = options || {};
                var isDuplex = stream instanceof Duplex;
                this.objectMode = !!options.objectMode;
                if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
                var hwm = options.highWaterMark;
                var writableHwm = options.writableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;
                this.highWaterMark = Math.floor(this.highWaterMark);
                this.finalCalled = false;
                this.needDrain = false;
                this.ending = false;
                this.ended = false;
                this.finished = false;
                this.destroyed = false;
                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode;
                this.defaultEncoding = options.defaultEncoding || "utf8";
                this.length = 0;
                this.writing = false;
                this.corked = 0;
                this.sync = true;
                this.bufferProcessing = false;
                this.onwrite = function(er) {
                    onwrite(stream, er);
                };
                this.writecb = null;
                this.writelen = 0;
                this.bufferedRequest = null;
                this.lastBufferedRequest = null;
                this.pendingcb = 0;
                this.prefinished = false;
                this.errorEmitted = false;
                this.bufferedRequestCount = 0;
                this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];
                while (current) {
                    out.push(current);
                    current = current.next;
                }
                return out;
            };
            (function() {
                try {
                    Object.defineProperty(WritableState.prototype, "buffer", {
                        get: internalUtil.deprecate(function() {
                            return this.getBuffer();
                        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer " + "instead.", "DEP0003")
                    });
                } catch (_) {}
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function(object) {
                        if (realHasInstance.call(this, object)) return true;
                        if (this !== Writable) return false;
                        return object && object._writableState instanceof WritableState;
                    }
                });
            } else {
                realHasInstance = function(object) {
                    return object instanceof this;
                };
            }
            function Writable(options) {
                Duplex = Duplex || _dereq_(29);
                if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    return new Writable(options);
                }
                this._writableState = new WritableState(options, this);
                this.writable = true;
                if (options) {
                    if (typeof options.write === "function") this._write = options.write;
                    if (typeof options.writev === "function") this._writev = options.writev;
                    if (typeof options.destroy === "function") this._destroy = options.destroy;
                    if (typeof options.final === "function") this._final = options.final;
                }
                Stream.call(this);
            }
            Writable.prototype.pipe = function() {
                this.emit("error", new Error("Cannot pipe, not readable"));
            };
            function writeAfterEnd(stream, cb) {
                var er = new Error("write after end");
                stream.emit("error", er);
                pna.nextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
                var valid = true;
                var er = false;
                if (chunk === null) {
                    er = new TypeError("May not write null values to stream");
                } else if (typeof chunk !== "string" && chunk !== undefined && !state.objectMode) {
                    er = new TypeError("Invalid non-string/buffer chunk");
                }
                if (er) {
                    stream.emit("error", er);
                    pna.nextTick(cb, er);
                    valid = false;
                }
                return valid;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;
                var isBuf = !state.objectMode && _isUint8Array(chunk);
                if (isBuf && !Buffer.isBuffer(chunk)) {
                    chunk = _uint8ArrayToBuffer(chunk);
                }
                if (typeof encoding === "function") {
                    cb = encoding;
                    encoding = null;
                }
                if (isBuf) encoding = "buffer"; else if (!encoding) encoding = state.defaultEncoding;
                if (typeof cb !== "function") cb = nop;
                if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
                    state.pendingcb++;
                    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }
                return ret;
            };
            Writable.prototype.cork = function() {
                var state = this._writableState;
                state.corked++;
            };
            Writable.prototype.uncork = function() {
                var state = this._writableState;
                if (state.corked) {
                    state.corked--;
                    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                if (typeof encoding === "string") encoding = encoding.toLowerCase();
                if (!([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
            };
            function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                    chunk = Buffer.from(chunk, encoding);
                }
                return chunk;
            }
            Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
                enumerable: false,
                get: function() {
                    return this._writableState.highWaterMark;
                }
            });
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);
                    if (chunk !== newChunk) {
                        isBuf = true;
                        encoding = "buffer";
                        chunk = newChunk;
                    }
                }
                var len = state.objectMode ? 1 : chunk.length;
                state.length += len;
                var ret = state.length < state.highWaterMark;
                if (!ret) state.needDrain = true;
                if (state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                        chunk: chunk,
                        encoding: encoding,
                        isBuf: isBuf,
                        callback: cb,
                        next: null
                    };
                    if (last) {
                        last.next = state.lastBufferedRequest;
                    } else {
                        state.bufferedRequest = state.lastBufferedRequest;
                    }
                    state.bufferedRequestCount += 1;
                } else {
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                }
                return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;
                if (sync) {
                    pna.nextTick(cb, er);
                    pna.nextTick(finishMaybe, stream, state);
                    stream._writableState.errorEmitted = true;
                    stream.emit("error", er);
                } else {
                    cb(er);
                    stream._writableState.errorEmitted = true;
                    stream.emit("error", er);
                    finishMaybe(stream, state);
                }
            }
            function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
            }
            function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;
                onwriteStateUpdate(state);
                if (er) onwriteError(stream, state, sync, er, cb); else {
                    var finished = needFinish(state);
                    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                        clearBuffer(stream, state);
                    }
                    if (sync) {
                        asyncWrite(afterWrite, stream, state, finished, cb);
                    } else {
                        afterWrite(stream, state, finished, cb);
                    }
                }
            }
            function afterWrite(stream, state, finished, cb) {
                if (!finished) onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                    state.needDrain = false;
                    stream.emit("drain");
                }
            }
            function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;
                if (stream._writev && entry && entry.next) {
                    var l = state.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state.corkedRequestsFree;
                    holder.entry = entry;
                    var count = 0;
                    var allBuffers = true;
                    while (entry) {
                        buffer[count] = entry;
                        if (!entry.isBuf) allBuffers = false;
                        entry = entry.next;
                        count += 1;
                    }
                    buffer.allBuffers = allBuffers;
                    doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                    state.pendingcb++;
                    state.lastBufferedRequest = null;
                    if (holder.next) {
                        state.corkedRequestsFree = holder.next;
                        holder.next = null;
                    } else {
                        state.corkedRequestsFree = new CorkedRequest(state);
                    }
                    state.bufferedRequestCount = 0;
                } else {
                    while (entry) {
                        var chunk = entry.chunk;
                        var encoding = entry.encoding;
                        var cb = entry.callback;
                        var len = state.objectMode ? 1 : chunk.length;
                        doWrite(stream, state, false, len, chunk, encoding, cb);
                        entry = entry.next;
                        state.bufferedRequestCount--;
                        if (state.writing) {
                            break;
                        }
                    }
                    if (entry === null) state.lastBufferedRequest = null;
                }
                state.bufferedRequest = entry;
                state.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
                cb(new Error("_write() is not implemented"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
                var state = this._writableState;
                if (typeof chunk === "function") {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                } else if (typeof encoding === "function") {
                    cb = encoding;
                    encoding = null;
                }
                if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
                if (state.corked) {
                    state.corked = 1;
                    this.uncork();
                }
                if (!state.ending && !state.finished) endWritable(this, state, cb);
            };
            function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
                stream._final(function(err) {
                    state.pendingcb--;
                    if (err) {
                        stream.emit("error", err);
                    }
                    state.prefinished = true;
                    stream.emit("prefinish");
                    finishMaybe(stream, state);
                });
            }
            function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                    if (typeof stream._final === "function") {
                        state.pendingcb++;
                        state.finalCalled = true;
                        pna.nextTick(callFinal, stream, state);
                    } else {
                        state.prefinished = true;
                        stream.emit("prefinish");
                    }
                }
            }
            function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need) {
                    prefinish(stream, state);
                    if (state.pendingcb === 0) {
                        state.finished = true;
                        stream.emit("finish");
                    }
                }
                return need;
            }
            function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);
                if (cb) {
                    if (state.finished) pna.nextTick(cb); else stream.once("finish", cb);
                }
                state.ended = true;
                stream.writable = false;
            }
            function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;
                while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                    state.corkedRequestsFree.next = corkReq;
                } else {
                    state.corkedRequestsFree = corkReq;
                }
            }
            Object.defineProperty(Writable.prototype, "destroyed", {
                get: function() {
                    if (this._writableState === undefined) {
                        return false;
                    }
                    return this._writableState.destroyed;
                },
                set: function(value) {
                    if (!this._writableState) {
                        return;
                    }
                    this._writableState.destroyed = value;
                }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function(err, cb) {
                this.end();
                cb(err);
            };
        }).call(this, _dereq_(27), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, _dereq_(11).setImmediate);
    }, {
        11: 11,
        14: 14,
        24: 24,
        26: 26,
        27: 27,
        29: 29,
        35: 35,
        36: 36,
        43: 43,
        45: 45
    } ],
    34: [ function(_dereq_, module, exports) {
        "use strict";
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Buffer = _dereq_(43).Buffer;
        var util = _dereq_(7);
        function copyBuffer(src, target, offset) {
            src.copy(target, offset);
        }
        module.exports = function() {
            function BufferList() {
                _classCallCheck(this, BufferList);
                this.head = null;
                this.tail = null;
                this.length = 0;
            }
            BufferList.prototype.push = function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry; else this.head = entry;
                this.tail = entry;
                ++this.length;
            };
            BufferList.prototype.unshift = function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            };
            BufferList.prototype.shift = function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                --this.length;
                return ret;
            };
            BufferList.prototype.clear = function clear() {
                this.head = this.tail = null;
                this.length = 0;
            };
            BufferList.prototype.join = function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while (p = p.next) {
                    ret += s + p.data;
                }
                return ret;
            };
            BufferList.prototype.concat = function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                if (this.length === 1) return this.head.data;
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            };
            return BufferList;
        }();
        if (util && util.inspect && util.inspect.custom) {
            module.exports.prototype[util.inspect.custom] = function() {
                var obj = util.inspect({
                    length: this.length
                });
                return this.constructor.name + " " + obj;
            };
        }
    }, {
        43: 43,
        7: 7
    } ],
    35: [ function(_dereq_, module, exports) {
        "use strict";
        var pna = _dereq_(26);
        function destroy(err, cb) {
            var _this = this;
            var readableDestroyed = this._readableState && this._readableState.destroyed;
            var writableDestroyed = this._writableState && this._writableState.destroyed;
            if (readableDestroyed || writableDestroyed) {
                if (cb) {
                    cb(err);
                } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                    pna.nextTick(emitErrorNT, this, err);
                }
                return this;
            }
            if (this._readableState) {
                this._readableState.destroyed = true;
            }
            if (this._writableState) {
                this._writableState.destroyed = true;
            }
            this._destroy(err || null, function(err) {
                if (!cb && err) {
                    pna.nextTick(emitErrorNT, _this, err);
                    if (_this._writableState) {
                        _this._writableState.errorEmitted = true;
                    }
                } else if (cb) {
                    cb(err);
                }
            });
            return this;
        }
        function undestroy() {
            if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
            }
            if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
            }
        }
        function emitErrorNT(self, err) {
            self.emit("error", err);
        }
        module.exports = {
            destroy: destroy,
            undestroy: undestroy
        };
    }, {
        26: 26
    } ],
    36: [ function(_dereq_, module, exports) {
        module.exports = _dereq_(8).EventEmitter;
    }, {
        8: 8
    } ],
    37: [ function(_dereq_, module, exports) {
        var toString = {}.toString;
        module.exports = Array.isArray || function(arr) {
            return toString.call(arr) == "[object Array]";
        };
    }, {} ],
    38: [ function(_dereq_, module, exports) {
        arguments[4][10][0].apply(exports, arguments);
    }, {
        10: 10,
        43: 43
    } ],
    39: [ function(_dereq_, module, exports) {
        module.exports = _dereq_(40).PassThrough;
    }, {
        40: 40
    } ],
    40: [ function(_dereq_, module, exports) {
        exports = module.exports = _dereq_(31);
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = _dereq_(33);
        exports.Duplex = _dereq_(29);
        exports.Transform = _dereq_(32);
        exports.PassThrough = _dereq_(30);
    }, {
        29: 29,
        30: 30,
        31: 31,
        32: 32,
        33: 33
    } ],
    41: [ function(_dereq_, module, exports) {
        module.exports = _dereq_(40).Transform;
    }, {
        40: 40
    } ],
    42: [ function(_dereq_, module, exports) {
        module.exports = _dereq_(33);
    }, {
        33: 33
    } ],
    43: [ function(_dereq_, module, exports) {
        var buffer = _dereq_(12);
        var Buffer = buffer.Buffer;
        function copyProps(src, dst) {
            for (var key in src) {
                dst[key] = src[key];
            }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer;
        } else {
            copyProps(buffer, exports);
            exports.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length);
        }
        copyProps(Buffer, SafeBuffer);
        SafeBuffer.from = function(arg, encodingOrOffset, length) {
            if (typeof arg === "number") {
                throw new TypeError("Argument must not be a number");
            }
            return Buffer(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function(size, fill, encoding) {
            if (typeof size !== "number") {
                throw new TypeError("Argument must be a number");
            }
            var buf = Buffer(size);
            if (fill !== undefined) {
                if (typeof encoding === "string") {
                    buf.fill(fill, encoding);
                } else {
                    buf.fill(fill);
                }
            } else {
                buf.fill(0);
            }
            return buf;
        };
        SafeBuffer.allocUnsafe = function(size) {
            if (typeof size !== "number") {
                throw new TypeError("Argument must be a number");
            }
            return Buffer(size);
        };
        SafeBuffer.allocUnsafeSlow = function(size) {
            if (typeof size !== "number") {
                throw new TypeError("Argument must be a number");
            }
            return buffer.SlowBuffer(size);
        };
    }, {
        12: 12
    } ],
    44: [ function(_dereq_, module, exports) {
        (function(Buffer) {
            (function(sax) {
                sax.parser = function(strict, opt) {
                    return new SAXParser(strict, opt);
                };
                sax.SAXParser = SAXParser;
                sax.SAXStream = SAXStream;
                sax.createStream = createStream;
                sax.MAX_BUFFER_LENGTH = 64 * 1024;
                var buffers = [ "comment", "sgmlDecl", "textNode", "tagName", "doctype", "procInstName", "procInstBody", "entity", "attribName", "attribValue", "cdata", "script" ];
                sax.EVENTS = [ "text", "processinginstruction", "sgmldeclaration", "doctype", "comment", "opentagstart", "attribute", "opentag", "closetag", "opencdata", "cdata", "closecdata", "error", "end", "ready", "script", "opennamespace", "closenamespace" ];
                function SAXParser(strict, opt) {
                    if (!(this instanceof SAXParser)) {
                        return new SAXParser(strict, opt);
                    }
                    var parser = this;
                    clearBuffers(parser);
                    parser.q = parser.c = "";
                    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
                    parser.opt = opt || {};
                    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
                    parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
                    parser.tags = [];
                    parser.closed = parser.closedRoot = parser.sawRoot = false;
                    parser.tag = parser.error = null;
                    parser.strict = !!strict;
                    parser.noscript = !!(strict || parser.opt.noscript);
                    parser.state = S.BEGIN;
                    parser.strictEntities = parser.opt.strictEntities;
                    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
                    parser.attribList = [];
                    if (parser.opt.xmlns) {
                        parser.ns = Object.create(rootNS);
                    }
                    parser.trackPosition = parser.opt.position !== false;
                    if (parser.trackPosition) {
                        parser.position = parser.line = parser.column = 0;
                    }
                    emit(parser, "onready");
                }
                if (!Object.create) {
                    Object.create = function(o) {
                        function F() {}
                        F.prototype = o;
                        var newf = new F();
                        return newf;
                    };
                }
                if (!Object.keys) {
                    Object.keys = function(o) {
                        var a = [];
                        for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
                        return a;
                    };
                }
                function checkBufferLength(parser) {
                    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
                    var maxActual = 0;
                    for (var i = 0, l = buffers.length; i < l; i++) {
                        var len = parser[buffers[i]].length;
                        if (len > maxAllowed) {
                            switch (buffers[i]) {
                              case "textNode":
                                closeText(parser);
                                break;

                              case "cdata":
                                emitNode(parser, "oncdata", parser.cdata);
                                parser.cdata = "";
                                break;

                              case "script":
                                emitNode(parser, "onscript", parser.script);
                                parser.script = "";
                                break;

                              default:
                                error(parser, "Max buffer length exceeded: " + buffers[i]);
                            }
                        }
                        maxActual = Math.max(maxActual, len);
                    }
                    var m = sax.MAX_BUFFER_LENGTH - maxActual;
                    parser.bufferCheckPosition = m + parser.position;
                }
                function clearBuffers(parser) {
                    for (var i = 0, l = buffers.length; i < l; i++) {
                        parser[buffers[i]] = "";
                    }
                }
                function flushBuffers(parser) {
                    closeText(parser);
                    if (parser.cdata !== "") {
                        emitNode(parser, "oncdata", parser.cdata);
                        parser.cdata = "";
                    }
                    if (parser.script !== "") {
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                    }
                }
                SAXParser.prototype = {
                    end: function() {
                        end(this);
                    },
                    write: write,
                    resume: function() {
                        this.error = null;
                        return this;
                    },
                    close: function() {
                        return this.write(null);
                    },
                    flush: function() {
                        flushBuffers(this);
                    }
                };
                var Stream;
                try {
                    Stream = _dereq_(9).Stream;
                } catch (ex) {
                    Stream = function() {};
                }
                var streamWraps = sax.EVENTS.filter(function(ev) {
                    return ev !== "error" && ev !== "end";
                });
                function createStream(strict, opt) {
                    return new SAXStream(strict, opt);
                }
                function SAXStream(strict, opt) {
                    if (!(this instanceof SAXStream)) {
                        return new SAXStream(strict, opt);
                    }
                    Stream.apply(this);
                    this._parser = new SAXParser(strict, opt);
                    this.writable = true;
                    this.readable = true;
                    var me = this;
                    this._parser.onend = function() {
                        me.emit("end");
                    };
                    this._parser.onerror = function(er) {
                        me.emit("error", er);
                        me._parser.error = null;
                    };
                    this._decoder = null;
                    streamWraps.forEach(function(ev) {
                        Object.defineProperty(me, "on" + ev, {
                            get: function() {
                                return me._parser["on" + ev];
                            },
                            set: function(h) {
                                if (!h) {
                                    me.removeAllListeners(ev);
                                    me._parser["on" + ev] = h;
                                    return h;
                                }
                                me.on(ev, h);
                            },
                            enumerable: true,
                            configurable: false
                        });
                    });
                }
                SAXStream.prototype = Object.create(Stream.prototype, {
                    constructor: {
                        value: SAXStream
                    }
                });
                SAXStream.prototype.write = function(data) {
                    if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
                        if (!this._decoder) {
                            var SD = _dereq_(10).StringDecoder;
                            this._decoder = new SD("utf8");
                        }
                        data = this._decoder.write(data);
                    }
                    this._parser.write(data.toString());
                    this.emit("data", data);
                    return true;
                };
                SAXStream.prototype.end = function(chunk) {
                    if (chunk && chunk.length) {
                        this.write(chunk);
                    }
                    this._parser.end();
                    return true;
                };
                SAXStream.prototype.on = function(ev, handler) {
                    var me = this;
                    if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
                        me._parser["on" + ev] = function() {
                            var args = arguments.length === 1 ? [ arguments[0] ] : Array.apply(null, arguments);
                            args.splice(0, 0, ev);
                            me.emit.apply(me, args);
                        };
                    }
                    return Stream.prototype.on.call(me, ev, handler);
                };
                var whitespace = "\r\n\t ";
                var number = "0124356789";
                var letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
                var quote = "'\"";
                var attribEnd = whitespace + ">";
                var CDATA = "[CDATA[";
                var DOCTYPE = "DOCTYPE";
                var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
                var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
                var rootNS = {
                    xml: XML_NAMESPACE,
                    xmlns: XMLNS_NAMESPACE
                };
                whitespace = charClass(whitespace);
                number = charClass(number);
                letter = charClass(letter);
                var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
                var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;
                var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
                var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;
                quote = charClass(quote);
                attribEnd = charClass(attribEnd);
                function charClass(str) {
                    return str.split("").reduce(function(s, c) {
                        s[c] = true;
                        return s;
                    }, {});
                }
                function isRegExp(c) {
                    return Object.prototype.toString.call(c) === "[object RegExp]";
                }
                function is(charclass, c) {
                    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c];
                }
                function not(charclass, c) {
                    return !is(charclass, c);
                }
                var S = 0;
                sax.STATE = {
                    BEGIN: S++,
                    BEGIN_WHITESPACE: S++,
                    TEXT: S++,
                    TEXT_ENTITY: S++,
                    OPEN_WAKA: S++,
                    SGML_DECL: S++,
                    SGML_DECL_QUOTED: S++,
                    DOCTYPE: S++,
                    DOCTYPE_QUOTED: S++,
                    DOCTYPE_DTD: S++,
                    DOCTYPE_DTD_QUOTED: S++,
                    COMMENT_STARTING: S++,
                    COMMENT: S++,
                    COMMENT_ENDING: S++,
                    COMMENT_ENDED: S++,
                    CDATA: S++,
                    CDATA_ENDING: S++,
                    CDATA_ENDING_2: S++,
                    PROC_INST: S++,
                    PROC_INST_BODY: S++,
                    PROC_INST_ENDING: S++,
                    OPEN_TAG: S++,
                    OPEN_TAG_SLASH: S++,
                    ATTRIB: S++,
                    ATTRIB_NAME: S++,
                    ATTRIB_NAME_SAW_WHITE: S++,
                    ATTRIB_VALUE: S++,
                    ATTRIB_VALUE_QUOTED: S++,
                    ATTRIB_VALUE_CLOSED: S++,
                    ATTRIB_VALUE_UNQUOTED: S++,
                    ATTRIB_VALUE_ENTITY_Q: S++,
                    ATTRIB_VALUE_ENTITY_U: S++,
                    CLOSE_TAG: S++,
                    CLOSE_TAG_SAW_WHITE: S++,
                    SCRIPT: S++,
                    SCRIPT_ENDING: S++
                };
                sax.XML_ENTITIES = {
                    amp: "&",
                    gt: ">",
                    lt: "<",
                    quot: '"',
                    apos: "'"
                };
                sax.ENTITIES = {
                    amp: "&",
                    gt: ">",
                    lt: "<",
                    quot: '"',
                    apos: "'",
                    AElig: 198,
                    Aacute: 193,
                    Acirc: 194,
                    Agrave: 192,
                    Aring: 197,
                    Atilde: 195,
                    Auml: 196,
                    Ccedil: 199,
                    ETH: 208,
                    Eacute: 201,
                    Ecirc: 202,
                    Egrave: 200,
                    Euml: 203,
                    Iacute: 205,
                    Icirc: 206,
                    Igrave: 204,
                    Iuml: 207,
                    Ntilde: 209,
                    Oacute: 211,
                    Ocirc: 212,
                    Ograve: 210,
                    Oslash: 216,
                    Otilde: 213,
                    Ouml: 214,
                    THORN: 222,
                    Uacute: 218,
                    Ucirc: 219,
                    Ugrave: 217,
                    Uuml: 220,
                    Yacute: 221,
                    aacute: 225,
                    acirc: 226,
                    aelig: 230,
                    agrave: 224,
                    aring: 229,
                    atilde: 227,
                    auml: 228,
                    ccedil: 231,
                    eacute: 233,
                    ecirc: 234,
                    egrave: 232,
                    eth: 240,
                    euml: 235,
                    iacute: 237,
                    icirc: 238,
                    igrave: 236,
                    iuml: 239,
                    ntilde: 241,
                    oacute: 243,
                    ocirc: 244,
                    ograve: 242,
                    oslash: 248,
                    otilde: 245,
                    ouml: 246,
                    szlig: 223,
                    thorn: 254,
                    uacute: 250,
                    ucirc: 251,
                    ugrave: 249,
                    uuml: 252,
                    yacute: 253,
                    yuml: 255,
                    copy: 169,
                    reg: 174,
                    nbsp: 160,
                    iexcl: 161,
                    cent: 162,
                    pound: 163,
                    curren: 164,
                    yen: 165,
                    brvbar: 166,
                    sect: 167,
                    uml: 168,
                    ordf: 170,
                    laquo: 171,
                    not: 172,
                    shy: 173,
                    macr: 175,
                    deg: 176,
                    plusmn: 177,
                    sup1: 185,
                    sup2: 178,
                    sup3: 179,
                    acute: 180,
                    micro: 181,
                    para: 182,
                    middot: 183,
                    cedil: 184,
                    ordm: 186,
                    raquo: 187,
                    frac14: 188,
                    frac12: 189,
                    frac34: 190,
                    iquest: 191,
                    times: 215,
                    divide: 247,
                    OElig: 338,
                    oelig: 339,
                    Scaron: 352,
                    scaron: 353,
                    Yuml: 376,
                    fnof: 402,
                    circ: 710,
                    tilde: 732,
                    Alpha: 913,
                    Beta: 914,
                    Gamma: 915,
                    Delta: 916,
                    Epsilon: 917,
                    Zeta: 918,
                    Eta: 919,
                    Theta: 920,
                    Iota: 921,
                    Kappa: 922,
                    Lambda: 923,
                    Mu: 924,
                    Nu: 925,
                    Xi: 926,
                    Omicron: 927,
                    Pi: 928,
                    Rho: 929,
                    Sigma: 931,
                    Tau: 932,
                    Upsilon: 933,
                    Phi: 934,
                    Chi: 935,
                    Psi: 936,
                    Omega: 937,
                    alpha: 945,
                    beta: 946,
                    gamma: 947,
                    delta: 948,
                    epsilon: 949,
                    zeta: 950,
                    eta: 951,
                    theta: 952,
                    iota: 953,
                    kappa: 954,
                    lambda: 955,
                    mu: 956,
                    nu: 957,
                    xi: 958,
                    omicron: 959,
                    pi: 960,
                    rho: 961,
                    sigmaf: 962,
                    sigma: 963,
                    tau: 964,
                    upsilon: 965,
                    phi: 966,
                    chi: 967,
                    psi: 968,
                    omega: 969,
                    thetasym: 977,
                    upsih: 978,
                    piv: 982,
                    ensp: 8194,
                    emsp: 8195,
                    thinsp: 8201,
                    zwnj: 8204,
                    zwj: 8205,
                    lrm: 8206,
                    rlm: 8207,
                    ndash: 8211,
                    mdash: 8212,
                    lsquo: 8216,
                    rsquo: 8217,
                    sbquo: 8218,
                    ldquo: 8220,
                    rdquo: 8221,
                    bdquo: 8222,
                    dagger: 8224,
                    Dagger: 8225,
                    bull: 8226,
                    hellip: 8230,
                    permil: 8240,
                    prime: 8242,
                    Prime: 8243,
                    lsaquo: 8249,
                    rsaquo: 8250,
                    oline: 8254,
                    frasl: 8260,
                    euro: 8364,
                    image: 8465,
                    weierp: 8472,
                    real: 8476,
                    trade: 8482,
                    alefsym: 8501,
                    larr: 8592,
                    uarr: 8593,
                    rarr: 8594,
                    darr: 8595,
                    harr: 8596,
                    crarr: 8629,
                    lArr: 8656,
                    uArr: 8657,
                    rArr: 8658,
                    dArr: 8659,
                    hArr: 8660,
                    forall: 8704,
                    part: 8706,
                    exist: 8707,
                    empty: 8709,
                    nabla: 8711,
                    isin: 8712,
                    notin: 8713,
                    ni: 8715,
                    prod: 8719,
                    sum: 8721,
                    minus: 8722,
                    lowast: 8727,
                    radic: 8730,
                    prop: 8733,
                    infin: 8734,
                    ang: 8736,
                    and: 8743,
                    or: 8744,
                    cap: 8745,
                    cup: 8746,
                    int: 8747,
                    there4: 8756,
                    sim: 8764,
                    cong: 8773,
                    asymp: 8776,
                    ne: 8800,
                    equiv: 8801,
                    le: 8804,
                    ge: 8805,
                    sub: 8834,
                    sup: 8835,
                    nsub: 8836,
                    sube: 8838,
                    supe: 8839,
                    oplus: 8853,
                    otimes: 8855,
                    perp: 8869,
                    sdot: 8901,
                    lceil: 8968,
                    rceil: 8969,
                    lfloor: 8970,
                    rfloor: 8971,
                    lang: 9001,
                    rang: 9002,
                    loz: 9674,
                    spades: 9824,
                    clubs: 9827,
                    hearts: 9829,
                    diams: 9830
                };
                Object.keys(sax.ENTITIES).forEach(function(key) {
                    var e = sax.ENTITIES[key];
                    var s = typeof e === "number" ? String.fromCharCode(e) : e;
                    sax.ENTITIES[key] = s;
                });
                for (var s in sax.STATE) {
                    sax.STATE[sax.STATE[s]] = s;
                }
                S = sax.STATE;
                function emit(parser, event, data) {
                    parser[event] && parser[event](data);
                }
                function emitNode(parser, nodeType, data) {
                    if (parser.textNode) closeText(parser);
                    emit(parser, nodeType, data);
                }
                function closeText(parser) {
                    parser.textNode = textopts(parser.opt, parser.textNode);
                    if (parser.textNode) emit(parser, "ontext", parser.textNode);
                    parser.textNode = "";
                }
                function textopts(opt, text) {
                    if (opt.trim) text = text.trim();
                    if (opt.normalize) text = text.replace(/\s+/g, " ");
                    return text;
                }
                function error(parser, er) {
                    closeText(parser);
                    if (parser.trackPosition) {
                        er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
                    }
                    er = new Error(er);
                    parser.error = er;
                    emit(parser, "onerror", er);
                    return parser;
                }
                function end(parser) {
                    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag");
                    if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
                        error(parser, "Unexpected end");
                    }
                    closeText(parser);
                    parser.c = "";
                    parser.closed = true;
                    emit(parser, "onend");
                    SAXParser.call(parser, parser.strict, parser.opt);
                    return parser;
                }
                function strictFail(parser, message) {
                    if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
                        throw new Error("bad call to strictFail");
                    }
                    if (parser.strict) {
                        error(parser, message);
                    }
                }
                function newTag(parser) {
                    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
                    var parent = parser.tags[parser.tags.length - 1] || parser;
                    var tag = parser.tag = {
                        name: parser.tagName,
                        attributes: {}
                    };
                    if (parser.opt.xmlns) {
                        tag.ns = parent.ns;
                    }
                    parser.attribList.length = 0;
                    emitNode(parser, "onopentagstart", tag);
                }
                function qname(name, attribute) {
                    var i = name.indexOf(":");
                    var qualName = i < 0 ? [ "", name ] : name.split(":");
                    var prefix = qualName[0];
                    var local = qualName[1];
                    if (attribute && name === "xmlns") {
                        prefix = "xmlns";
                        local = "";
                    }
                    return {
                        prefix: prefix,
                        local: local
                    };
                }
                function attrib(parser) {
                    if (!parser.strict) {
                        parser.attribName = parser.attribName[parser.looseCase]();
                    }
                    if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                        parser.attribName = parser.attribValue = "";
                        return;
                    }
                    if (parser.opt.xmlns) {
                        var qn = qname(parser.attribName, true);
                        var prefix = qn.prefix;
                        var local = qn.local;
                        if (prefix === "xmlns") {
                            if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
                                strictFail(parser, "xml: prefix must be bound to " + XML_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                            } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
                                strictFail(parser, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                            } else {
                                var tag = parser.tag;
                                var parent = parser.tags[parser.tags.length - 1] || parser;
                                if (tag.ns === parent.ns) {
                                    tag.ns = Object.create(parent.ns);
                                }
                                tag.ns[local] = parser.attribValue;
                            }
                        }
                        parser.attribList.push([ parser.attribName, parser.attribValue ]);
                    } else {
                        parser.tag.attributes[parser.attribName] = parser.attribValue;
                        emitNode(parser, "onattribute", {
                            name: parser.attribName,
                            value: parser.attribValue
                        });
                    }
                    parser.attribName = parser.attribValue = "";
                }
                function openTag(parser, selfClosing) {
                    if (parser.opt.xmlns) {
                        var tag = parser.tag;
                        var qn = qname(parser.tagName);
                        tag.prefix = qn.prefix;
                        tag.local = qn.local;
                        tag.uri = tag.ns[qn.prefix] || "";
                        if (tag.prefix && !tag.uri) {
                            strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                            tag.uri = qn.prefix;
                        }
                        var parent = parser.tags[parser.tags.length - 1] || parser;
                        if (tag.ns && parent.ns !== tag.ns) {
                            Object.keys(tag.ns).forEach(function(p) {
                                emitNode(parser, "onopennamespace", {
                                    prefix: p,
                                    uri: tag.ns[p]
                                });
                            });
                        }
                        for (var i = 0, l = parser.attribList.length; i < l; i++) {
                            var nv = parser.attribList[i];
                            var name = nv[0];
                            var value = nv[1];
                            var qualName = qname(name, true);
                            var prefix = qualName.prefix;
                            var local = qualName.local;
                            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
                            var a = {
                                name: name,
                                value: value,
                                prefix: prefix,
                                local: local,
                                uri: uri
                            };
                            if (prefix && prefix !== "xmlns" && !uri) {
                                strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                                a.uri = prefix;
                            }
                            parser.tag.attributes[name] = a;
                            emitNode(parser, "onattribute", a);
                        }
                        parser.attribList.length = 0;
                    }
                    parser.tag.isSelfClosing = !!selfClosing;
                    parser.sawRoot = true;
                    parser.tags.push(parser.tag);
                    emitNode(parser, "onopentag", parser.tag);
                    if (!selfClosing) {
                        if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
                            parser.state = S.SCRIPT;
                        } else {
                            parser.state = S.TEXT;
                        }
                        parser.tag = null;
                        parser.tagName = "";
                    }
                    parser.attribName = parser.attribValue = "";
                    parser.attribList.length = 0;
                }
                function closeTag(parser) {
                    if (!parser.tagName) {
                        strictFail(parser, "Weird empty close tag.");
                        parser.textNode += "</>";
                        parser.state = S.TEXT;
                        return;
                    }
                    if (parser.script) {
                        if (parser.tagName !== "script") {
                            parser.script += "</" + parser.tagName + ">";
                            parser.tagName = "";
                            parser.state = S.SCRIPT;
                            return;
                        }
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                    }
                    var t = parser.tags.length;
                    var tagName = parser.tagName;
                    if (!parser.strict) {
                        tagName = tagName[parser.looseCase]();
                    }
                    var closeTo = tagName;
                    while (t--) {
                        var close = parser.tags[t];
                        if (close.name !== closeTo) {
                            strictFail(parser, "Unexpected close tag");
                        } else {
                            break;
                        }
                    }
                    if (t < 0) {
                        strictFail(parser, "Unmatched closing tag: " + parser.tagName);
                        parser.textNode += "</" + parser.tagName + ">";
                        parser.state = S.TEXT;
                        return;
                    }
                    parser.tagName = tagName;
                    var s = parser.tags.length;
                    while (s-- > t) {
                        var tag = parser.tag = parser.tags.pop();
                        parser.tagName = parser.tag.name;
                        emitNode(parser, "onclosetag", parser.tagName);
                        var x = {};
                        for (var i in tag.ns) {
                            x[i] = tag.ns[i];
                        }
                        var parent = parser.tags[parser.tags.length - 1] || parser;
                        if (parser.opt.xmlns && tag.ns !== parent.ns) {
                            Object.keys(tag.ns).forEach(function(p) {
                                var n = tag.ns[p];
                                emitNode(parser, "onclosenamespace", {
                                    prefix: p,
                                    uri: n
                                });
                            });
                        }
                    }
                    if (t === 0) parser.closedRoot = true;
                    parser.tagName = parser.attribValue = parser.attribName = "";
                    parser.attribList.length = 0;
                    parser.state = S.TEXT;
                }
                function parseEntity(parser) {
                    var entity = parser.entity;
                    var entityLC = entity.toLowerCase();
                    var num;
                    var numStr = "";
                    if (parser.ENTITIES[entity]) {
                        return parser.ENTITIES[entity];
                    }
                    if (parser.ENTITIES[entityLC]) {
                        return parser.ENTITIES[entityLC];
                    }
                    entity = entityLC;
                    if (entity.charAt(0) === "#") {
                        if (entity.charAt(1) === "x") {
                            entity = entity.slice(2);
                            num = parseInt(entity, 16);
                            numStr = num.toString(16);
                        } else {
                            entity = entity.slice(1);
                            num = parseInt(entity, 10);
                            numStr = num.toString(10);
                        }
                    }
                    entity = entity.replace(/^0+/, "");
                    if (numStr.toLowerCase() !== entity) {
                        strictFail(parser, "Invalid character entity");
                        return "&" + parser.entity + ";";
                    }
                    return String.fromCodePoint(num);
                }
                function beginWhiteSpace(parser, c) {
                    if (c === "<") {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                    } else if (not(whitespace, c)) {
                        strictFail(parser, "Non-whitespace before first tag.");
                        parser.textNode = c;
                        parser.state = S.TEXT;
                    }
                }
                function charAt(chunk, i) {
                    var result = "";
                    if (i < chunk.length) {
                        result = chunk.charAt(i);
                    }
                    return result;
                }
                function write(chunk) {
                    var parser = this;
                    if (this.error) {
                        throw this.error;
                    }
                    if (parser.closed) {
                        return error(parser, "Cannot write after close. Assign an onready handler.");
                    }
                    if (chunk === null) {
                        return end(parser);
                    }
                    if (typeof chunk === "object") {
                        chunk = chunk.toString();
                    }
                    var i = 0;
                    var c = "";
                    while (true) {
                        c = charAt(chunk, i++);
                        parser.c = c;
                        if (!c) {
                            break;
                        }
                        if (parser.trackPosition) {
                            parser.position++;
                            if (c === "\n") {
                                parser.line++;
                                parser.column = 0;
                            } else {
                                parser.column++;
                            }
                        }
                        switch (parser.state) {
                          case S.BEGIN:
                            parser.state = S.BEGIN_WHITESPACE;
                            if (c === "\ufeff") {
                                continue;
                            }
                            beginWhiteSpace(parser, c);
                            continue;

                          case S.BEGIN_WHITESPACE:
                            beginWhiteSpace(parser, c);
                            continue;

                          case S.TEXT:
                            if (parser.sawRoot && !parser.closedRoot) {
                                var starti = i - 1;
                                while (c && c !== "<" && c !== "&") {
                                    c = charAt(chunk, i++);
                                    if (c && parser.trackPosition) {
                                        parser.position++;
                                        if (c === "\n") {
                                            parser.line++;
                                            parser.column = 0;
                                        } else {
                                            parser.column++;
                                        }
                                    }
                                }
                                parser.textNode += chunk.substring(starti, i - 1);
                            }
                            if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                                parser.state = S.OPEN_WAKA;
                                parser.startTagPosition = parser.position;
                            } else {
                                if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
                                    strictFail(parser, "Text data outside of root node.");
                                }
                                if (c === "&") {
                                    parser.state = S.TEXT_ENTITY;
                                } else {
                                    parser.textNode += c;
                                }
                            }
                            continue;

                          case S.SCRIPT:
                            if (c === "<") {
                                parser.state = S.SCRIPT_ENDING;
                            } else {
                                parser.script += c;
                            }
                            continue;

                          case S.SCRIPT_ENDING:
                            if (c === "/") {
                                parser.state = S.CLOSE_TAG;
                            } else {
                                parser.script += "<" + c;
                                parser.state = S.SCRIPT;
                            }
                            continue;

                          case S.OPEN_WAKA:
                            if (c === "!") {
                                parser.state = S.SGML_DECL;
                                parser.sgmlDecl = "";
                            } else if (is(whitespace, c)) {} else if (is(nameStart, c)) {
                                parser.state = S.OPEN_TAG;
                                parser.tagName = c;
                            } else if (c === "/") {
                                parser.state = S.CLOSE_TAG;
                                parser.tagName = "";
                            } else if (c === "?") {
                                parser.state = S.PROC_INST;
                                parser.procInstName = parser.procInstBody = "";
                            } else {
                                strictFail(parser, "Unencoded <");
                                if (parser.startTagPosition + 1 < parser.position) {
                                    var pad = parser.position - parser.startTagPosition;
                                    c = new Array(pad).join(" ") + c;
                                }
                                parser.textNode += "<" + c;
                                parser.state = S.TEXT;
                            }
                            continue;

                          case S.SGML_DECL:
                            if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                                emitNode(parser, "onopencdata");
                                parser.state = S.CDATA;
                                parser.sgmlDecl = "";
                                parser.cdata = "";
                            } else if (parser.sgmlDecl + c === "--") {
                                parser.state = S.COMMENT;
                                parser.comment = "";
                                parser.sgmlDecl = "";
                            } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                                parser.state = S.DOCTYPE;
                                if (parser.doctype || parser.sawRoot) {
                                    strictFail(parser, "Inappropriately located doctype declaration");
                                }
                                parser.doctype = "";
                                parser.sgmlDecl = "";
                            } else if (c === ">") {
                                emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                                parser.sgmlDecl = "";
                                parser.state = S.TEXT;
                            } else if (is(quote, c)) {
                                parser.state = S.SGML_DECL_QUOTED;
                                parser.sgmlDecl += c;
                            } else {
                                parser.sgmlDecl += c;
                            }
                            continue;

                          case S.SGML_DECL_QUOTED:
                            if (c === parser.q) {
                                parser.state = S.SGML_DECL;
                                parser.q = "";
                            }
                            parser.sgmlDecl += c;
                            continue;

                          case S.DOCTYPE:
                            if (c === ">") {
                                parser.state = S.TEXT;
                                emitNode(parser, "ondoctype", parser.doctype);
                                parser.doctype = true;
                            } else {
                                parser.doctype += c;
                                if (c === "[") {
                                    parser.state = S.DOCTYPE_DTD;
                                } else if (is(quote, c)) {
                                    parser.state = S.DOCTYPE_QUOTED;
                                    parser.q = c;
                                }
                            }
                            continue;

                          case S.DOCTYPE_QUOTED:
                            parser.doctype += c;
                            if (c === parser.q) {
                                parser.q = "";
                                parser.state = S.DOCTYPE;
                            }
                            continue;

                          case S.DOCTYPE_DTD:
                            parser.doctype += c;
                            if (c === "]") {
                                parser.state = S.DOCTYPE;
                            } else if (is(quote, c)) {
                                parser.state = S.DOCTYPE_DTD_QUOTED;
                                parser.q = c;
                            }
                            continue;

                          case S.DOCTYPE_DTD_QUOTED:
                            parser.doctype += c;
                            if (c === parser.q) {
                                parser.state = S.DOCTYPE_DTD;
                                parser.q = "";
                            }
                            continue;

                          case S.COMMENT:
                            if (c === "-") {
                                parser.state = S.COMMENT_ENDING;
                            } else {
                                parser.comment += c;
                            }
                            continue;

                          case S.COMMENT_ENDING:
                            if (c === "-") {
                                parser.state = S.COMMENT_ENDED;
                                parser.comment = textopts(parser.opt, parser.comment);
                                if (parser.comment) {
                                    emitNode(parser, "oncomment", parser.comment);
                                }
                                parser.comment = "";
                            } else {
                                parser.comment += "-" + c;
                                parser.state = S.COMMENT;
                            }
                            continue;

                          case S.COMMENT_ENDED:
                            if (c !== ">") {
                                strictFail(parser, "Malformed comment");
                                parser.comment += "--" + c;
                                parser.state = S.COMMENT;
                            } else {
                                parser.state = S.TEXT;
                            }
                            continue;

                          case S.CDATA:
                            if (c === "]") {
                                parser.state = S.CDATA_ENDING;
                            } else {
                                parser.cdata += c;
                            }
                            continue;

                          case S.CDATA_ENDING:
                            if (c === "]") {
                                parser.state = S.CDATA_ENDING_2;
                            } else {
                                parser.cdata += "]" + c;
                                parser.state = S.CDATA;
                            }
                            continue;

                          case S.CDATA_ENDING_2:
                            if (c === ">") {
                                if (parser.cdata) {
                                    emitNode(parser, "oncdata", parser.cdata);
                                }
                                emitNode(parser, "onclosecdata");
                                parser.cdata = "";
                                parser.state = S.TEXT;
                            } else if (c === "]") {
                                parser.cdata += "]";
                            } else {
                                parser.cdata += "]]" + c;
                                parser.state = S.CDATA;
                            }
                            continue;

                          case S.PROC_INST:
                            if (c === "?") {
                                parser.state = S.PROC_INST_ENDING;
                            } else if (is(whitespace, c)) {
                                parser.state = S.PROC_INST_BODY;
                            } else {
                                parser.procInstName += c;
                            }
                            continue;

                          case S.PROC_INST_BODY:
                            if (!parser.procInstBody && is(whitespace, c)) {
                                continue;
                            } else if (c === "?") {
                                parser.state = S.PROC_INST_ENDING;
                            } else {
                                parser.procInstBody += c;
                            }
                            continue;

                          case S.PROC_INST_ENDING:
                            if (c === ">") {
                                emitNode(parser, "onprocessinginstruction", {
                                    name: parser.procInstName,
                                    body: parser.procInstBody
                                });
                                parser.procInstName = parser.procInstBody = "";
                                parser.state = S.TEXT;
                            } else {
                                parser.procInstBody += "?" + c;
                                parser.state = S.PROC_INST_BODY;
                            }
                            continue;

                          case S.OPEN_TAG:
                            if (is(nameBody, c)) {
                                parser.tagName += c;
                            } else {
                                newTag(parser);
                                if (c === ">") {
                                    openTag(parser);
                                } else if (c === "/") {
                                    parser.state = S.OPEN_TAG_SLASH;
                                } else {
                                    if (not(whitespace, c)) {
                                        strictFail(parser, "Invalid character in tag name");
                                    }
                                    parser.state = S.ATTRIB;
                                }
                            }
                            continue;

                          case S.OPEN_TAG_SLASH:
                            if (c === ">") {
                                openTag(parser, true);
                                closeTag(parser);
                            } else {
                                strictFail(parser, "Forward-slash in opening tag not followed by >");
                                parser.state = S.ATTRIB;
                            }
                            continue;

                          case S.ATTRIB:
                            if (is(whitespace, c)) {
                                continue;
                            } else if (c === ">") {
                                openTag(parser);
                            } else if (c === "/") {
                                parser.state = S.OPEN_TAG_SLASH;
                            } else if (is(nameStart, c)) {
                                parser.attribName = c;
                                parser.attribValue = "";
                                parser.state = S.ATTRIB_NAME;
                            } else {
                                strictFail(parser, "Invalid attribute name");
                            }
                            continue;

                          case S.ATTRIB_NAME:
                            if (c === "=") {
                                parser.state = S.ATTRIB_VALUE;
                            } else if (c === ">") {
                                strictFail(parser, "Attribute without value");
                                parser.attribValue = parser.attribName;
                                attrib(parser);
                                openTag(parser);
                            } else if (is(whitespace, c)) {
                                parser.state = S.ATTRIB_NAME_SAW_WHITE;
                            } else if (is(nameBody, c)) {
                                parser.attribName += c;
                            } else {
                                strictFail(parser, "Invalid attribute name");
                            }
                            continue;

                          case S.ATTRIB_NAME_SAW_WHITE:
                            if (c === "=") {
                                parser.state = S.ATTRIB_VALUE;
                            } else if (is(whitespace, c)) {
                                continue;
                            } else {
                                strictFail(parser, "Attribute without value");
                                parser.tag.attributes[parser.attribName] = "";
                                parser.attribValue = "";
                                emitNode(parser, "onattribute", {
                                    name: parser.attribName,
                                    value: ""
                                });
                                parser.attribName = "";
                                if (c === ">") {
                                    openTag(parser);
                                } else if (is(nameStart, c)) {
                                    parser.attribName = c;
                                    parser.state = S.ATTRIB_NAME;
                                } else {
                                    strictFail(parser, "Invalid attribute name");
                                    parser.state = S.ATTRIB;
                                }
                            }
                            continue;

                          case S.ATTRIB_VALUE:
                            if (is(whitespace, c)) {
                                continue;
                            } else if (is(quote, c)) {
                                parser.q = c;
                                parser.state = S.ATTRIB_VALUE_QUOTED;
                            } else {
                                strictFail(parser, "Unquoted attribute value");
                                parser.state = S.ATTRIB_VALUE_UNQUOTED;
                                parser.attribValue = c;
                            }
                            continue;

                          case S.ATTRIB_VALUE_QUOTED:
                            if (c !== parser.q) {
                                if (c === "&") {
                                    parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                                } else {
                                    parser.attribValue += c;
                                }
                                continue;
                            }
                            attrib(parser);
                            parser.q = "";
                            parser.state = S.ATTRIB_VALUE_CLOSED;
                            continue;

                          case S.ATTRIB_VALUE_CLOSED:
                            if (is(whitespace, c)) {
                                parser.state = S.ATTRIB;
                            } else if (c === ">") {
                                openTag(parser);
                            } else if (c === "/") {
                                parser.state = S.OPEN_TAG_SLASH;
                            } else if (is(nameStart, c)) {
                                strictFail(parser, "No whitespace between attributes");
                                parser.attribName = c;
                                parser.attribValue = "";
                                parser.state = S.ATTRIB_NAME;
                            } else {
                                strictFail(parser, "Invalid attribute name");
                            }
                            continue;

                          case S.ATTRIB_VALUE_UNQUOTED:
                            if (not(attribEnd, c)) {
                                if (c === "&") {
                                    parser.state = S.ATTRIB_VALUE_ENTITY_U;
                                } else {
                                    parser.attribValue += c;
                                }
                                continue;
                            }
                            attrib(parser);
                            if (c === ">") {
                                openTag(parser);
                            } else {
                                parser.state = S.ATTRIB;
                            }
                            continue;

                          case S.CLOSE_TAG:
                            if (!parser.tagName) {
                                if (is(whitespace, c)) {
                                    continue;
                                } else if (not(nameStart, c)) {
                                    if (parser.script) {
                                        parser.script += "</" + c;
                                        parser.state = S.SCRIPT;
                                    } else {
                                        strictFail(parser, "Invalid tagname in closing tag.");
                                    }
                                } else {
                                    parser.tagName = c;
                                }
                            } else if (c === ">") {
                                closeTag(parser);
                            } else if (is(nameBody, c)) {
                                parser.tagName += c;
                            } else if (parser.script) {
                                parser.script += "</" + parser.tagName;
                                parser.tagName = "";
                                parser.state = S.SCRIPT;
                            } else {
                                if (not(whitespace, c)) {
                                    strictFail(parser, "Invalid tagname in closing tag");
                                }
                                parser.state = S.CLOSE_TAG_SAW_WHITE;
                            }
                            continue;

                          case S.CLOSE_TAG_SAW_WHITE:
                            if (is(whitespace, c)) {
                                continue;
                            }
                            if (c === ">") {
                                closeTag(parser);
                            } else {
                                strictFail(parser, "Invalid characters in closing tag");
                            }
                            continue;

                          case S.TEXT_ENTITY:
                          case S.ATTRIB_VALUE_ENTITY_Q:
                          case S.ATTRIB_VALUE_ENTITY_U:
                            var returnState;
                            var buffer;
                            switch (parser.state) {
                              case S.TEXT_ENTITY:
                                returnState = S.TEXT;
                                buffer = "textNode";
                                break;

                              case S.ATTRIB_VALUE_ENTITY_Q:
                                returnState = S.ATTRIB_VALUE_QUOTED;
                                buffer = "attribValue";
                                break;

                              case S.ATTRIB_VALUE_ENTITY_U:
                                returnState = S.ATTRIB_VALUE_UNQUOTED;
                                buffer = "attribValue";
                                break;
                            }
                            if (c === ";") {
                                parser[buffer] += parseEntity(parser);
                                parser.entity = "";
                                parser.state = returnState;
                            } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
                                parser.entity += c;
                            } else {
                                strictFail(parser, "Invalid character in entity name");
                                parser[buffer] += "&" + parser.entity + c;
                                parser.entity = "";
                                parser.state = returnState;
                            }
                            continue;

                          default:
                            throw new Error(parser, "Unknown state: " + parser.state);
                        }
                    }
                    if (parser.position >= parser.bufferCheckPosition) {
                        checkBufferLength(parser);
                    }
                    return parser;
                }
                if (!String.fromCodePoint) {
                    (function() {
                        var stringFromCharCode = String.fromCharCode;
                        var floor = Math.floor;
                        var fromCodePoint = function() {
                            var MAX_SIZE = 16384;
                            var codeUnits = [];
                            var highSurrogate;
                            var lowSurrogate;
                            var index = -1;
                            var length = arguments.length;
                            if (!length) {
                                return "";
                            }
                            var result = "";
                            while (++index < length) {
                                var codePoint = Number(arguments[index]);
                                if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {
                                    throw RangeError("Invalid code point: " + codePoint);
                                }
                                if (codePoint <= 65535) {
                                    codeUnits.push(codePoint);
                                } else {
                                    codePoint -= 65536;
                                    highSurrogate = (codePoint >> 10) + 55296;
                                    lowSurrogate = codePoint % 1024 + 56320;
                                    codeUnits.push(highSurrogate, lowSurrogate);
                                }
                                if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                                    result += stringFromCharCode.apply(null, codeUnits);
                                    codeUnits.length = 0;
                                }
                            }
                            return result;
                        };
                        if (Object.defineProperty) {
                            Object.defineProperty(String, "fromCodePoint", {
                                value: fromCodePoint,
                                configurable: true,
                                writable: true
                            });
                        } else {
                            String.fromCodePoint = fromCodePoint;
                        }
                    })();
                }
            })(typeof exports === "undefined" ? this.sax = {} : exports);
        }).call(this, _dereq_(12).Buffer);
    }, {
        10: 10,
        12: 12,
        9: 9
    } ],
    45: [ function(_dereq_, module, exports) {
        (function(global) {
            module.exports = deprecate;
            function deprecate(fn, msg) {
                if (config("noDeprecation")) {
                    return fn;
                }
                var warned = false;
                function deprecated() {
                    if (!warned) {
                        if (config("throwDeprecation")) {
                            throw new Error(msg);
                        } else if (config("traceDeprecation")) {
                            console.trace(msg);
                        } else {
                            console.warn(msg);
                        }
                        warned = true;
                    }
                    return fn.apply(this, arguments);
                }
                return deprecated;
            }
            function config(name) {
                try {
                    if (!global.localStorage) return false;
                } catch (_) {
                    return false;
                }
                var val = global.localStorage[name];
                if (null == val) return false;
                return String(val).toLowerCase() === "true";
            }
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {} ],
    46: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _EventBus = _dereq_(47);
        var _EventBus2 = _interopRequireDefault(_EventBus);
        var _eventsEvents = _dereq_(55);
        var _eventsEvents2 = _interopRequireDefault(_eventsEvents);
        var _FactoryMaker = _dereq_(48);
        var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
        var _Settings = _dereq_(49);
        var _Settings2 = _interopRequireDefault(_Settings);
        var LOG_LEVEL_NONE = 0;
        var LOG_LEVEL_FATAL = 1;
        var LOG_LEVEL_ERROR = 2;
        var LOG_LEVEL_WARNING = 3;
        var LOG_LEVEL_INFO = 4;
        var LOG_LEVEL_DEBUG = 5;
        function Debug() {
            var context = this.context;
            var eventBus = (0, _EventBus2["default"])(context).getInstance();
            var settings = (0, _Settings2["default"])(context).getInstance();
            var logFn = [];
            var instance = undefined, showLogTimestamp = undefined, showCalleeName = undefined, startTime = undefined;
            function setup() {
                showLogTimestamp = true;
                showCalleeName = true;
                startTime = new Date().getTime();
                if (typeof window !== "undefined" && window.console) {
                    logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);
                    logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);
                    logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);
                    logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);
                    logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);
                }
            }
            function getLogFn(fn) {
                if (fn && fn.bind) {
                    return fn.bind(window.console);
                }
                return window.console.log.bind(window.console);
            }
            function getLogger(instance) {
                return {
                    fatal: fatal.bind(instance),
                    error: error.bind(instance),
                    warn: warn.bind(instance),
                    info: info.bind(instance),
                    debug: debug.bind(instance)
                };
            }
            function setLogLevel(value) {
                var s = {
                    debug: {
                        logLevel: value
                    }
                };
                settings.update(s);
            }
            function getLogLevel() {
                return settings.get().debug.logLevel;
            }
            function setLogTimestampVisible(value) {
                showLogTimestamp = value;
            }
            function setCalleeNameVisible(value) {
                showCalleeName = value;
            }
            function setLogToBrowserConsole(value) {
                var s = undefined;
                if (value) {
                    s = {
                        debug: {
                            logLevel: LOG_LEVEL_DEBUG
                        }
                    };
                } else {
                    s = {
                        debug: {
                            logLevel: LOG_LEVEL_NONE
                        }
                    };
                }
                settings.update(s);
            }
            function getLogToBrowserConsole() {
                return settings.get().debug.logLevel !== LOG_LEVEL_NONE;
            }
            function fatal() {
                for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
                    params[_key] = arguments[_key];
                }
                doLog.apply(undefined, [ LOG_LEVEL_FATAL, this ].concat(params));
            }
            function error() {
                for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    params[_key2] = arguments[_key2];
                }
                doLog.apply(undefined, [ LOG_LEVEL_ERROR, this ].concat(params));
            }
            function warn() {
                for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    params[_key3] = arguments[_key3];
                }
                doLog.apply(undefined, [ LOG_LEVEL_WARNING, this ].concat(params));
            }
            function info() {
                for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    params[_key4] = arguments[_key4];
                }
                doLog.apply(undefined, [ LOG_LEVEL_INFO, this ].concat(params));
            }
            function debug() {
                for (var _len5 = arguments.length, params = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    params[_key5] = arguments[_key5];
                }
                doLog.apply(undefined, [ LOG_LEVEL_DEBUG, this ].concat(params));
            }
            function doLog(level, _this) {
                var message = "";
                var logTime = null;
                if (showLogTimestamp) {
                    logTime = new Date().getTime();
                    message += "[" + (logTime - startTime) + "]";
                }
                if (showCalleeName && _this && _this.getClassName) {
                    message += "[" + _this.getClassName() + "]";
                    if (_this.getType) {
                        message += "[" + _this.getType() + "]";
                    }
                }
                if (message.length > 0) {
                    message += " ";
                }
                for (var _len6 = arguments.length, params = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
                    params[_key6 - 2] = arguments[_key6];
                }
                Array.apply(null, params).forEach(function(item) {
                    message += item + " ";
                });
                if (logFn[level] && settings.get().debug.logLevel >= level) {
                    logFn[level](message);
                }
                eventBus.trigger(_eventsEvents2["default"].LOG, {
                    message: message,
                    level: level
                });
            }
            instance = {
                getLogger: getLogger,
                setLogTimestampVisible: setLogTimestampVisible,
                setCalleeNameVisible: setCalleeNameVisible,
                setLogToBrowserConsole: setLogToBrowserConsole,
                getLogToBrowserConsole: getLogToBrowserConsole,
                setLogLevel: setLogLevel,
                getLogLevel: getLogLevel
            };
            setup();
            return instance;
        }
        Debug.__dashjs_factory_name = "Debug";
        var factory = _FactoryMaker2["default"].getSingletonFactory(Debug);
        factory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;
        factory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;
        factory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;
        factory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;
        factory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;
        factory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;
        _FactoryMaker2["default"].updateSingletonFactory(Debug.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        47: 47,
        48: 48,
        49: 49,
        55: 55
    } ],
    47: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _FactoryMaker = _dereq_(48);
        var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
        var EVENT_PRIORITY_LOW = 0;
        var EVENT_PRIORITY_HIGH = 5e3;
        function EventBus() {
            var handlers = {};
            function on(type, listener, scope) {
                var priority = arguments.length <= 3 || arguments[3] === undefined ? EVENT_PRIORITY_LOW : arguments[3];
                if (!type) {
                    throw new Error("event type cannot be null or undefined");
                }
                if (!listener || typeof listener !== "function") {
                    throw new Error("listener must be a function: " + listener);
                }
                if (getHandlerIdx(type, listener, scope) >= 0) return;
                handlers[type] = handlers[type] || [];
                var handler = {
                    callback: listener,
                    scope: scope,
                    priority: priority
                };
                var inserted = handlers[type].some(function(item, idx) {
                    if (item && priority > item.priority) {
                        handlers[type].splice(idx, 0, handler);
                        return true;
                    }
                });
                if (!inserted) {
                    handlers[type].push(handler);
                }
            }
            function off(type, listener, scope) {
                if (!type || !listener || !handlers[type]) return;
                var idx = getHandlerIdx(type, listener, scope);
                if (idx < 0) return;
                handlers[type][idx] = null;
            }
            function trigger(type, payload) {
                if (!type || !handlers[type]) return;
                payload = payload || {};
                if (payload.hasOwnProperty("type")) throw new Error("'type' is a reserved word for event dispatching");
                payload.type = type;
                handlers[type] = handlers[type].filter(function(item) {
                    return item;
                });
                handlers[type].forEach(function(handler) {
                    return handler && handler.callback.call(handler.scope, payload);
                });
            }
            function getHandlerIdx(type, listener, scope) {
                var idx = -1;
                if (!handlers[type]) return idx;
                handlers[type].some(function(item, index) {
                    if (item && item.callback === listener && (!scope || scope === item.scope)) {
                        idx = index;
                        return true;
                    }
                });
                return idx;
            }
            function reset() {
                handlers = {};
            }
            var instance = {
                on: on,
                off: off,
                trigger: trigger,
                reset: reset
            };
            return instance;
        }
        EventBus.__dashjs_factory_name = "EventBus";
        var factory = _FactoryMaker2["default"].getSingletonFactory(EventBus);
        factory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW;
        factory.EVENT_PRIORITY_HIGH = EVENT_PRIORITY_HIGH;
        _FactoryMaker2["default"].updateSingletonFactory(EventBus.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    48: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var FactoryMaker = function() {
            var instance = undefined;
            var singletonContexts = [];
            var singletonFactories = {};
            var classFactories = {};
            function extend(name, childInstance, override, context) {
                if (!context[name] && childInstance) {
                    context[name] = {
                        instance: childInstance,
                        override: override
                    };
                }
            }
            function getSingletonInstance(context, className) {
                for (var i in singletonContexts) {
                    var obj = singletonContexts[i];
                    if (obj.context === context && obj.name === className) {
                        return obj.instance;
                    }
                }
                return null;
            }
            function setSingletonInstance(context, className, instance) {
                for (var i in singletonContexts) {
                    var obj = singletonContexts[i];
                    if (obj.context === context && obj.name === className) {
                        singletonContexts[i].instance = instance;
                        return;
                    }
                }
                singletonContexts.push({
                    name: className,
                    context: context,
                    instance: instance
                });
            }
            function getFactoryByName(name, factoriesArray) {
                return factoriesArray[name];
            }
            function updateFactory(name, factory, factoriesArray) {
                if (name in factoriesArray) {
                    factoriesArray[name] = factory;
                }
            }
            function updateClassFactory(name, factory) {
                updateFactory(name, factory, classFactories);
            }
            function getClassFactoryByName(name) {
                return getFactoryByName(name, classFactories);
            }
            function getClassFactory(classConstructor) {
                var factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);
                if (!factory) {
                    factory = function(context) {
                        if (context === undefined) {
                            context = {};
                        }
                        return {
                            create: function create() {
                                return merge(classConstructor, context, arguments);
                            }
                        };
                    };
                    classFactories[classConstructor.__dashjs_factory_name] = factory;
                }
                return factory;
            }
            function updateSingletonFactory(name, factory) {
                updateFactory(name, factory, singletonFactories);
            }
            function getSingletonFactoryByName(name) {
                return getFactoryByName(name, singletonFactories);
            }
            function getSingletonFactory(classConstructor) {
                var factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);
                if (!factory) {
                    factory = function(context) {
                        var instance = undefined;
                        if (context === undefined) {
                            context = {};
                        }
                        return {
                            getInstance: function getInstance() {
                                if (!instance) {
                                    instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);
                                }
                                if (!instance) {
                                    instance = merge(classConstructor, context, arguments);
                                    singletonContexts.push({
                                        name: classConstructor.__dashjs_factory_name,
                                        context: context,
                                        instance: instance
                                    });
                                }
                                return instance;
                            }
                        };
                    };
                    singletonFactories[classConstructor.__dashjs_factory_name] = factory;
                }
                return factory;
            }
            function merge(classConstructor, context, args) {
                var classInstance = undefined;
                var className = classConstructor.__dashjs_factory_name;
                var extensionObject = context[className];
                if (extensionObject) {
                    var extension = extensionObject.instance;
                    if (extensionObject.override) {
                        classInstance = classConstructor.apply({
                            context: context
                        }, args);
                        extension = extension.apply({
                            context: context,
                            factory: instance,
                            parent: classInstance
                        }, args);
                        for (var prop in extension) {
                            if (classInstance.hasOwnProperty(prop)) {
                                classInstance[prop] = extension[prop];
                            }
                        }
                    } else {
                        return extension.apply({
                            context: context,
                            factory: instance
                        }, args);
                    }
                } else {
                    classInstance = classConstructor.apply({
                        context: context
                    }, args);
                }
                classInstance.getClassName = function() {
                    return className;
                };
                return classInstance;
            }
            instance = {
                extend: extend,
                getSingletonInstance: getSingletonInstance,
                setSingletonInstance: setSingletonInstance,
                getSingletonFactory: getSingletonFactory,
                getSingletonFactoryByName: getSingletonFactoryByName,
                updateSingletonFactory: updateSingletonFactory,
                getClassFactory: getClassFactory,
                getClassFactoryByName: getClassFactoryByName,
                updateClassFactory: updateClassFactory
            };
            return instance;
        }();
        exports["default"] = FactoryMaker;
        module.exports = exports["default"];
    }, {} ],
    49: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var _FactoryMaker = _dereq_(48);
        var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
        var _UtilsJs = _dereq_(50);
        var _UtilsJs2 = _interopRequireDefault(_UtilsJs);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _streamingVoMetricsHTTPRequest = _dereq_(237);
        function Settings() {
            var _retryIntervals, _retryAttempts;
            var instance = undefined;
            var defaultSettings = {
                debug: {
                    logLevel: _coreDebug2["default"].LOG_LEVEL_WARNING
                },
                streaming: {
                    metricsMaxListDepth: 1e3,
                    abandonLoadTimeout: 1e4,
                    liveDelayFragmentCount: 4,
                    liveDelay: null,
                    scheduleWhilePaused: true,
                    fastSwitchEnabled: false,
                    bufferPruningInterval: 10,
                    bufferToKeep: 20,
                    bufferAheadToKeep: 80,
                    jumpGaps: false,
                    smallGapLimit: .8,
                    stableBufferTime: 12,
                    bufferTimeAtTopQuality: 30,
                    bufferTimeAtTopQualityLongForm: 60,
                    longFormContentDurationThreshold: 600,
                    wallclockTimeUpdateInterval: 50,
                    lowLatencyEnabled: false,
                    keepProtectionMediaKeys: false,
                    useManifestDateHeaderTimeSource: true,
                    segmentOverlapToleranceTime: .2,
                    useSuggestedPresentationDelay: false,
                    manifestUpdateRetryInterval: 100,
                    liveCatchUpMinDrift: .02,
                    liveCatchUpMaxDrift: 0,
                    liveCatchUpPlaybackRate: .5,
                    lastBitrateCachingInfo: {
                        enabled: true,
                        ttl: 36e4
                    },
                    lastMediaSettingsCachingInfo: {
                        enabled: true,
                        ttl: 36e4
                    },
                    cacheLoadThresholds: {
                        video: 50,
                        audio: 5
                    },
                    retryIntervals: (_retryIntervals = {}, _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.MPD_TYPE, 500),
                    _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, 500),
                    _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 1e3),
                    _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, 1e3),
                    _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, 1e3),
                    _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, 1e3),
                    _defineProperty(_retryIntervals, _streamingVoMetricsHTTPRequest.HTTPRequest.OTHER_TYPE, 1e3),
                    _retryIntervals),
                    retryAttempts: (_retryAttempts = {}, _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.MPD_TYPE, 3),
                    _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, 1),
                    _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 3),
                    _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, 3),
                    _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, 3),
                    _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, 3),
                    _defineProperty(_retryAttempts, _streamingVoMetricsHTTPRequest.HTTPRequest.OTHER_TYPE, 3),
                    _retryAttempts),
                    abr: {
                        movingAverageMethod: _streamingConstantsConstants2["default"].MOVING_AVERAGE_SLIDING_WINDOW,
                        ABRStrategy: _streamingConstantsConstants2["default"].ABR_STRATEGY_DYNAMIC,
                        bandwidthSafetyFactor: .9,
                        useDefaultABRRules: true,
                        useBufferOccupancyABR: false,
                        useDeadTimeLatency: true,
                        limitBitrateByPortal: false,
                        usePixelRatioInLimitBitrateByPortal: false,
                        maxBitrate: {
                            audio: -1,
                            video: -1
                        },
                        minBitrate: {
                            audio: -1,
                            video: -1
                        },
                        maxRepresentationRatio: {
                            audio: 1,
                            video: 1
                        },
                        initialBitrate: {
                            audio: -1,
                            video: -1
                        },
                        initialRepresentationRatio: {
                            audio: -1,
                            video: -1
                        },
                        autoSwitchBitrate: {
                            audio: true,
                            video: true
                        }
                    }
                }
            };
            var settings = _UtilsJs2["default"].clone(defaultSettings);
            function mixinSettings(source, dest, path) {
                for (var n in source) {
                    if (source.hasOwnProperty(n)) {
                        if (dest.hasOwnProperty(n)) {
                            if (typeof source[n] === "object") {
                                mixinSettings(source[n], dest[n], path.slice() + n + ".");
                            } else {
                                dest[n] = _UtilsJs2["default"].clone(source[n]);
                            }
                        }
                    }
                }
            }
            function get() {
                return settings;
            }
            function update(settingsObj) {
                if (typeof settingsObj === "object") {
                    mixinSettings(settingsObj, settings, "");
                }
            }
            function reset() {
                settings = _UtilsJs2["default"].clone(defaultSettings);
            }
            instance = {
                get: get,
                update: update,
                reset: reset
            };
            return instance;
        }
        Settings.__dashjs_factory_name = "Settings";
        var factory = _FactoryMaker2["default"].getSingletonFactory(Settings);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        107: 107,
        237: 237,
        46: 46,
        48: 48,
        50: 50
    } ],
    50: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Utils = function() {
            function Utils() {
                _classCallCheck(this, Utils);
            }
            _createClass(Utils, null, [ {
                key: "mixin",
                value: function mixin(dest, source, copy) {
                    var s = undefined;
                    var empty = {};
                    if (dest) {
                        for (var _name in source) {
                            if (source.hasOwnProperty(_name)) {
                                s = source[_name];
                                if (!(_name in dest) || dest[_name] !== s && (!(_name in empty) || empty[_name] !== s)) {
                                    if (typeof dest[_name] === "object" && dest[_name] !== null) {
                                        dest[_name] = Utils.mixin(dest[_name], s, copy);
                                    } else {
                                        dest[_name] = copy(s);
                                    }
                                }
                            }
                        }
                    }
                    return dest;
                }
            }, {
                key: "clone",
                value: function clone(src) {
                    if (!src || typeof src !== "object") {
                        return src;
                    }
                    var r = undefined;
                    if (src instanceof Array) {
                        r = [];
                        for (var i = 0, l = src.length; i < l; ++i) {
                            if (i in src) {
                                r.push(Utils.clone(src[i]));
                            }
                        }
                    } else {
                        r = {};
                    }
                    return Utils.mixin(r, src, Utils.clone);
                }
            } ]);
            return Utils;
        }();
        exports["default"] = Utils;
        module.exports = exports["default"];
    }, {} ],
    51: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getVersionString = getVersionString;
        var VERSION = "3.0.0";
        function getVersionString() {
            return VERSION;
        }
    }, {} ],
    52: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _ErrorsBase2 = _dereq_(53);
        var _ErrorsBase3 = _interopRequireDefault(_ErrorsBase2);
        var Errors = function(_ErrorsBase) {
            _inherits(Errors, _ErrorsBase);
            function Errors() {
                _classCallCheck(this, Errors);
                _get(Object.getPrototypeOf(Errors.prototype), "constructor", this).call(this);
                this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10;
                this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11;
                this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12;
                this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;
                this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;
                this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;
                this.TIME_SYNC_FAILED_ERROR_CODE = 16;
                this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;
                this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;
                this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;
                this.APPEND_ERROR_CODE = 20;
                this.REMOVE_ERROR_CODE = 21;
                this.DATA_UPDATE_FAILED_ERROR_CODE = 22;
                this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23;
                this.CAPABILITY_MEDIAKEYS_ERROR_CODE = 24;
                this.DOWNLOAD_ERROR_ID_MANIFEST_CODE = 25;
                this.DOWNLOAD_ERROR_ID_MANIFEST = "manifest";
                this.DOWNLOAD_ERROR_ID_SIDX_CODE = 26;
                this.DOWNLOAD_ERROR_ID_CONTENT_CODE = 27;
                this.DOWNLOAD_ERROR_ID_CONTENT = "content";
                this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE = 28;
                this.DOWNLOAD_ERROR_ID_INITIALIZATION = "initialization";
                this.DOWNLOAD_ERROR_ID_XLINK_CODE = 29;
                this.DOWNLOAD_ERROR_ID_XLINK = "xlink";
                this.MANIFEST_ERROR_ID_CODEC_CODE = 30;
                this.MANIFEST_ERROR_ID_PARSE_CODE = 31;
                this.MANIFEST_ERROR_ID_NOSTREAMS_CODE = 32;
                this.TIMED_TEXT_ERROR_ID_PARSE_CODE = 33;
                this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE = 34;
                this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;
                this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = "parsing failed for ";
                this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = "Failed loading manifest: ";
                this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = "Failed loading Xlink element: ";
                this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = "Segments update failed";
                this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = "no segments are available yet";
                this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = "error loading segments";
                this.TIME_SYNC_FAILED_ERROR_MESSAGE = "Failed to synchronize time";
                this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = "request is null";
                this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = "Failed to resolve a valid URL";
                this.APPEND_ERROR_MESSAGE = "chunk is not defined";
                this.REMOVE_ERROR_MESSAGE = "buffer is not defined";
                this.DATA_UPDATE_FAILED_ERROR_MESSAGE = "Data update failed";
                this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = "mediasource is not supported";
                this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = "mediakeys is not supported";
                this.TIMED_TEXT_ERROR_MESSAGE_PARSE = "parsing error :";
                this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = "Error creating source buffer of type : ";
            }
            return Errors;
        }(_ErrorsBase3["default"]);
        var errors = new Errors();
        exports["default"] = errors;
        module.exports = exports["default"];
    }, {
        53: 53
    } ],
    53: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var ErrorsBase = function() {
            function ErrorsBase() {
                _classCallCheck(this, ErrorsBase);
            }
            _createClass(ErrorsBase, [ {
                key: "extend",
                value: function extend(errors, config) {
                    if (!errors) return;
                    var override = config ? config.override : false;
                    var publicOnly = config ? config.publicOnly : false;
                    for (var err in errors) {
                        if (!errors.hasOwnProperty(err) || this[err] && !override) continue;
                        if (publicOnly && errors[err].indexOf("public_") === -1) continue;
                        this[err] = errors[err];
                    }
                }
            } ]);
            return ErrorsBase;
        }();
        exports["default"] = ErrorsBase;
        module.exports = exports["default"];
    }, {} ],
    54: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _EventsBase2 = _dereq_(56);
        var _EventsBase3 = _interopRequireDefault(_EventsBase2);
        var CoreEvents = function(_EventsBase) {
            _inherits(CoreEvents, _EventsBase);
            function CoreEvents() {
                _classCallCheck(this, CoreEvents);
                _get(Object.getPrototypeOf(CoreEvents.prototype), "constructor", this).call(this);
                this.BUFFERING_COMPLETED = "bufferingCompleted";
                this.BUFFER_CLEARED = "bufferCleared";
                this.BUFFER_LEVEL_UPDATED = "bufferLevelUpdated";
                this.BYTES_APPENDED = "bytesAppended";
                this.BYTES_APPENDED_END_FRAGMENT = "bytesAppendedEndFragment";
                this.CHECK_FOR_EXISTENCE_COMPLETED = "checkForExistenceCompleted";
                this.CURRENT_TRACK_CHANGED = "currentTrackChanged";
                this.DATA_UPDATE_COMPLETED = "dataUpdateCompleted";
                this.DATA_UPDATE_STARTED = "dataUpdateStarted";
                this.INITIALIZATION_LOADED = "initializationLoaded";
                this.INIT_FRAGMENT_LOADED = "initFragmentLoaded";
                this.INIT_REQUESTED = "initRequested";
                this.INTERNAL_MANIFEST_LOADED = "internalManifestLoaded";
                this.LIVE_EDGE_SEARCH_COMPLETED = "liveEdgeSearchCompleted";
                this.LOADING_COMPLETED = "loadingCompleted";
                this.LOADING_PROGRESS = "loadingProgress";
                this.LOADING_DATA_PROGRESS = "loadingDataProgress";
                this.LOADING_ABANDONED = "loadingAborted";
                this.MANIFEST_UPDATED = "manifestUpdated";
                this.MEDIA_FRAGMENT_LOADED = "mediaFragmentLoaded";
                this.QUOTA_EXCEEDED = "quotaExceeded";
                this.REPRESENTATION_UPDATED = "representationUpdated";
                this.SEGMENTS_LOADED = "segmentsLoaded";
                this.SERVICE_LOCATION_BLACKLIST_ADD = "serviceLocationBlacklistAdd";
                this.SERVICE_LOCATION_BLACKLIST_CHANGED = "serviceLocationBlacklistChanged";
                this.SOURCEBUFFER_REMOVE_COMPLETED = "sourceBufferRemoveCompleted";
                this.STREAMS_COMPOSED = "streamsComposed";
                this.STREAM_BUFFERING_COMPLETED = "streamBufferingCompleted";
                this.STREAM_COMPLETED = "streamCompleted";
                this.TEXT_TRACKS_QUEUE_INITIALIZED = "textTracksQueueInitialized";
                this.TIMED_TEXT_REQUESTED = "timedTextRequested";
                this.TIME_SYNCHRONIZATION_COMPLETED = "timeSynchronizationComplete";
                this.URL_RESOLUTION_FAILED = "urlResolutionFailed";
                this.VIDEO_CHUNK_RECEIVED = "videoChunkReceived";
                this.WALLCLOCK_TIME_UPDATED = "wallclockTimeUpdated";
                this.XLINK_ELEMENT_LOADED = "xlinkElementLoaded";
                this.XLINK_READY = "xlinkReady";
            }
            return CoreEvents;
        }(_EventsBase3["default"]);
        exports["default"] = CoreEvents;
        module.exports = exports["default"];
    }, {
        56: 56
    } ],
    55: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _CoreEvents2 = _dereq_(54);
        var _CoreEvents3 = _interopRequireDefault(_CoreEvents2);
        var Events = function(_CoreEvents) {
            _inherits(Events, _CoreEvents);
            function Events() {
                _classCallCheck(this, Events);
                _get(Object.getPrototypeOf(Events.prototype), "constructor", this).apply(this, arguments);
            }
            return Events;
        }(_CoreEvents3["default"]);
        var events = new Events();
        exports["default"] = events;
        module.exports = exports["default"];
    }, {
        54: 54
    } ],
    56: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var EventsBase = function() {
            function EventsBase() {
                _classCallCheck(this, EventsBase);
            }
            _createClass(EventsBase, [ {
                key: "extend",
                value: function extend(events, config) {
                    if (!events) return;
                    var override = config ? config.override : false;
                    var publicOnly = config ? config.publicOnly : false;
                    for (var evt in events) {
                        if (!events.hasOwnProperty(evt) || this[evt] && !override) continue;
                        if (publicOnly && events[evt].indexOf("public_") === -1) continue;
                        this[evt] = events[evt];
                    }
                }
            } ]);
            return EventsBase;
        }();
        exports["default"] = EventsBase;
        module.exports = exports["default"];
    }, {} ],
    57: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var _voRepresentationInfo = _dereq_(92);
        var _voRepresentationInfo2 = _interopRequireDefault(_voRepresentationInfo);
        var _voMediaInfo = _dereq_(88);
        var _voMediaInfo2 = _interopRequireDefault(_voMediaInfo);
        var _voStreamInfo = _dereq_(94);
        var _voStreamInfo2 = _interopRequireDefault(_voStreamInfo);
        var _voManifestInfo = _dereq_(87);
        var _voManifestInfo2 = _interopRequireDefault(_voManifestInfo);
        var _voEvent = _dereq_(85);
        var _voEvent2 = _interopRequireDefault(_voEvent);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _modelsDashManifestModel = _dereq_(64);
        var _modelsDashManifestModel2 = _interopRequireDefault(_modelsDashManifestModel);
        function DashAdapter() {
            var instance = undefined, dashManifestModel = undefined, voPeriods = undefined, voAdaptations = undefined, currentMediaInfo = undefined, constants = undefined, cea608parser = undefined;
            var context = this.context;
            var PROFILE_DVB = "urn:dvb:dash:profile:dvb-dash:2014";
            function setup() {
                dashManifestModel = (0, _modelsDashManifestModel2["default"])(context).getInstance();
                reset();
            }
            function setConfig(config) {
                if (!config) return;
                if (config.constants) {
                    constants = config.constants;
                }
                if (config.cea608parser) {
                    cea608parser = config.cea608parser;
                }
                if (config.errHandler) {
                    dashManifestModel.setConfig({
                        errHandler: config.errHandler
                    });
                }
                if (config.BASE64) {
                    dashManifestModel.setConfig({
                        BASE64: config.BASE64
                    });
                }
            }
            function getAdaptationForMediaInfo(mediaInfo) {
                if (!mediaInfo || !mediaInfo.streamInfo || mediaInfo.streamInfo.id === undefined || !voAdaptations[mediaInfo.streamInfo.id]) return null;
                return voAdaptations[mediaInfo.streamInfo.id][mediaInfo.index];
            }
            function convertRepresentationToRepresentationInfo(voRepresentation) {
                var representationInfo = new _voRepresentationInfo2["default"]();
                var realAdaptation = voRepresentation.adaptation.period.mpd.manifest.Period_asArray[voRepresentation.adaptation.period.index].AdaptationSet_asArray[voRepresentation.adaptation.index];
                var realRepresentation = dashManifestModel.getRepresentationFor(voRepresentation.index, realAdaptation);
                representationInfo.id = voRepresentation.id;
                representationInfo.quality = voRepresentation.index;
                representationInfo.bandwidth = dashManifestModel.getBandwidth(realRepresentation);
                representationInfo.DVRWindow = voRepresentation.segmentAvailabilityRange;
                representationInfo.fragmentDuration = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length > 0 ? voRepresentation.segments[0].duration : NaN);
                representationInfo.MSETimeOffset = voRepresentation.MSETimeOffset;
                representationInfo.useCalculatedLiveEdgeTime = voRepresentation.useCalculatedLiveEdgeTime;
                representationInfo.mediaInfo = convertAdaptationToMediaInfo(voRepresentation.adaptation);
                return representationInfo;
            }
            function getMediaInfoForType(streamInfo, type) {
                if (voPeriods.length === 0) {
                    return null;
                }
                var manifest = voPeriods[0].mpd.manifest;
                var realAdaptation = getAdaptationForType(streamInfo.index, type, streamInfo);
                if (!realAdaptation) return null;
                var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voPeriods);
                var periodId = selectedVoPeriod.id;
                var idx = dashManifestModel.getIndexForAdaptation(realAdaptation, manifest, streamInfo.index);
                voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);
                return convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);
            }
            function getIsMain(adaptation) {
                return dashManifestModel.getRolesForAdaptation(adaptation).filter(function(role) {
                    return role.value === _constantsDashConstants2["default"].MAIN;
                })[0];
            }
            function getAdaptationForType(periodIndex, type, streamInfo) {
                var manifest = voPeriods[0].mpd.manifest;
                var adaptations = dashManifestModel.getAdaptationsForType(manifest, periodIndex, type);
                if (!adaptations || adaptations.length === 0) return null;
                if (adaptations.length > 1 && streamInfo) {
                    var allMediaInfoForType = getAllMediaInfoForType(streamInfo, type);
                    if (currentMediaInfo[streamInfo.id] && currentMediaInfo[streamInfo.id][type]) {
                        for (var i = 0, ln = adaptations.length; i < ln; i++) {
                            if (currentMediaInfo[streamInfo.id][type].isMediaInfoEqual(allMediaInfoForType[i])) {
                                return adaptations[i];
                            }
                        }
                    }
                    for (var i = 0, ln = adaptations.length; i < ln; i++) {
                        if (getIsMain(adaptations[i])) {
                            return adaptations[i];
                        }
                    }
                }
                return adaptations[0];
            }
            function getAllMediaInfoForType(streamInfo, type, externalManifest) {
                var voLocalPeriods = voPeriods;
                var manifest = externalManifest;
                var mediaArr = [];
                var data = undefined, media = undefined, idx = undefined, i = undefined, j = undefined, ln = undefined, periodId = undefined;
                if (manifest) {
                    checkConfig();
                    voLocalPeriods = getPeriodsFromManifest(manifest);
                } else {
                    if (voPeriods.length > 0) {
                        manifest = voPeriods[0].mpd.manifest;
                    } else {
                        return mediaArr;
                    }
                }
                var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voLocalPeriods);
                if (selectedVoPeriod) {
                    periodId = selectedVoPeriod.id;
                }
                var adaptationsForType = dashManifestModel.getAdaptationsForType(manifest, streamInfo.index, type !== constants.EMBEDDED_TEXT ? type : constants.VIDEO);
                if (!adaptationsForType) return mediaArr;
                voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);
                for (i = 0, ln = adaptationsForType.length; i < ln; i++) {
                    data = adaptationsForType[i];
                    idx = dashManifestModel.getIndexForAdaptation(data, manifest, streamInfo.index);
                    media = convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);
                    if (type === constants.EMBEDDED_TEXT) {
                        var accessibilityLength = media.accessibility.length;
                        for (j = 0; j < accessibilityLength; j++) {
                            if (!media) {
                                continue;
                            }
                            var accessibility = media.accessibility[j];
                            if (accessibility.indexOf("cea-608:") === 0) {
                                var value = accessibility.substring(8);
                                var parts = value.split(";");
                                if (parts[0].substring(0, 2) === "CC") {
                                    for (j = 0; j < parts.length; j++) {
                                        if (!media) {
                                            media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx]);
                                        }
                                        convertVideoInfoToEmbeddedTextInfo(media, parts[j].substring(0, 3), parts[j].substring(4));
                                        mediaArr.push(media);
                                        media = null;
                                    }
                                } else {
                                    for (j = 0; j < parts.length; j++) {
                                        if (!media) {
                                            media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx]);
                                        }
                                        convertVideoInfoToEmbeddedTextInfo(media, "CC" + (j + 1), parts[j]);
                                        mediaArr.push(media);
                                        media = null;
                                    }
                                }
                            } else if (accessibility.indexOf("cea-608") === 0) {
                                convertVideoInfoToEmbeddedTextInfo(media, constants.CC1, "eng");
                                mediaArr.push(media);
                                media = null;
                            }
                        }
                    } else if (type === constants.IMAGE) {
                        convertVideoInfoToThumbnailInfo(media);
                        mediaArr.push(media);
                        media = null;
                    } else if (media) {
                        mediaArr.push(media);
                    }
                }
                return mediaArr;
            }
            function updatePeriods(newManifest) {
                if (!newManifest) return null;
                checkConfig();
                voPeriods = getPeriodsFromManifest(newManifest);
                voAdaptations = {};
            }
            function getPeriodsFromManifest(manifest) {
                var mpd = getMpd(manifest);
                return getRegularPeriods(mpd);
            }
            function getStreamsInfo(externalManifest, maxStreamsInfo) {
                var streams = [];
                var voLocalPeriods = voPeriods;
                if (externalManifest) {
                    checkConfig();
                    voLocalPeriods = getPeriodsFromManifest(externalManifest);
                }
                if (!maxStreamsInfo) {
                    maxStreamsInfo = voLocalPeriods.length;
                }
                for (var i = 0; i < maxStreamsInfo; i++) {
                    streams.push(convertPeriodToStreamInfo(voLocalPeriods[i]));
                }
                return streams;
            }
            function getRealAdaptation(streamInfo, mediaInfo) {
                var id = undefined, realAdaptation = undefined;
                var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voPeriods);
                id = mediaInfo ? mediaInfo.id : null;
                if (voPeriods.length > 0) {
                    realAdaptation = id ? dashManifestModel.getAdaptationForId(id, voPeriods[0].mpd.manifest, selectedVoPeriod.index) : dashManifestModel.getAdaptationForIndex(mediaInfo.index, voPeriods[0].mpd.manifest, selectedVoPeriod.index);
                }
                return realAdaptation;
            }
            function getVoRepresentations(mediaInfo) {
                var voReps = undefined;
                var voAdaptation = getAdaptationForMediaInfo(mediaInfo);
                voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);
                return voReps;
            }
            function getEvent(eventBox, eventStreams, startTime) {
                if (!eventBox || !eventStreams) {
                    return null;
                }
                var event = new _voEvent2["default"]();
                var schemeIdUri = eventBox.scheme_id_uri;
                var value = eventBox.value;
                var timescale = eventBox.timescale;
                var presentationTimeDelta = eventBox.presentation_time_delta;
                var duration = eventBox.event_duration;
                var id = eventBox.id;
                var messageData = eventBox.message_data;
                var presentationTime = startTime * timescale + presentationTimeDelta;
                if (!eventStreams[schemeIdUri + "/" + value]) return null;
                event.eventStream = eventStreams[schemeIdUri + "/" + value];
                event.eventStream.value = value;
                event.eventStream.timescale = timescale;
                event.duration = duration;
                event.id = id;
                event.presentationTime = presentationTime;
                event.messageData = messageData;
                event.presentationTimeDelta = presentationTimeDelta;
                return event;
            }
            function getEventsFor(info, voRepresentation) {
                var events = [];
                if (voPeriods.length === 0) {
                    return events;
                }
                var manifest = voPeriods[0].mpd.manifest;
                if (info instanceof _voStreamInfo2["default"]) {
                    events = dashManifestModel.getEventsForPeriod(getPeriodForStreamInfo(info, voPeriods));
                } else if (info instanceof _voMediaInfo2["default"]) {
                    events = dashManifestModel.getEventStreamForAdaptationSet(manifest, getAdaptationForMediaInfo(info));
                } else if (info instanceof _voRepresentationInfo2["default"]) {
                    events = dashManifestModel.getEventStreamForRepresentation(manifest, voRepresentation);
                }
                return events;
            }
            function setCurrentMediaInfo(streamId, type, mediaInfo) {
                currentMediaInfo[streamId] = currentMediaInfo[streamId] || {};
                currentMediaInfo[streamId][type] = currentMediaInfo[streamId][type] || {};
                currentMediaInfo[streamId][type] = mediaInfo;
            }
            function getIsTextTrack(type) {
                return dashManifestModel.getIsTextTrack(type);
            }
            function getUTCTimingSources() {
                var manifest = voPeriods[0].mpd.manifest;
                return dashManifestModel.getUTCTimingSources(manifest);
            }
            function getSuggestedPresentationDelay() {
                var mpd = voPeriods[0].mpd;
                return dashManifestModel.getSuggestedPresentationDelay(mpd);
            }
            function getAvailabilityStartTime(externalMpd) {
                var mpd = externalMpd ? externalMpd : voPeriods[0].mpd;
                return dashManifestModel.getAvailabilityStartTime(mpd);
            }
            function getIsDynamic(externalManifest) {
                var manifest = externalManifest ? externalManifest : voPeriods[0].mpd.manifest;
                return dashManifestModel.getIsDynamic(manifest);
            }
            function getDuration(externalManifest) {
                var manifest = externalManifest ? externalManifest : voPeriods[0].mpd.manifest;
                return dashManifestModel.getDuration(manifest);
            }
            function getRegularPeriods(externalMpd) {
                var mpd = externalMpd ? externalMpd : voPeriods[0].mpd;
                return dashManifestModel.getRegularPeriods(mpd);
            }
            function getMpd(externalManifest) {
                var manifest = externalManifest ? externalManifest : voPeriods[0].mpd.manifest;
                return dashManifestModel.getMpd(manifest);
            }
            function getLocation(manifest) {
                return dashManifestModel.getLocation(manifest);
            }
            function getManifestUpdatePeriod(manifest) {
                var latencyOfLastUpdate = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
                return dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);
            }
            function getUseCalculatedLiveEdgeTimeForMediaInfo(mediaInfo) {
                var voAdaptation = getAdaptationForMediaInfo(mediaInfo);
                return dashManifestModel.getUseCalculatedLiveEdgeTimeForAdaptation(voAdaptation);
            }
            function getIsDVB(manifest) {
                return dashManifestModel.hasProfile(manifest, PROFILE_DVB);
            }
            function getBaseURLsFromElement(node) {
                return dashManifestModel.getBaseURLsFromElement(node);
            }
            function getRepresentationSortFunction() {
                return dashManifestModel.getRepresentationSortFunction();
            }
            function getCodec(adaptation, representationId, addResolutionInfo) {
                return dashManifestModel.getCodec(adaptation, representationId, addResolutionInfo);
            }
            function getBandwidthForRepresentation(representationId, periodId) {
                var representation = undefined;
                var period = getPeriod(periodId);
                representation = findRepresentation(period, representationId);
                return representation ? representation.bandwidth : null;
            }
            function getIndexForRepresentation(representationId, periodIdx) {
                var period = getPeriod(periodIdx);
                return findRepresentationIndex(period, representationId);
            }
            function getMaxIndexForBufferType(bufferType, periodIdx) {
                var period = getPeriod(periodIdx);
                return findMaxBufferIndex(period, bufferType);
            }
            function reset() {
                voPeriods = [];
                voAdaptations = {};
                currentMediaInfo = {};
            }
            function getPeriodForStreamInfo(streamInfo, voPeriodsArray) {
                var ln = voPeriodsArray.length;
                for (var i = 0; i < ln; i++) {
                    var voPeriod = voPeriodsArray[i];
                    if (streamInfo.id === voPeriod.id) return voPeriod;
                }
                return null;
            }
            function convertAdaptationToMediaInfo(adaptation) {
                var mediaInfo = new _voMediaInfo2["default"]();
                var realAdaptation = adaptation.period.mpd.manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index];
                var viewpoint = undefined;
                mediaInfo.id = adaptation.id;
                mediaInfo.index = adaptation.index;
                mediaInfo.type = adaptation.type;
                mediaInfo.streamInfo = convertPeriodToStreamInfo(adaptation.period);
                mediaInfo.representationCount = dashManifestModel.getRepresentationCount(realAdaptation);
                mediaInfo.labels = dashManifestModel.getLabelsForAdaptation(realAdaptation);
                mediaInfo.lang = dashManifestModel.getLanguageForAdaptation(realAdaptation);
                viewpoint = dashManifestModel.getViewpointForAdaptation(realAdaptation);
                mediaInfo.viewpoint = viewpoint ? viewpoint.value : undefined;
                mediaInfo.accessibility = dashManifestModel.getAccessibilityForAdaptation(realAdaptation).map(function(accessibility) {
                    var accessibilityValue = accessibility.value;
                    var accessibilityData = accessibilityValue;
                    if (accessibility.schemeIdUri && accessibility.schemeIdUri.search("cea-608") >= 0 && typeof cea608parser !== "undefined") {
                        if (accessibilityValue) {
                            accessibilityData = "cea-608:" + accessibilityValue;
                        } else {
                            accessibilityData = "cea-608";
                        }
                        mediaInfo.embeddedCaptions = true;
                    }
                    return accessibilityData;
                });
                mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForAdaptation(realAdaptation).map(function(audioChannelConfiguration) {
                    return audioChannelConfiguration.value;
                });
                mediaInfo.roles = dashManifestModel.getRolesForAdaptation(realAdaptation).map(function(role) {
                    return role.value;
                });
                mediaInfo.codec = dashManifestModel.getCodec(realAdaptation);
                mediaInfo.mimeType = dashManifestModel.getMimeType(realAdaptation);
                mediaInfo.contentProtection = dashManifestModel.getContentProtectionData(realAdaptation);
                mediaInfo.bitrateList = dashManifestModel.getBitrateListForAdaptation(realAdaptation);
                if (mediaInfo.contentProtection) {
                    mediaInfo.contentProtection.forEach(function(item) {
                        item.KID = dashManifestModel.getKID(item);
                    });
                }
                mediaInfo.isText = dashManifestModel.getIsTextTrack(mediaInfo.mimeType);
                return mediaInfo;
            }
            function convertVideoInfoToEmbeddedTextInfo(mediaInfo, channel, lang) {
                mediaInfo.id = channel;
                mediaInfo.index = 100 + parseInt(channel.substring(2, 3));
                mediaInfo.type = constants.EMBEDDED_TEXT;
                mediaInfo.codec = "cea-608-in-SEI";
                mediaInfo.isText = true;
                mediaInfo.isEmbedded = true;
                mediaInfo.lang = lang;
                mediaInfo.roles = [ "caption" ];
            }
            function convertVideoInfoToThumbnailInfo(mediaInfo) {
                mediaInfo.type = constants.IMAGE;
            }
            function convertPeriodToStreamInfo(period) {
                var streamInfo = new _voStreamInfo2["default"]();
                var THRESHOLD = 1;
                streamInfo.id = period.id;
                streamInfo.index = period.index;
                streamInfo.start = period.start;
                streamInfo.duration = period.duration;
                streamInfo.manifestInfo = convertMpdToManifestInfo(period.mpd);
                streamInfo.isLast = period.mpd.manifest.Period_asArray.length === 1 || Math.abs(streamInfo.start + streamInfo.duration - streamInfo.manifestInfo.duration) < THRESHOLD;
                return streamInfo;
            }
            function convertMpdToManifestInfo(mpd) {
                var manifestInfo = new _voManifestInfo2["default"]();
                manifestInfo.DVRWindowSize = mpd.timeShiftBufferDepth;
                manifestInfo.loadedTime = mpd.manifest.loadedTime;
                manifestInfo.availableFrom = mpd.availabilityStartTime;
                manifestInfo.minBufferTime = mpd.manifest.minBufferTime;
                manifestInfo.maxFragmentDuration = mpd.maxSegmentDuration;
                manifestInfo.duration = dashManifestModel.getDuration(mpd.manifest);
                manifestInfo.isDynamic = dashManifestModel.getIsDynamic(mpd.manifest);
                return manifestInfo;
            }
            function checkConfig() {
                if (!constants) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function getPeriod(periodId) {
                if (voPeriods.length === 0) {
                    return null;
                }
                var manifest = voPeriods[0].mpd.manifest;
                return manifest.Period_asArray[periodId];
            }
            function findRepresentationIndex(period, representationId) {
                var index = findRepresentation(period, representationId, true);
                return index !== null ? index : -1;
            }
            function findRepresentation(period, representationId, returnIndex) {
                var adaptationSet = undefined, adaptationSetArray = undefined, representation = undefined, representationArray = undefined, adaptationSetArrayIndex = undefined, representationArrayIndex = undefined;
                if (period) {
                    adaptationSetArray = period.AdaptationSet_asArray;
                    for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {
                        adaptationSet = adaptationSetArray[adaptationSetArrayIndex];
                        representationArray = adaptationSet.Representation_asArray;
                        for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {
                            representation = representationArray[representationArrayIndex];
                            if (representationId === representation.id) {
                                if (returnIndex) {
                                    return representationArrayIndex;
                                } else {
                                    return representation;
                                }
                            }
                        }
                    }
                }
                return null;
            }
            function findMaxBufferIndex(period, bufferType) {
                var adaptationSet = undefined, adaptationSetArray = undefined, representationArray = undefined, adaptationSetArrayIndex = undefined;
                if (!period || !bufferType) return -1;
                adaptationSetArray = period.AdaptationSet_asArray;
                for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {
                    adaptationSet = adaptationSetArray[adaptationSetArrayIndex];
                    representationArray = adaptationSet.Representation_asArray;
                    if (dashManifestModel.getIsTypeOf(adaptationSet, bufferType)) {
                        return representationArray.length;
                    }
                }
                return -1;
            }
            instance = {
                getBandwidthForRepresentation: getBandwidthForRepresentation,
                getIndexForRepresentation: getIndexForRepresentation,
                getMaxIndexForBufferType: getMaxIndexForBufferType,
                convertDataToRepresentationInfo: convertRepresentationToRepresentationInfo,
                getDataForMedia: getAdaptationForMediaInfo,
                getStreamsInfo: getStreamsInfo,
                getMediaInfoForType: getMediaInfoForType,
                getAllMediaInfoForType: getAllMediaInfoForType,
                getAdaptationForType: getAdaptationForType,
                getRealAdaptation: getRealAdaptation,
                getVoRepresentations: getVoRepresentations,
                getEventsFor: getEventsFor,
                getEvent: getEvent,
                setConfig: setConfig,
                updatePeriods: updatePeriods,
                setCurrentMediaInfo: setCurrentMediaInfo,
                getUseCalculatedLiveEdgeTimeForMediaInfo: getUseCalculatedLiveEdgeTimeForMediaInfo,
                getIsTextTrack: getIsTextTrack,
                getUTCTimingSources: getUTCTimingSources,
                getSuggestedPresentationDelay: getSuggestedPresentationDelay,
                getAvailabilityStartTime: getAvailabilityStartTime,
                getIsDynamic: getIsDynamic,
                getDuration: getDuration,
                getRegularPeriods: getRegularPeriods,
                getMpd: getMpd,
                getLocation: getLocation,
                getManifestUpdatePeriod: getManifestUpdatePeriod,
                getIsDVB: getIsDVB,
                getBaseURLsFromElement: getBaseURLsFromElement,
                getRepresentationSortFunction: getRepresentationSortFunction,
                getCodec: getCodec,
                reset: reset
            };
            setup();
            return instance;
        }
        DashAdapter.__dashjs_factory_name = "DashAdapter";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(DashAdapter);
        module.exports = exports["default"];
    }, {
        48: 48,
        62: 62,
        64: 64,
        85: 85,
        87: 87,
        88: 88,
        92: 92,
        94: 94
    } ],
    58: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var _streamingVoFragmentRequest = _dereq_(223);
        var _streamingVoFragmentRequest2 = _interopRequireDefault(_streamingVoFragmentRequest);
        var _streamingVoDashJSError = _dereq_(221);
        var _streamingVoDashJSError2 = _interopRequireDefault(_streamingVoDashJSError);
        var _streamingVoMetricsHTTPRequest = _dereq_(237);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _streamingUtilsURLUtils = _dereq_(216);
        var _streamingUtilsURLUtils2 = _interopRequireDefault(_streamingUtilsURLUtils);
        var _voRepresentation = _dereq_(91);
        var _voRepresentation2 = _interopRequireDefault(_voRepresentation);
        var _utilsSegmentsUtils = _dereq_(79);
        var _utilsSegmentsGetter = _dereq_(78);
        var _utilsSegmentsGetter2 = _interopRequireDefault(_utilsSegmentsGetter);
        var _SegmentBaseLoader = _dereq_(60);
        var _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader);
        var _WebmSegmentBaseLoader = _dereq_(61);
        var _WebmSegmentBaseLoader2 = _interopRequireDefault(_WebmSegmentBaseLoader);
        function DashHandler(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var urlUtils = (0, _streamingUtilsURLUtils2["default"])(context).getInstance();
            var segmentBaseLoader = undefined;
            var timelineConverter = config.timelineConverter;
            var dashMetrics = config.dashMetrics;
            var mediaPlayerModel = config.mediaPlayerModel;
            var errHandler = config.errHandler;
            var baseURLController = config.baseURLController;
            var settings = config.settings;
            var instance = undefined, logger = undefined, index = undefined, requestedTime = undefined, currentTime = undefined, streamProcessor = undefined, segmentsGetter = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
                segmentBaseLoader = isWebM(config.mimeType) ? (0, _WebmSegmentBaseLoader2["default"])(context).getInstance() : (0,
                _SegmentBaseLoader2["default"])(context).getInstance();
                segmentBaseLoader.setConfig({
                    baseURLController: baseURLController,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    errHandler: errHandler
                });
                eventBus.on(_coreEventsEvents2["default"].INITIALIZATION_LOADED, onInitializationLoaded, instance);
                eventBus.on(_coreEventsEvents2["default"].SEGMENTS_LOADED, onSegmentsLoaded, instance);
            }
            function isWebM(mimeType) {
                var type = mimeType.split("/")[1];
                return "webm" === type.toLowerCase();
            }
            function initialize(StreamProcessor) {
                streamProcessor = StreamProcessor;
                segmentBaseLoader.initialize();
                segmentsGetter = (0, _utilsSegmentsGetter2["default"])(context).create(config, isDynamic());
            }
            function getType() {
                return streamProcessor ? streamProcessor.getType() : null;
            }
            function isDynamic() {
                var streamInfo = streamProcessor ? streamProcessor.getStreamInfo() : null;
                return streamInfo ? streamInfo.manifestInfo.isDynamic : null;
            }
            function getMediaInfo() {
                return streamProcessor ? streamProcessor.getMediaInfo() : null;
            }
            function getStreamProcessor() {
                return streamProcessor;
            }
            function setCurrentTime(value) {
                currentTime = value;
            }
            function getCurrentTime() {
                return currentTime;
            }
            function resetIndex() {
                index = -1;
            }
            function resetInitialSettings() {
                resetIndex();
                currentTime = 0;
                requestedTime = null;
                streamProcessor = null;
                segmentsGetter = null;
            }
            function reset() {
                resetInitialSettings();
                eventBus.off(_coreEventsEvents2["default"].INITIALIZATION_LOADED, onInitializationLoaded, instance);
                eventBus.off(_coreEventsEvents2["default"].SEGMENTS_LOADED, onSegmentsLoaded, instance);
            }
            function setRequestUrl(request, destination, representation) { //mark
                var baseURL = baseURLController.resolve(representation.path);
                console.debug("baseURL ", baseURL);
                var url = undefined, serviceLocation = undefined;
                if (!baseURL || destination === baseURL.url || !urlUtils.isRelative(destination)) {
                    console.debug("destination ", destination);
                    url = destination;
                } else {
                    url = baseURL.url;
                    serviceLocation = baseURL.serviceLocation;
                    if (destination) {
                        url = urlUtils.resolve(destination, url);
                    }
                }
                if (urlUtils.isRelative(url)) {
                    return false;
                }
                request.url = url;
                request.serviceLocation = serviceLocation;
                console.debug("setRequestUrl ", request.url)
                return true;
            }
            function generateInitRequest(representation, mediaType) {
                var request = new _streamingVoFragmentRequest2["default"]();
                var period = representation.adaptation.period;
                var presentationStartTime = period.start;
                var isDynamicStream = isDynamic();
                request.mediaType = mediaType;
                request.type = _streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;
                request.range = representation.range;
                request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, period.mpd, isDynamicStream);
                request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamicStream);
                request.quality = representation.index;
                request.mediaInfo = getMediaInfo();
                request.representationId = representation.id;
                if (setRequestUrl(request, representation.initialization, representation)) {
                    request.url = (0, _utilsSegmentsUtils.replaceTokenForTemplate)(request.url, "Bandwidth", representation.bandwidth);
                    return request;
                }
            }
            function getInitRequest(representation) {
                if (!representation) return null;
                var request = generateInitRequest(representation, getType());
                return request;
            }
            function isMediaFinished(representation) {
                var isFinished = false;
                var isDynamicStream = isDynamic();
                if (!isDynamicStream && index === representation.availableSegmentsNumber) {
                    isFinished = true;
                } else {
                    var seg = (0, _utilsSegmentsUtils.getSegmentByIndex)(index, representation);
                    if (seg) {
                        var time = parseFloat((seg.presentationStartTime - representation.adaptation.period.start).toFixed(5));
                        var duration = representation.adaptation.period.duration;
                        logger.debug(representation.segmentInfoType + ": " + time + " / " + duration);
                        isFinished = representation.segmentInfoType === _constantsDashConstants2["default"].SEGMENT_TIMELINE && isDynamicStream ? false : time >= duration;
                    } else {
                        logger.debug("isMediaFinished - no segment found");
                    }
                }
                return isFinished;
            }
            function updateSegments(voRepresentation) {
                segmentsGetter.getSegments(voRepresentation, requestedTime, index, onSegmentListUpdated);
            }
            function onSegmentListUpdated(voRepresentation, segments) {
                voRepresentation.segments = segments;
                if (segments && segments.length > 0) {
                    if (isDynamic()) {
                        var lastSegment = segments[segments.length - 1];
                        var liveEdge = lastSegment.presentationStartTime;
                        timelineConverter.setExpectedLiveEdge(liveEdge);
                        dashMetrics.updateManifestUpdateInfo({
                            presentationStartTime: liveEdge
                        });
                    }
                }
            }
            function updateSegmentList(voRepresentation) {
                if (!voRepresentation) {
                    throw new Error("no representation");
                }
                voRepresentation.segments = null;
                updateSegments(voRepresentation);
            }
            function updateRepresentation(voRepresentation, keepIdx) {
                var hasInitialization = _voRepresentation2["default"].hasInitialization(voRepresentation);
                var hasSegments = _voRepresentation2["default"].hasSegments(voRepresentation);
                var error = undefined;
                if (!voRepresentation.segmentDuration && !voRepresentation.segments) {
                    updateSegmentList(voRepresentation);
                }
                voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic());
                if (voRepresentation.segmentAvailabilityRange.end < voRepresentation.segmentAvailabilityRange.start && !voRepresentation.useCalculatedLiveEdgeTime) {
                    error = new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].SEGMENTS_UNAVAILABLE_ERROR_CODE, _coreErrorsErrors2["default"].SEGMENTS_UNAVAILABLE_ERROR_MESSAGE, {
                        availabilityDelay: voRepresentation.segmentAvailabilityRange.start - voRepresentation.segmentAvailabilityRange.end
                    });
                    eventBus.trigger(_coreEventsEvents2["default"].REPRESENTATION_UPDATED, {
                        sender: this,
                        representation: voRepresentation,
                        error: error
                    });
                    return;
                }
                if (!keepIdx) {
                    resetIndex();
                }
                if (voRepresentation.segmentDuration) {
                    updateSegmentList(voRepresentation);
                }
                if (!hasInitialization) {
                    segmentBaseLoader.loadInitialization(voRepresentation);
                }
                if (!hasSegments) {
                    segmentBaseLoader.loadSegments(voRepresentation, getType(), voRepresentation.indexRange);
                }
                if (hasInitialization && hasSegments) {
                    eventBus.trigger(_coreEventsEvents2["default"].REPRESENTATION_UPDATED, {
                        sender: this,
                        representation: voRepresentation
                    });
                }
            }
            function getIndexForSegments(time, representation, timeThreshold) {
                var segments = representation.segments;
                var ln = segments ? segments.length : null;
                var idx = -1;
                var epsilon = undefined, frag = undefined, ft = undefined, fd = undefined, i = undefined;
                if (segments && ln > 0) {
                    timeThreshold = timeThreshold === undefined || timeThreshold === null ? settings.get().streaming.segmentOverlapToleranceTime : timeThreshold;
                    for (i = 0; i < ln; i++) {
                        frag = segments[i];
                        ft = frag.presentationStartTime;
                        fd = frag.duration;
                        epsilon = timeThreshold === undefined || timeThreshold === null ? fd / 2 : timeThreshold;
                        if (time + epsilon >= ft && time - epsilon < ft + fd) {
                            idx = frag.availabilityIdx;
                            break;
                        }
                    }
                }
                return idx;
            }
            function getRequestForSegment(segment) {
              console.debug("getRequestForSegment = ", segment);
                if (segment === null || segment === undefined) {
                    return null;
                }
                var request = new _streamingVoFragmentRequest2["default"]();
                var representation = segment.representation;
                var bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth;
                var url = segment.media;
                url = (0, _utilsSegmentsUtils.replaceTokenForTemplate)(url, "Number", segment.replacementNumber);
                url = (0, _utilsSegmentsUtils.replaceTokenForTemplate)(url, "Time", segment.replacementTime);
                url = (0, _utilsSegmentsUtils.replaceTokenForTemplate)(url, "Bandwidth", bandwidth);
                url = (0, _utilsSegmentsUtils.replaceIDForTemplate)(url, representation.id);
                console.debug("url after replaceID ", url, ", representation.id ", representation.id);
                url = (0, _utilsSegmentsUtils.unescapeDollarsInTemplate)(url);
                console.debug("url after dollars ", url);
                request.mediaType = getType();
                request.type = _streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;
                request.range = segment.mediaRange;
                request.startTime = segment.presentationStartTime;
                request.duration = segment.duration;
                request.timescale = representation.timescale;
                request.availabilityStartTime = segment.availabilityStartTime;
                request.availabilityEndTime = segment.availabilityEndTime;
                request.wallStartTime = segment.wallStartTime;
                request.quality = representation.index;
                request.index = segment.availabilityIdx;
                request.mediaInfo = getMediaInfo();
                request.adaptationIndex = representation.adaptation.index;
                request.representationId = representation.id;
                if (setRequestUrl(request, url, representation)) {
                    console.debug("getRequestForSegment = ", request);
                    return request;
                }
            }
            function getSegmentRequestForTime(representation, time, options) {
                var request = undefined, segment = undefined, finished = undefined;
                if (!representation) {
                    return null;
                }
                var type = getType();
                var idx = index;
                var keepIdx = options ? options.keepIdx : false;
                var timeThreshold = options ? options.timeThreshold : null;
                var ignoreIsFinished = options && options.ignoreIsFinished ? true : false;
                if (requestedTime !== time) {
                    requestedTime = time;
                    logger.debug("Getting the request for " + type + " time : " + time);
                }
                updateSegments(representation);
                index = getIndexForSegments(time, representation, timeThreshold);
                if (index < 0) {
                    updateSegments(representation);
                    index = getIndexForSegments(time, representation, timeThreshold);
                }
                if (index >= 0) {
                    logger.debug("Index for " + type + " time " + time + " is " + index);
                }
                finished = !ignoreIsFinished ? isMediaFinished(representation) : false;
                if (finished) {
                    request = new _streamingVoFragmentRequest2["default"]();
                    request.action = _streamingVoFragmentRequest2["default"].ACTION_COMPLETE;
                    request.index = index;
                    request.mediaType = type;
                    request.mediaInfo = getMediaInfo();
                    logger.debug("Signal complete in getSegmentRequestForTime -", type);
                } else {
                    segment = (0, _utilsSegmentsUtils.getSegmentByIndex)(index, representation);
                    request = getRequestForSegment(segment);
                }
                if (keepIdx && idx >= 0) {
                    index = representation.segmentInfoType === _constantsDashConstants2["default"].SEGMENT_TIMELINE && isDynamic() ? index : idx;
                }
                return request;
            }
            function getNextSegmentRequest(representation) {
                var request = undefined, segment = undefined, finished = undefined;
                if (!representation || index === -1) {
                    return null;
                }
                var type = getType();
                var isDynamicStream = isDynamic();
                requestedTime = null;
                index++;
                logger.debug("Getting the next request at index: " + index + ", type: " + type);
                var seg = (0, _utilsSegmentsUtils.getSegmentByIndex)(index, representation);
                if (!seg && isDynamicStream) {
                    logger.debug("No segment found at index: " + index + ". Wait for next loop");
                    updateSegments(representation);
                    index--;
                    return null;
                }
                finished = isMediaFinished(representation);
                if (finished) {
                    request = new _streamingVoFragmentRequest2["default"]();
                    request.action = _streamingVoFragmentRequest2["default"].ACTION_COMPLETE;
                    request.index = index;
                    request.mediaType = type;
                    request.mediaInfo = getMediaInfo();
                    logger.debug("Signal complete -", type);
                } else {
                    updateSegments(representation);
                    segment = (0, _utilsSegmentsUtils.getSegmentByIndex)(index, representation);
                    request = getRequestForSegment(segment);
                    if (!segment && isDynamicStream) {
                        index--;
                    }
                }
                return request;
            }
            function onInitializationLoaded(e) {
                var representation = e.representation;
                if (!representation.segments) return;
                eventBus.trigger(_coreEventsEvents2["default"].REPRESENTATION_UPDATED, {
                    sender: this,
                    representation: representation
                });
            }
            function onSegmentsLoaded(e) {
                if (e.error || getType() !== e.mediaType) return;
                var fragments = e.segments;
                var representation = e.representation;
                var segments = [];
                var count = 0;
                var i = undefined, len = undefined, s = undefined, seg = undefined;
                for (i = 0, len = fragments.length; i < len; i++) {
                    s = fragments[i];
                    seg = (0, _utilsSegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic(), representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count);
                    segments.push(seg);
                    seg = null;
                    count++;
                }
                representation.segmentAvailabilityRange = {
                    start: segments[0].presentationStartTime,
                    end: segments[len - 1].presentationStartTime
                };
                representation.availableSegmentsNumber = len;
                onSegmentListUpdated(representation, segments);
                if (!_voRepresentation2["default"].hasInitialization(representation)) return;
                eventBus.trigger(_coreEventsEvents2["default"].REPRESENTATION_UPDATED, {
                    sender: this,
                    representation: representation
                });
            }
            instance = {
                initialize: initialize,
                getStreamProcessor: getStreamProcessor,
                getInitRequest: getInitRequest,
                getSegmentRequestForTime: getSegmentRequestForTime,
                getNextSegmentRequest: getNextSegmentRequest,
                updateRepresentation: updateRepresentation,
                updateSegmentList: updateSegmentList,
                setCurrentTime: setCurrentTime,
                getCurrentTime: getCurrentTime,
                reset: reset,
                resetIndex: resetIndex
            };
            setup();
            return instance;
        }
        DashHandler.__dashjs_factory_name = "DashHandler";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(DashHandler);
        module.exports = exports["default"];
    }, {
        216: 216,
        221: 221,
        223: 223,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55,
        60: 60,
        61: 61,
        62: 62,
        78: 78,
        79: 79,
        91: 91
    } ],
    59: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _streamingVoMetricsHTTPRequest = _dereq_(237);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _streamingConstantsMetricsConstants = _dereq_(108);
        var _streamingConstantsMetricsConstants2 = _interopRequireDefault(_streamingConstantsMetricsConstants);
        var _utilsRound10 = _dereq_(77);
        var _utilsRound102 = _interopRequireDefault(_utilsRound10);
        var _streamingModelsMetricsModel = _dereq_(150);
        var _streamingModelsMetricsModel2 = _interopRequireDefault(_streamingModelsMetricsModel);
        var _streamingVoMetricsPlayList = _dereq_(239);
        function DashMetrics(config) {
            config = config || {};
            var context = this.context;
            var instance = undefined, playListTraceMetricsClosed = undefined, playListTraceMetrics = undefined, playListMetrics = undefined;
            var metricsModel = config.metricsModel;
            function setup() {
                metricsModel = metricsModel || (0, _streamingModelsMetricsModel2["default"])(context).getInstance({
                    settings: config.settings
                });
                resetInitialSettings();
            }
            function resetInitialSettings() {
                playListTraceMetricsClosed = true;
                playListTraceMetrics = null;
                playListMetrics = null;
            }
            function getCurrentRepresentationSwitch(type, readOnly) {
                var metrics = metricsModel.getMetricsFor(type, readOnly);
                return getCurrent(metrics, _streamingConstantsMetricsConstants2["default"].TRACK_SWITCH);
            }
            function addRepresentationSwitch(mediaType, t, mt, to, lto) {
                metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);
            }
            function getLatestBufferInfoVO(mediaType, readOnly, infoType) {
                var metrics = metricsModel.getMetricsFor(mediaType, readOnly);
                return getCurrent(metrics, infoType);
            }
            function getCurrentBufferLevel(type, readOnly) {
                var vo = getLatestBufferInfoVO(type, readOnly, _streamingConstantsMetricsConstants2["default"].BUFFER_LEVEL);
                if (vo) {
                    return _utilsRound102["default"].round10(vo.level / 1e3, -3);
                }
                return 0;
            }
            function addBufferLevel(mediaType, t, level) {
                metricsModel.addBufferLevel(mediaType, t, level);
            }
            function addBufferState(mediaType, state, target) {
                metricsModel.addBufferState(mediaType, state, target);
            }
            function clearAllCurrentMetrics() {
                metricsModel.clearAllCurrentMetrics();
            }
            function getCurrentHttpRequest(mediaType, readOnly) {
                var metrics = metricsModel.getMetricsFor(mediaType, readOnly);
                if (!metrics) {
                    return null;
                }
                var httpList = metrics.HttpList;
                var currentHttpList = null;
                var httpListLastIndex = undefined;
                if (!httpList || httpList.length <= 0) {
                    return null;
                }
                httpListLastIndex = httpList.length - 1;
                while (httpListLastIndex >= 0) {
                    if (httpList[httpListLastIndex].responsecode) {
                        currentHttpList = httpList[httpListLastIndex];
                        break;
                    }
                    httpListLastIndex--;
                }
                return currentHttpList;
            }
            function getHttpRequests(mediaType) {
                var metrics = metricsModel.getMetricsFor(mediaType, true);
                if (!metrics) {
                    return [];
                }
                return !!metrics.HttpList ? metrics.HttpList : [];
            }
            function addRequestsQueue(mediaType, loadingRequests, executedRequests) {
                metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);
            }
            function getCurrent(metrics, metricName) {
                if (!metrics) {
                    return null;
                }
                var list = metrics[metricName];
                if (!list || list.length <= 0) {
                    return null;
                }
                return list[list.length - 1];
            }
            function getCurrentDroppedFrames() {
                var metrics = metricsModel.getMetricsFor(_streamingConstantsConstants2["default"].VIDEO, true);
                return getCurrent(metrics, _streamingConstantsMetricsConstants2["default"].DROPPED_FRAMES);
            }
            function addDroppedFrames(quality) {
                metricsModel.addDroppedFrames(_streamingConstantsConstants2["default"].VIDEO, quality);
            }
            function getCurrentSchedulingInfo(metrics) {
                return getCurrent(metrics, _streamingConstantsMetricsConstants2["default"].SCHEDULING_INFO);
            }
            function addSchedulingInfo(request, state) {
                metricsModel.addSchedulingInfo(request.mediaType, new Date(), request.type, request.startTime, request.availabilityStartTime, request.duration, request.quality, request.range, state);
            }
            function getCurrentManifestUpdate() {
                var streamMetrics = metricsModel.getMetricsFor(_streamingConstantsConstants2["default"].STREAM);
                return getCurrent(streamMetrics, _streamingConstantsMetricsConstants2["default"].MANIFEST_UPDATE);
            }
            function updateManifestUpdateInfo(updatedFields) {
                var manifestUpdate = this.getCurrentManifestUpdate();
                metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);
            }
            function addManifestUpdateStreamInfo(streamInfo) {
                if (streamInfo) {
                    var manifestUpdate = this.getCurrentManifestUpdate();
                    metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);
                }
            }
            function addManifestUpdate(request) {
                metricsModel.addManifestUpdate(_streamingConstantsConstants2["default"].STREAM, request.type, request.requestStartDate, request.requestEndDate);
            }
            function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {
                metricsModel.addHttpRequest(request.mediaType, null, request.type, request.url, responseURL, request.serviceLocation || null, request.range || null, request.requestStartDate, request.firstByteDate, request.requestEndDate, responseStatus, request.duration, responseHeaders, traces);
            }
            function addManifestUpdateRepresentationInfo(representation, mediaType) {
                if (representation) {
                    var manifestUpdateInfo = this.getCurrentManifestUpdate();
                    metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);
                }
            }
            function getCurrentDVRInfo(mediaType) {
                var metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) : metricsModel.getMetricsFor(_streamingConstantsConstants2["default"].VIDEO, true) || metricsModel.getMetricsFor(_streamingConstantsConstants2["default"].AUDIO, true);
                return getCurrent(metrics, _streamingConstantsMetricsConstants2["default"].DVR_INFO);
            }
            function addDVRInfo(mediaType, currentTime, mpd, range) {
                metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);
            }
            function getLatestMPDRequestHeaderValueByID(id) {
                var headers = {};
                var httpRequestList = undefined, httpRequest = undefined, i = undefined;
                httpRequestList = getHttpRequests(_streamingConstantsConstants2["default"].STREAM);
                for (i = httpRequestList.length - 1; i >= 0; i--) {
                    httpRequest = httpRequestList[i];
                    if (httpRequest.type === _streamingVoMetricsHTTPRequest.HTTPRequest.MPD_TYPE) {
                        headers = parseResponseHeaders(httpRequest._responseHeaders);
                        break;
                    }
                }
                return headers[id] === undefined ? null : headers[id];
            }
            function getLatestFragmentRequestHeaderValueByID(type, id) {
                var headers = {};
                var httpRequest = getCurrentHttpRequest(type, true);
                if (httpRequest) {
                    headers = parseResponseHeaders(httpRequest._responseHeaders);
                }
                return headers[id] === undefined ? null : headers[id];
            }
            function parseResponseHeaders(headerStr) {
                var headers = {};
                if (!headerStr) {
                    return headers;
                }
                var headerPairs = headerStr.trim().split("\r\n");
                for (var i = 0, ilen = headerPairs.length; i < ilen; i++) {
                    var headerPair = headerPairs[i];
                    var index = headerPair.indexOf(": ");
                    if (index > 0) {
                        headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);
                    }
                }
                return headers;
            }
            function addPlayList() {
                if (playListMetrics) {
                    metricsModel.addPlayList(playListMetrics);
                    playListMetrics = null;
                }
            }
            function createPlaylistMetrics(mediaStartTime, startReason) {
                playListMetrics = new _streamingVoMetricsPlayList.PlayList();
                playListMetrics.start = new Date();
                playListMetrics.mstart = mediaStartTime;
                playListMetrics.starttype = startReason;
            }
            function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {
                if (playListTraceMetricsClosed === true) {
                    playListTraceMetricsClosed = false;
                    playListTraceMetrics = new _streamingVoMetricsPlayList.PlayListTrace();
                    playListTraceMetrics.representationid = representationId;
                    playListTraceMetrics.start = new Date();
                    playListTraceMetrics.mstart = mediaStartTime;
                    playListTraceMetrics.playbackspeed = speed;
                }
            }
            function updatePlayListTraceMetrics(traceToUpdate) {
                if (playListTraceMetrics) {
                    for (var field in playListTraceMetrics) {
                        playListTraceMetrics[field] = traceToUpdate[field];
                    }
                }
            }
            function pushPlayListTraceMetrics(endTime, reason) {
                if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics) {
                    var startTime = playListTraceMetrics.start;
                    var duration = endTime.getTime() - startTime.getTime();
                    playListTraceMetrics.duration = duration;
                    playListTraceMetrics.stopreason = reason;
                    playListMetrics.trace.push(playListTraceMetrics);
                    playListTraceMetricsClosed = true;
                }
            }
            function addDVBErrors(errors) {
                metricsModel.addDVBErrors(errors);
            }
            instance = {
                getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,
                getLatestBufferInfoVO: getLatestBufferInfoVO,
                getCurrentBufferLevel: getCurrentBufferLevel,
                getCurrentHttpRequest: getCurrentHttpRequest,
                getHttpRequests: getHttpRequests,
                getCurrentDroppedFrames: getCurrentDroppedFrames,
                getCurrentSchedulingInfo: getCurrentSchedulingInfo,
                getCurrentDVRInfo: getCurrentDVRInfo,
                getCurrentManifestUpdate: getCurrentManifestUpdate,
                getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,
                getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,
                addRepresentationSwitch: addRepresentationSwitch,
                addDVRInfo: addDVRInfo,
                updateManifestUpdateInfo: updateManifestUpdateInfo,
                addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,
                addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,
                addManifestUpdate: addManifestUpdate,
                addHttpRequest: addHttpRequest,
                addSchedulingInfo: addSchedulingInfo,
                addRequestsQueue: addRequestsQueue,
                addBufferLevel: addBufferLevel,
                addBufferState: addBufferState,
                addDroppedFrames: addDroppedFrames,
                addPlayList: addPlayList,
                addDVBErrors: addDVBErrors,
                createPlaylistMetrics: createPlaylistMetrics,
                createPlaylistTraceMetrics: createPlaylistTraceMetrics,
                updatePlayListTraceMetrics: updatePlayListTraceMetrics,
                pushPlayListTraceMetrics: pushPlayListTraceMetrics,
                clearAllCurrentMetrics: clearAllCurrentMetrics
            };
            setup();
            return instance;
        }
        DashMetrics.__dashjs_factory_name = "DashMetrics";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(DashMetrics);
        module.exports = exports["default"];
    }, {
        107: 107,
        108: 108,
        150: 150,
        237: 237,
        239: 239,
        48: 48,
        77: 77
    } ],
    60: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _streamingUtilsRequestModifier = _dereq_(213);
        var _streamingUtilsRequestModifier2 = _interopRequireDefault(_streamingUtilsRequestModifier);
        var _voSegment = _dereq_(93);
        var _voSegment2 = _interopRequireDefault(_voSegment);
        var _streamingVoDashJSError = _dereq_(221);
        var _streamingVoDashJSError2 = _interopRequireDefault(_streamingVoDashJSError);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _streamingUtilsBoxParser = _dereq_(203);
        var _streamingUtilsBoxParser2 = _interopRequireDefault(_streamingUtilsBoxParser);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _streamingVoMetricsHTTPRequest = _dereq_(237);
        var _streamingVoFragmentRequest = _dereq_(223);
        var _streamingVoFragmentRequest2 = _interopRequireDefault(_streamingVoFragmentRequest);
        var _streamingNetHTTPLoader = _dereq_(154);
        var _streamingNetHTTPLoader2 = _interopRequireDefault(_streamingNetHTTPLoader);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        function SegmentBaseLoader() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, errHandler = undefined, boxParser = undefined, requestModifier = undefined, dashMetrics = undefined, mediaPlayerModel = undefined, httpLoader = undefined, baseURLController = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function initialize() {
                boxParser = (0, _streamingUtilsBoxParser2["default"])(context).getInstance();
                requestModifier = (0, _streamingUtilsRequestModifier2["default"])(context).getInstance();
                httpLoader = (0, _streamingNetHTTPLoader2["default"])(context).create({
                    errHandler: errHandler,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    requestModifier: requestModifier
                });
            }
            function setConfig(config) {
                if (config.baseURLController) {
                    baseURLController = config.baseURLController;
                }
                if (config.dashMetrics) {
                    dashMetrics = config.dashMetrics;
                }
                if (config.mediaPlayerModel) {
                    mediaPlayerModel = config.mediaPlayerModel;
                }
                if (config.errHandler) {
                    errHandler = config.errHandler;
                }
            }
            function checkConfig() {
                if (!baseURLController || !baseURLController.hasOwnProperty("resolve")) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function loadInitialization(representation, loadingInfo) {
                checkConfig();
                var initRange = null;
                var baseUrl = representation ? baseURLController.resolve(representation.path) : null;
                var info = loadingInfo || {
                    init: true,
                    url: baseUrl ? baseUrl.url : undefined,
                    range: {
                        start: 0,
                        end: 1500
                    },
                    searching: false,
                    bytesLoaded: 0,
                    bytesToLoad: 1500,
                    mediaType: representation && representation.adaptation ? representation.adaptation.type : null
                };
                logger.debug("Start searching for initialization.");
                var request = getFragmentRequest(info);
                var onload = function onload(response) {
                    info.bytesLoaded = info.range.end;
                    initRange = boxParser.findInitRange(response);
                    if (initRange) {
                        representation.range = initRange;
                        eventBus.trigger(_coreEventsEvents2["default"].INITIALIZATION_LOADED, {
                            representation: representation
                        });
                    } else {
                        info.range.end = info.bytesLoaded + info.bytesToLoad;
                        loadInitialization(representation, info);
                    }
                };
                var onerror = function onerror() {
                    eventBus.trigger(_coreEventsEvents2["default"].INITIALIZATION_LOADED, {
                        representation: representation
                    });
                };
                httpLoader.load({
                    request: request,
                    success: onload,
                    error: onerror
                });
                logger.debug("Perform init search: " + info.url);
            }
            function loadSegments(representation, type, range, loadingInfo, callback) {
                checkConfig();
                if (range && (range.start === undefined || range.end === undefined)) {
                    var parts = range ? range.toString().split("-") : null;
                    range = parts ? {
                        start: parseFloat(parts[0]),
                        end: parseFloat(parts[1])
                    } : null;
                }
                callback = !callback ? onLoaded : callback;
                var isoFile = null;
                var sidx = null;
                var hasRange = !!range;
                var baseUrl = representation ? baseURLController.resolve(representation.path) : null;
                var info = {
                    init: false,
                    url: baseUrl ? baseUrl.url : undefined,
                    range: hasRange ? range : {
                        start: 0,
                        end: 1500
                    },
                    searching: !hasRange,
                    bytesLoaded: loadingInfo ? loadingInfo.bytesLoaded : 0,
                    bytesToLoad: 1500,
                    mediaType: representation && representation.adaptation ? representation.adaptation.type : null
                };
                var request = getFragmentRequest(info);
                var onload = function onload(response) {
                    var extraBytes = info.bytesToLoad;
                    var loadedLength = response.byteLength;
                    info.bytesLoaded = info.range.end - info.range.start;
                    isoFile = boxParser.parse(response);
                    sidx = isoFile.getBox("sidx");
                    if (!sidx || !sidx.isComplete) {
                        if (sidx) {
                            info.range.start = sidx.offset || info.range.start;
                            info.range.end = info.range.start + (sidx.size || extraBytes);
                        } else if (loadedLength < info.bytesLoaded) {
                            callback(null, representation, type);
                            return;
                        } else {
                            var lastBox = isoFile.getLastBox();
                            if (lastBox && lastBox.size) {
                                info.range.start = lastBox.offset + lastBox.size;
                                info.range.end = info.range.start + extraBytes;
                            } else {
                                info.range.end += extraBytes;
                            }
                        }
                        loadSegments(representation, type, info.range, info, callback);
                    } else {
                        var ref = sidx.references;
                        var loadMultiSidx = undefined, segments = undefined;
                        if (ref !== null && ref !== undefined && ref.length > 0) {
                            loadMultiSidx = ref[0].reference_type === 1;
                        }
                        if (loadMultiSidx) {
                            (function() {
                                logger.debug("Initiate multiple SIDX load.");
                                info.range.end = info.range.start + sidx.size;
                                var j = undefined, len = undefined, ss = undefined, se = undefined, r = undefined;
                                var segs = [];
                                var count = 0;
                                var offset = (sidx.offset || info.range.start) + sidx.size;
                                var tmpCallback = function tmpCallback(result) {
                                    if (result) {
                                        segs = segs.concat(result);
                                        count++;
                                        if (count >= len) {
                                            callback(segs, representation, type);
                                        }
                                    } else {
                                        callback(null, representation, type);
                                    }
                                };
                                for (j = 0, len = ref.length; j < len; j++) {
                                    ss = offset;
                                    se = offset + ref[j].referenced_size - 1;
                                    offset = offset + ref[j].referenced_size;
                                    r = {
                                        start: ss,
                                        end: se
                                    };
                                    loadSegments(representation, null, r, info, tmpCallback);
                                }
                            })();
                        } else {
                            logger.debug("Parsing segments from SIDX.");
                            segments = getSegmentsForSidx(sidx, info);
                            callback(segments, representation, type);
                        }
                    }
                };
                var onerror = function onerror() {
                    callback(null, representation, type);
                };
                httpLoader.load({
                    request: request,
                    success: onload,
                    error: onerror
                });
                logger.debug("Perform SIDX load: " + info.url);
            }
            function reset() {
                httpLoader.abort();
                httpLoader = null;
                errHandler = null;
                boxParser = null;
                requestModifier = null;
            }
            function getSegmentsForSidx(sidx, info) {
                var refs = sidx.references;
                var len = refs.length;
                var timescale = sidx.timescale;
                var time = sidx.earliest_presentation_time;
                var start = info.range.start + sidx.offset + sidx.first_offset + sidx.size;
                var segments = [];
                var segment = undefined, end = undefined, duration = undefined, size = undefined;
                for (var i = 0; i < len; i++) {
                    duration = refs[i].subsegment_duration;
                    size = refs[i].referenced_size;
                    segment = new _voSegment2["default"]();
                    segment.duration = duration;
                    segment.startTime = time;
                    segment.timescale = timescale;
                    end = start + size - 1;
                    segment.mediaRange = start + "-" + end;
                    segments.push(segment);
                    time += duration;
                    start += size;
                }
                return segments;
            }
            function getFragmentRequest(info) {
                if (!info.url) {
                    return;
                }
                var request = new _streamingVoFragmentRequest2["default"]();
                request.type = info.init ? _streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;
                request.url = info.url;
                request.range = info.range.start + "-" + info.range.end;
                request.mediaType = info.mediaType;
                return request;
            }
            function onLoaded(segments, representation, type) {
                if (segments) {
                    eventBus.trigger(_coreEventsEvents2["default"].SEGMENTS_LOADED, {
                        segments: segments,
                        representation: representation,
                        mediaType: type
                    });
                } else {
                    eventBus.trigger(_coreEventsEvents2["default"].SEGMENTS_LOADED, {
                        segments: null,
                        representation: representation,
                        mediaType: type,
                        error: new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].SEGMENT_BASE_LOADER_ERROR_CODE, _coreErrorsErrors2["default"].SEGMENT_BASE_LOADER_ERROR_MESSAGE)
                    });
                }
            }
            instance = {
                setConfig: setConfig,
                initialize: initialize,
                loadInitialization: loadInitialization,
                loadSegments: loadSegments,
                reset: reset
            };
            setup();
            return instance;
        }
        SegmentBaseLoader.__dashjs_factory_name = "SegmentBaseLoader";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(SegmentBaseLoader);
        module.exports = exports["default"];
    }, {
        154: 154,
        203: 203,
        213: 213,
        221: 221,
        223: 223,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55,
        93: 93
    } ],
    61: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _streamingUtilsEBMLParser = _dereq_(207);
        var _streamingUtilsEBMLParser2 = _interopRequireDefault(_streamingUtilsEBMLParser);
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _streamingUtilsRequestModifier = _dereq_(213);
        var _streamingUtilsRequestModifier2 = _interopRequireDefault(_streamingUtilsRequestModifier);
        var _voSegment = _dereq_(93);
        var _voSegment2 = _interopRequireDefault(_voSegment);
        var _streamingVoMetricsHTTPRequest = _dereq_(237);
        var _streamingVoFragmentRequest = _dereq_(223);
        var _streamingVoFragmentRequest2 = _interopRequireDefault(_streamingVoFragmentRequest);
        var _streamingNetHTTPLoader = _dereq_(154);
        var _streamingNetHTTPLoader2 = _interopRequireDefault(_streamingNetHTTPLoader);
        var _streamingVoDashJSError = _dereq_(221);
        var _streamingVoDashJSError2 = _interopRequireDefault(_streamingVoDashJSError);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        function WebmSegmentBaseLoader() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, WebM = undefined, errHandler = undefined, requestModifier = undefined, dashMetrics = undefined, mediaPlayerModel = undefined, httpLoader = undefined, baseURLController = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                WebM = {
                    EBML: {
                        tag: 440786851,
                        required: true
                    },
                    Segment: {
                        tag: 408125543,
                        required: true,
                        SeekHead: {
                            tag: 290298740,
                            required: true
                        },
                        Info: {
                            tag: 357149030,
                            required: true,
                            TimecodeScale: {
                                tag: 2807729,
                                required: true,
                                parse: "getMatroskaUint"
                            },
                            Duration: {
                                tag: 17545,
                                required: true,
                                parse: "getMatroskaFloat"
                            }
                        },
                        Tracks: {
                            tag: 374648427,
                            required: true
                        },
                        Cues: {
                            tag: 475249515,
                            required: true,
                            CuePoint: {
                                tag: 187,
                                required: true,
                                CueTime: {
                                    tag: 179,
                                    required: true,
                                    parse: "getMatroskaUint"
                                },
                                CueTrackPositions: {
                                    tag: 183,
                                    required: true,
                                    CueTrack: {
                                        tag: 247,
                                        required: true,
                                        parse: "getMatroskaUint"
                                    },
                                    CueClusterPosition: {
                                        tag: 241,
                                        required: true,
                                        parse: "getMatroskaUint"
                                    }
                                }
                            }
                        }
                    },
                    Void: {
                        tag: 236,
                        required: true
                    }
                };
            }
            function initialize() {
                requestModifier = (0, _streamingUtilsRequestModifier2["default"])(context).getInstance();
                httpLoader = (0, _streamingNetHTTPLoader2["default"])(context).create({
                    errHandler: errHandler,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    requestModifier: requestModifier
                });
            }
            function setConfig(config) {
                if (!config.baseURLController || !config.dashMetrics || !config.mediaPlayerModel || !config.errHandler) {
                    throw new Error(_streamingConstantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
                baseURLController = config.baseURLController;
                dashMetrics = config.dashMetrics;
                mediaPlayerModel = config.mediaPlayerModel;
                errHandler = config.errHandler;
            }
            function parseCues(ab) {
                var cues = [];
                var ebmlParser = (0, _streamingUtilsEBMLParser2["default"])(context).create({
                    data: ab
                });
                var cue = undefined, cueTrack = undefined;
                ebmlParser.consumeTagAndSize(WebM.Segment.Cues);
                while (ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint, true)) {
                    cue = {};
                    cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime);
                    cue.CueTracks = [];
                    while (ebmlParser.moreData() && ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions, true)) {
                        var cueTrackPositionSize = ebmlParser.getMatroskaCodedNum();
                        var startPos = ebmlParser.getPos();
                        cueTrack = {};
                        cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack);
                        if (cueTrack.Track === 0) {
                            throw new Error("Cue track cannot be 0");
                        }
                        cueTrack.ClusterPosition = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition);
                        cue.CueTracks.push(cueTrack);
                        ebmlParser.setPos(startPos + cueTrackPositionSize);
                    }
                    if (cue.CueTracks.length === 0) {
                        throw new Error("Mandatory cuetrack not found");
                    }
                    cues.push(cue);
                }
                if (cues.length === 0) {
                    throw new Error("mandatory cuepoint not found");
                }
                return cues;
            }
            function parseSegments(data, segmentStart, segmentEnd, segmentDuration) {
                var duration = undefined, parsed = undefined, segments = undefined, segment = undefined, i = undefined, len = undefined, start = undefined, end = undefined;
                parsed = parseCues(data);
                segments = [];
                for (i = 0, len = parsed.length; i < len; i += 1) {
                    segment = new _voSegment2["default"]();
                    duration = 0;
                    if (i < parsed.length - 1) {
                        duration = parsed[i + 1].CueTime - parsed[i].CueTime;
                    } else {
                        duration = segmentDuration - parsed[i].CueTime;
                    }
                    segment.duration = duration;
                    segment.startTime = parsed[i].CueTime;
                    segment.timescale = 1e3;
                    start = parsed[i].CueTracks[0].ClusterPosition + segmentStart;
                    if (i < parsed.length - 1) {
                        end = parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1;
                    } else {
                        end = segmentEnd - 1;
                    }
                    segment.mediaRange = start + "-" + end;
                    segments.push(segment);
                }
                logger.debug("Parsed cues: " + segments.length + " cues.");
                return segments;
            }
            function parseEbmlHeader(data, media, theRange, callback) {
                if (!data || data.byteLength === 0) {
                    callback(null);
                    return;
                }
                var ebmlParser = (0, _streamingUtilsEBMLParser2["default"])(context).create({
                    data: data
                });
                var duration = undefined, segments = undefined, segmentEnd = undefined, segmentStart = undefined;
                var parts = theRange ? theRange.split("-") : null;
                var request = null;
                var info = {
                    url: media,
                    range: {
                        start: parts ? parseFloat(parts[0]) : null,
                        end: parts ? parseFloat(parts[1]) : null
                    },
                    request: request
                };
                logger.debug("Parse EBML header: " + info.url);
                ebmlParser.skipOverElement(WebM.EBML);
                ebmlParser.consumeTag(WebM.Segment);
                segmentEnd = ebmlParser.getMatroskaCodedNum();
                segmentEnd += ebmlParser.getPos();
                segmentStart = ebmlParser.getPos();
                while (ebmlParser.moreData() && !ebmlParser.consumeTagAndSize(WebM.Segment.Info, true)) {
                    if (!(ebmlParser.skipOverElement(WebM.Segment.SeekHead, true) || ebmlParser.skipOverElement(WebM.Segment.Tracks, true) || ebmlParser.skipOverElement(WebM.Segment.Cues, true) || ebmlParser.skipOverElement(WebM.Void, true))) {
                        throw new Error("no valid top level element found");
                    }
                }
                while (duration === undefined) {
                    var infoTag = ebmlParser.getMatroskaCodedNum(true);
                    var infoElementSize = ebmlParser.getMatroskaCodedNum();
                    switch (infoTag) {
                      case WebM.Segment.Info.Duration.tag:
                        duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);
                        break;

                      default:
                        ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);
                        break;
                    }
                }
                request = getFragmentRequest(info);
                var onload = function onload(response) {
                    segments = parseSegments(response, segmentStart, segmentEnd, duration);
                    callback(segments);
                };
                var onloadend = function onloadend() {
                    logger.error("Download Error: Cues " + info.url);
                    callback(null);
                };
                httpLoader.load({
                    request: request,
                    success: onload,
                    error: onloadend
                });
                logger.debug("Perform cues load: " + info.url + " bytes=" + info.range.start + "-" + info.range.end);
            }
            function checkConfig() {
                if (!baseURLController || !baseURLController.hasOwnProperty("resolve")) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function loadInitialization(representation, loadingInfo) {
                checkConfig();
                var request = null;
                var baseUrl = representation ? baseURLController.resolve(representation.path) : null;
                var media = baseUrl ? baseUrl.url : undefined;
                var initRange = representation ? representation.range.split("-") : null;
                var info = loadingInfo || {
                    range: {
                        start: initRange ? parseFloat(initRange[0]) : null,
                        end: initRange ? parseFloat(initRange[1]) : null
                    },
                    request: request,
                    url: media,
                    init: true
                };
                logger.info("Start loading initialization.");
                request = getFragmentRequest(info);
                var onload = function onload() {
                    eventBus.trigger(_coreEventsEvents2["default"].INITIALIZATION_LOADED, {
                        representation: representation
                    });
                };
                var onloadend = function onloadend() {
                    eventBus.trigger(_coreEventsEvents2["default"].INITIALIZATION_LOADED, {
                        representation: representation
                    });
                };
                httpLoader.load({
                    request: request,
                    success: onload,
                    error: onloadend
                });
                logger.debug("Perform init load: " + info.url);
            }
            function loadSegments(representation, type, theRange, callback) {
                checkConfig();
                var request = null;
                var baseUrl = representation ? baseURLController.resolve(representation.path) : null;
                var media = baseUrl ? baseUrl.url : undefined;
                var bytesToLoad = 8192;
                var info = {
                    bytesLoaded: 0,
                    bytesToLoad: bytesToLoad,
                    range: {
                        start: 0,
                        end: bytesToLoad
                    },
                    request: request,
                    url: media,
                    init: false
                };
                callback = !callback ? onLoaded : callback;
                request = getFragmentRequest(info);
                logger.debug("Parsing ebml header");
                var onload = function onload(response) {
                    parseEbmlHeader(response, media, theRange, function(segments) {
                        callback(segments, representation, type);
                    });
                };
                var onloadend = function onloadend() {
                    callback(null, representation, type);
                };
                httpLoader.load({
                    request: request,
                    success: onload,
                    error: onloadend
                });
            }
            function onLoaded(segments, representation, type) {
                if (segments) {
                    eventBus.trigger(_coreEventsEvents2["default"].SEGMENTS_LOADED, {
                        segments: segments,
                        representation: representation,
                        mediaType: type
                    });
                } else {
                    eventBus.trigger(_coreEventsEvents2["default"].SEGMENTS_LOADED, {
                        segments: null,
                        representation: representation,
                        mediaType: type,
                        error: new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].SEGMENT_BASE_LOADER_ERROR_CODE, _coreErrorsErrors2["default"].SEGMENT_BASE_LOADER_ERROR_MESSAGE)
                    });
                }
            }
            function getFragmentRequest(info) {
                var request = new _streamingVoFragmentRequest2["default"]();
                request.type = info.init ? _streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;
                request.url = info.url;
                request.range = info.range.start + "-" + info.range.end;
                return request;
            }
            function reset() {
                errHandler = null;
                requestModifier = null;
            }
            instance = {
                setConfig: setConfig,
                initialize: initialize,
                loadInitialization: loadInitialization,
                loadSegments: loadSegments,
                reset: reset
            };
            setup();
            return instance;
        }
        WebmSegmentBaseLoader.__dashjs_factory_name = "WebmSegmentBaseLoader";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(WebmSegmentBaseLoader);
        module.exports = exports["default"];
    }, {
        107: 107,
        154: 154,
        207: 207,
        213: 213,
        221: 221,
        223: 223,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55,
        93: 93
    } ],
    62: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DashConstants = function() {
            _createClass(DashConstants, [ {
                key: "init",
                value: function init() {
                    this.BASE_URL = "BaseURL";
                    this.SEGMENT_BASE = "SegmentBase";
                    this.SEGMENT_TEMPLATE = "SegmentTemplate";
                    this.SEGMENT_LIST = "SegmentList";
                    this.SEGMENT_URL = "SegmentURL";
                    this.SEGMENT_TIMELINE = "SegmentTimeline";
                    this.SEGMENT_PROFILES = "segmentProfiles";
                    this.ADAPTATION_SET = "AdaptationSet";
                    this.REPRESENTATION = "Representation";
                    this.REPRESENTATION_INDEX = "RepresentationIndex";
                    this.SUB_REPRESENTATION = "SubRepresentation";
                    this.INITIALIZATION = "Initialization";
                    this.INITIALIZATION_MINUS = "initialization";
                    this.MPD = "MPD";
                    this.PERIOD = "Period";
                    this.ASSET_IDENTIFIER = "AssetIdentifier";
                    this.EVENT_STREAM = "EventStream";
                    this.ID = "id";
                    this.PROFILES = "profiles";
                    this.SERVICE_LOCATION = "serviceLocation";
                    this.RANGE = "range";
                    this.INDEX = "index";
                    this.MEDIA = "media";
                    this.BYTE_RANGE = "byteRange";
                    this.INDEX_RANGE = "indexRange";
                    this.MEDIA_RANGE = "mediaRange";
                    this.VALUE = "value";
                    this.CONTENT_TYPE = "contentType";
                    this.MIME_TYPE = "mimeType";
                    this.BITSTREAM_SWITCHING = "BitstreamSwitching";
                    this.BITSTREAM_SWITCHING_MINUS = "bitstreamSwitching";
                    this.CODECS = "codecs";
                    this.DEPENDENCY_ID = "dependencyId";
                    this.MEDIA_STREAM_STRUCTURE_ID = "mediaStreamStructureId";
                    this.METRICS = "Metrics";
                    this.METRICS_MINUS = "metrics";
                    this.REPORTING = "Reporting";
                    this.WIDTH = "width";
                    this.HEIGHT = "height";
                    this.SAR = "sar";
                    this.FRAMERATE = "frameRate";
                    this.AUDIO_SAMPLING_RATE = "audioSamplingRate";
                    this.MAXIMUM_SAP_PERIOD = "maximumSAPPeriod";
                    this.START_WITH_SAP = "startWithSAP";
                    this.MAX_PLAYOUT_RATE = "maxPlayoutRate";
                    this.CODING_DEPENDENCY = "codingDependency";
                    this.SCAN_TYPE = "scanType";
                    this.FRAME_PACKING = "FramePacking";
                    this.AUDIO_CHANNEL_CONFIGURATION = "AudioChannelConfiguration";
                    this.CONTENT_PROTECTION = "ContentProtection";
                    this.ESSENTIAL_PROPERTY = "EssentialProperty";
                    this.SUPPLEMENTAL_PROPERTY = "SupplementalProperty";
                    this.INBAND_EVENT_STREAM = "InbandEventStream";
                    this.ACCESSIBILITY = "Accessibility";
                    this.ROLE = "Role";
                    this.RATING = "Rating";
                    this.CONTENT_COMPONENT = "ContentComponent";
                    this.SUBSET = "Subset";
                    this.LANG = "lang";
                    this.VIEWPOINT = "Viewpoint";
                    this.ROLE_ASARRAY = "Role_asArray";
                    this.ACCESSIBILITY_ASARRAY = "Accessibility_asArray";
                    this.AUDIOCHANNELCONFIGURATION_ASARRAY = "AudioChannelConfiguration_asArray";
                    this.CONTENTPROTECTION_ASARRAY = "ContentProtection_asArray";
                    this.MAIN = "main";
                    this.DYNAMIC = "dynamic";
                    this.MEDIA_PRESENTATION_DURATION = "mediaPresentationDuration";
                    this.MINIMUM_UPDATE_PERIOD = "minimumUpdatePeriod";
                    this.CODEC_PRIVATE_DATA = "codecPrivateData";
                    this.BANDWITH = "bandwidth";
                    this.SOURCE_URL = "sourceURL";
                    this.TIMESCALE = "timescale";
                    this.DURATION = "duration";
                    this.START_NUMBER = "startNumber";
                    this.PRESENTATION_TIME_OFFSET = "presentationTimeOffset";
                    this.AVAILABILITY_START_TIME = "availabilityStartTime";
                    this.AVAILABILITY_END_TIME = "availabilityEndTime";
                    this.TIMESHIFT_BUFFER_DEPTH = "timeShiftBufferDepth";
                    this.MAX_SEGMENT_DURATION = "maxSegmentDuration";
                    this.PRESENTATION_TIME = "presentationTime";
                    this.MIN_BUFFER_TIME = "minBufferTime";
                    this.MAX_SUBSEGMENT_DURATION = "maxSubsegmentDuration";
                    this.START = "start";
                    this.AVAILABILITY_TIME_OFFSET = "availabilityTimeOffset";
                    this.AVAILABILITY_TIME_COMPLETE = "availabilityTimeComplete";
                    this.CENC_DEFAULT_KID = "cenc:default_KID";
                    this.DVB_PRIORITY = "dvb:priority";
                    this.DVB_WEIGHT = "dvb:weight";
                    this.SUGGESTED_PRESENTATION_DELAY = "suggestedPresentationDelay";
                }
            } ]);
            function DashConstants() {
                _classCallCheck(this, DashConstants);
                this.init();
            }
            return DashConstants;
        }();
        var constants = new DashConstants();
        exports["default"] = constants;
        module.exports = exports["default"];
    }, {} ],
    63: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var _streamingVoDashJSError = _dereq_(221);
        var _streamingVoDashJSError2 = _interopRequireDefault(_streamingVoDashJSError);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voRepresentation = _dereq_(91);
        var _voRepresentation2 = _interopRequireDefault(_voRepresentation);
        function RepresentationController() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, realAdaptation = undefined, updating = undefined, voAvailableRepresentations = undefined, currentVoRepresentation = undefined, abrController = undefined, indexHandler = undefined, playbackController = undefined, timelineConverter = undefined, dashMetrics = undefined, streamProcessor = undefined, manifestModel = undefined;
            function setup() {
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);
                eventBus.on(_coreEventsEvents2["default"].REPRESENTATION_UPDATED, onRepresentationUpdated, instance);
                eventBus.on(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);
                eventBus.on(_coreEventsEvents2["default"].BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);
                eventBus.on(_coreEventsEvents2["default"].MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);
            }
            function setConfig(config) {
                if (config.abrController) {
                    abrController = config.abrController;
                }
                if (config.dashMetrics) {
                    dashMetrics = config.dashMetrics;
                }
                if (config.playbackController) {
                    playbackController = config.playbackController;
                }
                if (config.timelineConverter) {
                    timelineConverter = config.timelineConverter;
                }
                if (config.manifestModel) {
                    manifestModel = config.manifestModel;
                }
                if (config.streamProcessor) {
                    streamProcessor = config.streamProcessor;
                }
            }
            function checkConfig() {
                if (!abrController || !dashMetrics || !playbackController || !timelineConverter || !manifestModel || !streamProcessor) {
                    throw new Error(_streamingConstantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function initialize() {
                indexHandler = streamProcessor.getIndexHandler();
            }
            function getStreamProcessor() {
                return streamProcessor;
            }
            function getData() {
                return realAdaptation;
            }
            function isUpdating() {
                return updating;
            }
            function getCurrentRepresentation() {
                return currentVoRepresentation;
            }
            function resetInitialSettings() {
                realAdaptation = null;
                updating = true;
                voAvailableRepresentations = [];
                abrController = null;
                playbackController = null;
                timelineConverter = null;
                dashMetrics = null;
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);
                eventBus.off(_coreEventsEvents2["default"].REPRESENTATION_UPDATED, onRepresentationUpdated, instance);
                eventBus.off(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);
                eventBus.off(_coreEventsEvents2["default"].BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);
                eventBus.off(_coreEventsEvents2["default"].MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);
                resetInitialSettings();
            }
            function updateData(newRealAdaptation, availableRepresentations, type) {
                checkConfig();
                var streamInfo = streamProcessor.getStreamInfo();
                var maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);
                var minIdx = abrController.getMinAllowedIndexFor(type);
                var quality = undefined, averageThroughput = undefined;
                var bitrate = null;
                updating = true;
                eventBus.trigger(_coreEventsEvents2["default"].DATA_UPDATE_STARTED, {
                    sender: this
                });
                voAvailableRepresentations = availableRepresentations;
                if ((realAdaptation === null || realAdaptation.id != newRealAdaptation.id) && type !== _streamingConstantsConstants2["default"].FRAGMENTED_TEXT) {
                    averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);
                    bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);
                    quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);
                } else {
                    quality = abrController.getQualityFor(type);
                }
                if (minIdx !== undefined && quality < minIdx) {
                    quality = minIdx;
                }
                if (quality > maxQuality) {
                    quality = maxQuality;
                }
                currentVoRepresentation = getRepresentationForQuality(quality);
                realAdaptation = newRealAdaptation;
                if (type !== _streamingConstantsConstants2["default"].VIDEO && type !== _streamingConstantsConstants2["default"].AUDIO && type !== _streamingConstantsConstants2["default"].FRAGMENTED_TEXT) {
                    updating = false;
                    eventBus.trigger(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, {
                        sender: this,
                        data: realAdaptation,
                        currentRepresentation: currentVoRepresentation
                    });
                    return;
                }
                for (var i = 0; i < voAvailableRepresentations.length; i++) {
                    indexHandler.updateRepresentation(voAvailableRepresentations[i], true);
                }
            }
            function addRepresentationSwitch() {
                checkConfig();
                var now = new Date();
                var currentRepresentation = getCurrentRepresentation();
                var currentVideoTimeMs = playbackController.getTime() * 1e3;
                if (currentRepresentation) {
                    dashMetrics.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);
                }
            }
            function addDVRMetric() {
                checkConfig();
                var streamInfo = streamProcessor.getStreamInfo();
                var manifestInfo = streamInfo ? streamInfo.manifestInfo : null;
                var isDynamic = manifestInfo ? manifestInfo.isDynamic : null;
                var range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);
                dashMetrics.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);
            }
            function getRepresentationForQuality(quality) {
                return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];
            }
            function getQualityForRepresentation(voRepresentation) {
                return voAvailableRepresentations.indexOf(voRepresentation);
            }
            function isAllRepresentationsUpdated() {
                for (var i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {
                    var segmentInfoType = voAvailableRepresentations[i].segmentInfoType;
                    if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !_voRepresentation2["default"].hasInitialization(voAvailableRepresentations[i]) || (segmentInfoType === _constantsDashConstants2["default"].SEGMENT_BASE || segmentInfoType === _constantsDashConstants2["default"].BASE_URL) && !voAvailableRepresentations[i].segments) {
                        return false;
                    }
                }
                return true;
            }
            function updateAvailabilityWindow(isDynamic) {
                var voRepresentation = undefined;
                checkConfig();
                for (var i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {
                    voRepresentation = voAvailableRepresentations[i];
                    voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);
                }
            }
            function resetAvailabilityWindow() {
                voAvailableRepresentations.forEach(function(rep) {
                    rep.segmentAvailabilityRange = null;
                });
            }
            function postponeUpdate(postponeTimePeriod) {
                var delay = postponeTimePeriod;
                var update = function update() {
                    if (isUpdating()) return;
                    updating = true;
                    eventBus.trigger(_coreEventsEvents2["default"].DATA_UPDATE_STARTED, {
                        sender: instance
                    });
                    resetAvailabilityWindow();
                    for (var i = 0; i < voAvailableRepresentations.length; i++) {
                        indexHandler.updateRepresentation(voAvailableRepresentations[i], true);
                    }
                };
                updating = false;
                eventBus.trigger(_coreEventsEvents2["default"].AST_IN_FUTURE, {
                    delay: delay
                });
                setTimeout(update, delay);
            }
            function onRepresentationUpdated(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;
                if (e.error) {
                    eventBus.trigger(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, {
                        sender: this,
                        error: e.error
                    });
                    return;
                }
                var r = e.representation;
                var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate();
                var alreadyAdded = false;
                var postponeTimePeriod = 0;
                var repInfo = undefined, err = undefined, repSwitch = undefined;
                if (r.adaptation.period.mpd.manifest.type === _constantsDashConstants2["default"].DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod) {
                    var segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;
                    var liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);
                    postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1e3;
                }
                if (postponeTimePeriod > 0) {
                    addDVRMetric();
                    postponeUpdate(postponeTimePeriod);
                    err = new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].SEGMENTS_UPDATE_FAILED_ERROR_CODE, _coreErrorsErrors2["default"].SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);
                    eventBus.trigger(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, {
                        sender: this,
                        data: realAdaptation,
                        currentRepresentation: currentVoRepresentation,
                        error: err
                    });
                    return;
                }
                if (manifestUpdateInfo) {
                    for (var i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {
                        repInfo = manifestUpdateInfo.representationInfo[i];
                        if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        dashMetrics.addManifestUpdateRepresentationInfo(r, streamProcessor.getType());
                    }
                }
                if (isAllRepresentationsUpdated()) {
                    updating = false;
                    abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));
                    dashMetrics.updateManifestUpdateInfo({
                        latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()
                    });
                    repSwitch = dashMetrics.getCurrentRepresentationSwitch(getCurrentRepresentation().adaptation.type);
                    if (!repSwitch) {
                        addRepresentationSwitch();
                    }
                    eventBus.trigger(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, {
                        sender: this,
                        data: realAdaptation,
                        currentRepresentation: currentVoRepresentation
                    });
                }
            }
            function onWallclockTimeUpdated(e) {
                if (e.isDynamic) {
                    updateAvailabilityWindow(e.isDynamic);
                }
            }
            function onBufferLevelUpdated(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor) return;
                var manifest = manifestModel.getValue();
                if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {
                    addDVRMetric();
                }
            }
            function onQualityChanged(e) {
                if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;
                currentVoRepresentation = getRepresentationForQuality(e.newQuality);
                addRepresentationSwitch();
            }
            function onManifestValidityChanged(e) {
                if (e.newDuration) {
                    var representation = getCurrentRepresentation();
                    if (representation && representation.adaptation.period) {
                        var period = representation.adaptation.period;
                        period.duration = e.newDuration;
                    }
                }
            }
            instance = {
                initialize: initialize,
                setConfig: setConfig,
                getData: getData,
                isUpdating: isUpdating,
                updateData: updateData,
                getStreamProcessor: getStreamProcessor,
                getCurrentRepresentation: getCurrentRepresentation,
                getRepresentationForQuality: getRepresentationForQuality,
                reset: reset
            };
            setup();
            return instance;
        }
        RepresentationController.__dashjs_factory_name = "RepresentationController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(RepresentationController);
        module.exports = exports["default"];
    }, {
        107: 107,
        221: 221,
        47: 47,
        48: 48,
        52: 52,
        55: 55,
        62: 62,
        91: 91
    } ],
    64: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var _voRepresentation = _dereq_(91);
        var _voRepresentation2 = _interopRequireDefault(_voRepresentation);
        var _voAdaptationSet = _dereq_(83);
        var _voAdaptationSet2 = _interopRequireDefault(_voAdaptationSet);
        var _voPeriod = _dereq_(90);
        var _voPeriod2 = _interopRequireDefault(_voPeriod);
        var _voMpd = _dereq_(89);
        var _voMpd2 = _interopRequireDefault(_voMpd);
        var _voUTCTiming = _dereq_(95);
        var _voUTCTiming2 = _interopRequireDefault(_voUTCTiming);
        var _voEvent = _dereq_(85);
        var _voEvent2 = _interopRequireDefault(_voEvent);
        var _voBaseURL = _dereq_(84);
        var _voBaseURL2 = _interopRequireDefault(_voBaseURL);
        var _voEventStream = _dereq_(86);
        var _voEventStream2 = _interopRequireDefault(_voEventStream);
        var _streamingUtilsObjectUtils = _dereq_(212);
        var _streamingUtilsObjectUtils2 = _interopRequireDefault(_streamingUtilsObjectUtils);
        var _streamingUtilsURLUtils = _dereq_(216);
        var _streamingUtilsURLUtils2 = _interopRequireDefault(_streamingUtilsURLUtils);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _streamingVoDashJSError = _dereq_(221);
        var _streamingVoDashJSError2 = _interopRequireDefault(_streamingVoDashJSError);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _streamingThumbnailThumbnailTracks = _dereq_(201);
        function DashManifestModel() {
            var instance = undefined, logger = undefined, errHandler = undefined, BASE64 = undefined;
            var context = this.context;
            var urlUtils = (0, _streamingUtilsURLUtils2["default"])(context).getInstance();
            var isInteger = Number.isInteger || function(value) {
                return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
            };
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function getIsTypeOf(adaptation, type) {
                var i = undefined, len = undefined, representation = undefined, col = undefined, mimeTypeRegEx = undefined, codecs = undefined;
                var result = false;
                var found = false;
                if (!adaptation) {
                    throw new Error("adaptation is not defined");
                }
                if (!type) {
                    throw new Error("type is not defined");
                }
                if (adaptation.hasOwnProperty("ContentComponent_asArray")) {
                    col = adaptation.ContentComponent_asArray;
                }
                mimeTypeRegEx = type !== _streamingConstantsConstants2["default"].TEXT ? new RegExp(type) : new RegExp("(vtt|ttml)");
                if (adaptation.Representation_asArray && adaptation.Representation_asArray.length && adaptation.Representation_asArray.length > 0) {
                    var essentialProperties = getEssentialPropertiesForRepresentation(adaptation.Representation_asArray[0]);
                    if (essentialProperties && essentialProperties.length > 0 && _streamingThumbnailThumbnailTracks.THUMBNAILS_SCHEME_ID_URIS.indexOf(essentialProperties[0].schemeIdUri) >= 0) {
                        return type === _streamingConstantsConstants2["default"].IMAGE;
                    }
                    if (adaptation.Representation_asArray[0].hasOwnProperty(_constantsDashConstants2["default"].CODECS)) {
                        codecs = adaptation.Representation_asArray[0].codecs;
                        if (codecs.search(_streamingConstantsConstants2["default"].STPP) === 0 || codecs.search(_streamingConstantsConstants2["default"].WVTT) === 0) {
                            return type === _streamingConstantsConstants2["default"].FRAGMENTED_TEXT;
                        }
                    }
                }
                if (col) {
                    if (col.length > 1) {
                        return type === _streamingConstantsConstants2["default"].MUXED;
                    } else if (col[0] && col[0].contentType === type) {
                        result = true;
                        found = true;
                    }
                }
                if (adaptation.hasOwnProperty(_constantsDashConstants2["default"].MIME_TYPE)) {
                    result = mimeTypeRegEx.test(adaptation.mimeType);
                    found = true;
                }
                if (!found) {
                    i = 0;
                    len = adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0;
                    while (!found && i < len) {
                        representation = adaptation.Representation_asArray[i];
                        if (representation.hasOwnProperty(_constantsDashConstants2["default"].MIME_TYPE)) {
                            result = mimeTypeRegEx.test(representation.mimeType);
                            found = true;
                        }
                        i++;
                    }
                }
                return result;
            }
            function getIsAudio(adaptation) {
                return getIsTypeOf(adaptation, _streamingConstantsConstants2["default"].AUDIO);
            }
            function getIsVideo(adaptation) {
                return getIsTypeOf(adaptation, _streamingConstantsConstants2["default"].VIDEO);
            }
            function getIsFragmentedText(adaptation) {
                return getIsTypeOf(adaptation, _streamingConstantsConstants2["default"].FRAGMENTED_TEXT);
            }
            function getIsMuxed(adaptation) {
                return getIsTypeOf(adaptation, _streamingConstantsConstants2["default"].MUXED);
            }
            function getIsImage(adaptation) {
                return getIsTypeOf(adaptation, _streamingConstantsConstants2["default"].IMAGE);
            }
            function getIsTextTrack(type) {
                return type === "text/vtt" || type === "application/ttml+xml";
            }
            function getLanguageForAdaptation(adaptation) {
                var lang = "";
                if (adaptation && adaptation.hasOwnProperty(_constantsDashConstants2["default"].LANG)) {
                    lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g, "");
                }
                return lang;
            }
            function getViewpointForAdaptation(adaptation) {
                return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2["default"].VIEWPOINT) ? adaptation.Viewpoint : null;
            }
            function getRolesForAdaptation(adaptation) {
                return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2["default"].ROLE_ASARRAY) ? adaptation.Role_asArray : [];
            }
            function getAccessibilityForAdaptation(adaptation) {
                return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2["default"].ACCESSIBILITY_ASARRAY) ? adaptation.Accessibility_asArray : [];
            }
            function getAudioChannelConfigurationForAdaptation(adaptation) {
                return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2["default"].AUDIOCHANNELCONFIGURATION_ASARRAY) ? adaptation.AudioChannelConfiguration_asArray : [];
            }
            function getRepresentationSortFunction() {
                return function(a, b) {
                    return a.bandwidth - b.bandwidth;
                };
            }
            function processAdaptation(realAdaptation) {
                if (realAdaptation && Array.isArray(realAdaptation.Representation_asArray)) {
                    realAdaptation.Representation_asArray.sort(getRepresentationSortFunction());
                }
                return realAdaptation;
            }
            function getRealAdaptations(manifest, periodIndex) {
                return manifest && manifest.Period_asArray && isInteger(periodIndex) ? manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [] : [];
            }
            function getAdaptationForId(id, manifest, periodIndex) {
                var realAdaptations = getRealAdaptations(manifest, periodIndex);
                var i = undefined, len = undefined;
                for (i = 0, len = realAdaptations.length; i < len; i++) {
                    if (realAdaptations[i].hasOwnProperty(_constantsDashConstants2["default"].ID) && realAdaptations[i].id === id) {
                        return realAdaptations[i];
                    }
                }
                return null;
            }
            function getAdaptationForIndex(index, manifest, periodIndex) {
                var realAdaptations = getRealAdaptations(manifest, periodIndex);
                if (realAdaptations.length > 0 && isInteger(index)) {
                    return realAdaptations[index];
                } else {
                    return null;
                }
            }
            function getIndexForAdaptation(realAdaptation, manifest, periodIndex) {
                var realAdaptations = getRealAdaptations(manifest, periodIndex);
                var len = realAdaptations.length;
                if (realAdaptation) {
                    for (var i = 0; i < len; i++) {
                        var objectUtils = (0, _streamingUtilsObjectUtils2["default"])(context).getInstance();
                        if (objectUtils.areEqual(realAdaptations[i], realAdaptation)) {
                            return i;
                        }
                    }
                }
                return -1;
            }
            function getAdaptationsForType(manifest, periodIndex, type) {
                var realAdaptations = getRealAdaptations(manifest, periodIndex);
                var i = undefined, len = undefined;
                var adaptations = [];
                for (i = 0, len = realAdaptations.length; i < len; i++) {
                    if (getIsTypeOf(realAdaptations[i], type)) {
                        adaptations.push(processAdaptation(realAdaptations[i]));
                    }
                }
                return adaptations;
            }
            function getCodec(adaptation, representationId, addResolutionInfo) {
                var codec = null;
                if (adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0) {
                    var representation = isInteger(representationId) && representationId >= 0 && representationId < adaptation.Representation_asArray.length ? adaptation.Representation_asArray[representationId] : adaptation.Representation_asArray[0];
                    if (representation) {
                        codec = representation.mimeType + ';codecs="' + representation.codecs + '"';
                        if (addResolutionInfo && representation.width !== undefined) {
                            codec += ';width="' + representation.width + '";height="' + representation.height + '"';
                        }
                    }
                }
                return codec;
            }
            function getMimeType(adaptation) {
                return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 ? adaptation.Representation_asArray[0].mimeType : null;
            }
            function getKID(adaptation) {
                if (!adaptation || !adaptation.hasOwnProperty(_constantsDashConstants2["default"].CENC_DEFAULT_KID)) {
                    return null;
                }
                return adaptation[_constantsDashConstants2["default"].CENC_DEFAULT_KID];
            }
            function getLabelsForAdaptation(adaptation) {
                if (!adaptation || !Array.isArray(adaptation.Label_asArray)) {
                    return [];
                }
                var labelArray = [];
                for (var i = 0; i < adaptation.Label_asArray.length; i++) {
                    labelArray.push({
                        lang: adaptation.Label_asArray[i].lang,
                        text: adaptation.Label_asArray[i].__text || adaptation.Label_asArray[i]
                    });
                }
                return labelArray;
            }
            function getContentProtectionData(adaptation) {
                if (!adaptation || !adaptation.hasOwnProperty(_constantsDashConstants2["default"].CONTENTPROTECTION_ASARRAY) || adaptation.ContentProtection_asArray.length === 0) {
                    return null;
                }
                return adaptation.ContentProtection_asArray;
            }
            function getIsDynamic(manifest) {
                var isDynamic = false;
                if (manifest && manifest.hasOwnProperty("type")) {
                    isDynamic = manifest.type === _constantsDashConstants2["default"].DYNAMIC;
                }
                return isDynamic;
            }
            function hasProfile(manifest, profile) {
                var has = false;
                if (manifest && manifest.profiles && manifest.profiles.length > 0) {
                    has = manifest.profiles.indexOf(profile) !== -1;
                }
                return has;
            }
            function getDuration(manifest) {
                var mpdDuration = undefined;
                if (manifest && manifest.hasOwnProperty(_constantsDashConstants2["default"].MEDIA_PRESENTATION_DURATION)) {
                    mpdDuration = manifest.mediaPresentationDuration;
                } else if (manifest && manifest.type == "dynamic") {
                    mpdDuration = Number.POSITIVE_INFINITY;
                } else {
                    mpdDuration = Number.MAX_SAFE_INTEGER || Number.MAX_VALUE;
                }
                return mpdDuration;
            }
            function getBandwidth(representation) {
                return representation && representation.bandwidth ? representation.bandwidth : NaN;
            }
            function getManifestUpdatePeriod(manifest) {
                var latencyOfLastUpdate = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
                var delay = NaN;
                if (manifest && manifest.hasOwnProperty(_constantsDashConstants2["default"].MINIMUM_UPDATE_PERIOD)) {
                    delay = manifest.minimumUpdatePeriod;
                }
                return isNaN(delay) ? delay : Math.max(delay - latencyOfLastUpdate, 1);
            }
            function getRepresentationCount(adaptation) {
                return adaptation && Array.isArray(adaptation.Representation_asArray) ? adaptation.Representation_asArray.length : 0;
            }
            function getBitrateListForAdaptation(realAdaptation) {
                var processedRealAdaptation = processAdaptation(realAdaptation);
                var realRepresentations = processedRealAdaptation && Array.isArray(processedRealAdaptation.Representation_asArray) ? processedRealAdaptation.Representation_asArray : [];
                return realRepresentations.map(function(realRepresentation) {
                    return {
                        bandwidth: realRepresentation.bandwidth,
                        width: realRepresentation.width || 0,
                        height: realRepresentation.height || 0,
                        scanType: realRepresentation.scanType || null
                    };
                });
            }
            function getEssentialPropertiesForRepresentation(realRepresentation) {
                if (!realRepresentation || !realRepresentation.EssentialProperty_asArray || !realRepresentation.EssentialProperty_asArray.length) return null;
                return realRepresentation.EssentialProperty_asArray.map(function(prop) {
                    return {
                        schemeIdUri: prop.schemeIdUri,
                        value: prop.value
                    };
                });
            }
            function getRepresentationFor(index, adaptation) {
                return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 && isInteger(index) ? adaptation.Representation_asArray[index] : null;
            }
            function getRealAdaptationFor(voAdaptation) {
                if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {
                    var periodArray = voAdaptation.period.mpd.manifest.Period_asArray[voAdaptation.period.index];
                    if (periodArray && periodArray.AdaptationSet_asArray && isInteger(voAdaptation.index)) {
                        return processAdaptation(periodArray.AdaptationSet_asArray[voAdaptation.index]);
                    }
                }
            }
            function isLastRepeatAttributeValid(segmentTimeline) {
                var s = segmentTimeline.S_asArray[segmentTimeline.S_asArray.length - 1];
                return !s.hasOwnProperty("r") || s.r >= 0;
            }
            function getUseCalculatedLiveEdgeTimeForAdaptation(voAdaptation) {
                var realAdaptation = getRealAdaptationFor(voAdaptation);
                var realRepresentation = realAdaptation && Array.isArray(realAdaptation.Representation_asArray) ? realAdaptation.Representation_asArray[0] : null;
                var segmentInfo = undefined;
                if (realRepresentation) {
                    if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_LIST)) {
                        segmentInfo = realRepresentation.SegmentList;
                        return segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_TIMELINE) ? isLastRepeatAttributeValid(segmentInfo.SegmentTimeline) : true;
                    } else if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_TEMPLATE)) {
                        segmentInfo = realRepresentation.SegmentTemplate;
                        if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_TIMELINE)) {
                            return isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);
                        }
                    }
                }
                return false;
            }
            function getRepresentationsForAdaptation(voAdaptation) {
                console.debug(voAdaptation);
                var voRepresentations = [];
                var processedRealAdaptation = getRealAdaptationFor(voAdaptation);
                var segmentInfo = undefined, baseUrl = undefined;
                if (processedRealAdaptation && processedRealAdaptation.Representation_asArray) {
                    if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {
                        var baseUrls = getBaseURLsFromElement(voAdaptation.period.mpd.manifest);
                        if (baseUrls) {
                            baseUrl = baseUrls[0];
                        }
                    }
                    for (var i = 0, len = processedRealAdaptation.Representation_asArray.length; i < len; ++i) {
                        var realRepresentation = processedRealAdaptation.Representation_asArray[i];
                        var voRepresentation = new _voRepresentation2["default"]();
                        voRepresentation.index = i;
                        voRepresentation.adaptation = voAdaptation;
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].ID)) {
                            voRepresentation.id = realRepresentation.id;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].CODECS)) {
                            voRepresentation.codecs = realRepresentation.codecs;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].CODEC_PRIVATE_DATA)) {
                            voRepresentation.codecPrivateData = realRepresentation.codecPrivateData;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].BANDWITH)) {
                            voRepresentation.bandwidth = realRepresentation.bandwidth;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].WIDTH)) {
                            voRepresentation.width = realRepresentation.width;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].HEIGHT)) {
                            voRepresentation.height = realRepresentation.height;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].SCAN_TYPE)) {
                            voRepresentation.scanType = realRepresentation.scanType;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].MAX_PLAYOUT_RATE)) {
                            voRepresentation.maxPlayoutRate = realRepresentation.maxPlayoutRate;
                        }
                        if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_BASE)) {
                            segmentInfo = realRepresentation.SegmentBase;
                            voRepresentation.segmentInfoType = _constantsDashConstants2["default"].SEGMENT_BASE;
                        } else if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_LIST)) {
                            segmentInfo = realRepresentation.SegmentList;
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_TIMELINE)) {
                                voRepresentation.segmentInfoType = _constantsDashConstants2["default"].SEGMENT_TIMELINE;
                                voRepresentation.useCalculatedLiveEdgeTime = isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);
                            } else {
                                voRepresentation.segmentInfoType = _constantsDashConstants2["default"].SEGMENT_LIST;
                                voRepresentation.useCalculatedLiveEdgeTime = true;
                            }
                        } else if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_TEMPLATE)) {
                            segmentInfo = realRepresentation.SegmentTemplate;
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].SEGMENT_TIMELINE)) {
                                voRepresentation.segmentInfoType = _constantsDashConstants2["default"].SEGMENT_TIMELINE;
                                voRepresentation.useCalculatedLiveEdgeTime = isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);
                            } else {
                                voRepresentation.segmentInfoType = _constantsDashConstants2["default"].SEGMENT_TEMPLATE;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].INITIALIZATION_MINUS)) { //mark3
                                voRepresentation.initialization = segmentInfo.initialization.split("$Bandwidth$").join(realRepresentation.bandwidth).split("$RepresentationID$").join(realRepresentation.id);
                                console.debug("getRepresentationsForAdaptation voRepresentation.initialization = ", voRepresentation.initialization);
                            }
                        } else {
                            voRepresentation.segmentInfoType = _constantsDashConstants2["default"].BASE_URL;
                        }
                        voRepresentation.essentialProperties = getEssentialPropertiesForRepresentation(realRepresentation);
                        if (segmentInfo) {
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].INITIALIZATION)) {
                                var initialization = segmentInfo.Initialization;
                                if (initialization.hasOwnProperty(_constantsDashConstants2["default"].SOURCE_URL)) {
                                    voRepresentation.initialization = initialization.sourceURL;
                                }
                                if (initialization.hasOwnProperty(_constantsDashConstants2["default"].RANGE)) {
                                    voRepresentation.range = initialization.range;
                                }
                            } else if (realRepresentation.hasOwnProperty(_constantsDashConstants2["default"].MIME_TYPE) && getIsTextTrack(realRepresentation.mimeType)) {
                                voRepresentation.range = 0;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].TIMESCALE)) {
                                voRepresentation.timescale = segmentInfo.timescale;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].DURATION)) {
                                voRepresentation.segmentDuration = segmentInfo.duration / voRepresentation.timescale;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].MEDIA)) {
                                voRepresentation.media = segmentInfo.media;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].START_NUMBER)) {
                                voRepresentation.startNumber = segmentInfo.startNumber;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].INDEX_RANGE)) {
                                voRepresentation.indexRange = segmentInfo.indexRange;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].PRESENTATION_TIME_OFFSET)) {
                                voRepresentation.presentationTimeOffset = segmentInfo.presentationTimeOffset / voRepresentation.timescale;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_TIME_OFFSET)) {
                                voRepresentation.availabilityTimeOffset = segmentInfo.availabilityTimeOffset;
                            } else if (baseUrl && baseUrl.availabilityTimeOffset !== undefined) {
                                voRepresentation.availabilityTimeOffset = baseUrl.availabilityTimeOffset;
                            }
                            if (segmentInfo.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_TIME_COMPLETE)) {
                                voRepresentation.availabilityTimeComplete = segmentInfo.availabilityTimeComplete !== "false";
                            } else if (baseUrl && baseUrl.availabilityTimeComplete !== undefined) {
                                voRepresentation.availabilityTimeComplete = baseUrl.availabilityTimeComplete;
                            }
                        }
                        voRepresentation.MSETimeOffset = calcMSETimeOffset(voRepresentation);
                        voRepresentation.path = [ voAdaptation.period.index, voAdaptation.index, i ];
                        voRepresentations.push(voRepresentation);
                    }
                }
                return voRepresentations;
            }
            function calcMSETimeOffset(representation) {
                var presentationOffset = representation.presentationTimeOffset;
                var periodStart = representation.adaptation.period.start;
                return periodStart - presentationOffset;
            }
            function getAdaptationsForPeriod(voPeriod) {
                var realPeriod = voPeriod && isInteger(voPeriod.index) ? voPeriod.mpd.manifest.Period_asArray[voPeriod.index] : null;
                var voAdaptations = [];
                var voAdaptationSet = undefined, realAdaptationSet = undefined, i = undefined;
                if (realPeriod && realPeriod.AdaptationSet_asArray) {
                    for (i = 0; i < realPeriod.AdaptationSet_asArray.length; i++) {
                        realAdaptationSet = realPeriod.AdaptationSet_asArray[i];
                        voAdaptationSet = new _voAdaptationSet2["default"]();
                        if (realAdaptationSet.hasOwnProperty(_constantsDashConstants2["default"].ID)) {
                            voAdaptationSet.id = realAdaptationSet.id;
                        }
                        voAdaptationSet.index = i;
                        voAdaptationSet.period = voPeriod;
                        if (getIsMuxed(realAdaptationSet)) {
                            voAdaptationSet.type = _streamingConstantsConstants2["default"].MUXED;
                        } else if (getIsAudio(realAdaptationSet)) {
                            voAdaptationSet.type = _streamingConstantsConstants2["default"].AUDIO;
                        } else if (getIsVideo(realAdaptationSet)) {
                            voAdaptationSet.type = _streamingConstantsConstants2["default"].VIDEO;
                        } else if (getIsFragmentedText(realAdaptationSet)) {
                            voAdaptationSet.type = _streamingConstantsConstants2["default"].FRAGMENTED_TEXT;
                        } else if (getIsImage(realAdaptationSet)) {
                            voAdaptationSet.type = _streamingConstantsConstants2["default"].IMAGE;
                        } else {
                            voAdaptationSet.type = _streamingConstantsConstants2["default"].TEXT;
                        }
                        voAdaptations.push(voAdaptationSet);
                    }
                }
                return voAdaptations;
            }
            function getRegularPeriods(mpd) {
                var isDynamic = mpd ? getIsDynamic(mpd.manifest) : false;
                var voPeriods = [];
                var realPreviousPeriod = null;
                var realPeriod = null;
                var voPreviousPeriod = null;
                var voPeriod = null;
                var len = undefined, i = undefined;
                for (i = 0, len = mpd && mpd.manifest && mpd.manifest.Period_asArray ? mpd.manifest.Period_asArray.length : 0; i < len; i++) {
                    realPeriod = mpd.manifest.Period_asArray[i];
                    if (realPeriod.hasOwnProperty(_constantsDashConstants2["default"].START)) {
                        voPeriod = new _voPeriod2["default"]();
                        voPeriod.start = realPeriod.start;
                    } else if (realPreviousPeriod !== null && realPreviousPeriod.hasOwnProperty(_constantsDashConstants2["default"].DURATION) && voPreviousPeriod !== null) {
                        voPeriod = new _voPeriod2["default"]();
                        voPeriod.start = parseFloat((voPreviousPeriod.start + voPreviousPeriod.duration).toFixed(5));
                    } else if (i === 0 && !isDynamic) {
                        voPeriod = new _voPeriod2["default"]();
                        voPeriod.start = 0;
                    }
                    if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {
                        if (voPeriod !== null) {
                            voPreviousPeriod.duration = parseFloat((voPeriod.start - voPreviousPeriod.start).toFixed(5));
                        } else {
                            logger.warn("First period duration could not be calculated because lack of start and duration period properties. This will cause timing issues during playback");
                        }
                    }
                    if (voPeriod !== null) {
                        voPeriod.id = getPeriodId(realPeriod, i);
                        voPeriod.index = i;
                        voPeriod.mpd = mpd;
                        if (realPeriod.hasOwnProperty(_constantsDashConstants2["default"].DURATION)) {
                            voPeriod.duration = realPeriod.duration;
                        }
                        voPeriods.push(voPeriod);
                        realPreviousPeriod = realPeriod;
                        voPreviousPeriod = voPeriod;
                    }
                    realPeriod = null;
                    voPeriod = null;
                }
                if (voPeriods.length === 0) {
                    return voPeriods;
                }
                if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {
                    voPreviousPeriod.duration = parseFloat((getEndTimeForLastPeriod(voPreviousPeriod) - voPreviousPeriod.start).toFixed(5));
                }
                return voPeriods;
            }
            function getPeriodId(realPeriod, i) {
                if (!realPeriod) {
                    throw new Error("Period cannot be null or undefined");
                }
                var id = _voPeriod2["default"].DEFAULT_ID + "_" + i;
                if (realPeriod.hasOwnProperty(_constantsDashConstants2["default"].ID) && realPeriod.id.length > 0 && realPeriod.id !== "__proto__") {
                    id = realPeriod.id;
                }
                return id;
            }
            function getMpd(manifest) {
                var mpd = new _voMpd2["default"]();
                if (manifest) {
                    mpd.manifest = manifest;
                    if (manifest.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_START_TIME)) {
                        mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime());
                    } else {
                        if (manifest.loadedTime) {
                            mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime());
                        }
                    }
                    if (manifest.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_END_TIME)) {
                        mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime());
                    }
                    if (manifest.hasOwnProperty(_constantsDashConstants2["default"].MINIMUM_UPDATE_PERIOD)) {
                        mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod;
                    }
                    if (manifest.hasOwnProperty(_constantsDashConstants2["default"].MEDIA_PRESENTATION_DURATION)) {
                        mpd.mediaPresentationDuration = manifest.mediaPresentationDuration;
                    }
                    if (manifest.hasOwnProperty(_streamingConstantsConstants2["default"].SUGGESTED_PRESENTATION_DELAY)) {
                        mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay;
                    }
                    if (manifest.hasOwnProperty(_constantsDashConstants2["default"].TIMESHIFT_BUFFER_DEPTH)) {
                        mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth;
                    }
                    if (manifest.hasOwnProperty(_constantsDashConstants2["default"].MAX_SEGMENT_DURATION)) {
                        mpd.maxSegmentDuration = manifest.maxSegmentDuration;
                    }
                }
                return mpd;
            }
            function checkConfig() {
                if (!errHandler || !errHandler.hasOwnProperty("error")) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function getEndTimeForLastPeriod(voPeriod) {
                checkConfig();
                var isDynamic = getIsDynamic(voPeriod.mpd.manifest);
                var periodEnd = undefined;
                if (voPeriod.mpd.manifest.mediaPresentationDuration) {
                    periodEnd = voPeriod.mpd.manifest.mediaPresentationDuration;
                } else if (voPeriod.duration) {
                    periodEnd = voPeriod.duration;
                } else if (isDynamic) {
                    periodEnd = Number.POSITIVE_INFINITY;
                } else {
                    errHandler.error(new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_ERROR_ID_PARSE_CODE, "Must have @mediaPresentationDuration on MPD or an explicit @duration on the last period.", voPeriod));
                }
                return periodEnd;
            }
            function getEventsForPeriod(period) {
                var manifest = period && period.mpd && period.mpd.manifest ? period.mpd.manifest : null;
                var periodArray = manifest ? manifest.Period_asArray : null;
                var eventStreams = periodArray && period && isInteger(period.index) ? periodArray[period.index].EventStream_asArray : null;
                var events = [];
                var i = undefined, j = undefined;
                if (eventStreams) {
                    for (i = 0; i < eventStreams.length; i++) {
                        var eventStream = new _voEventStream2["default"]();
                        eventStream.period = period;
                        eventStream.timescale = 1;
                        if (eventStreams[i].hasOwnProperty(_streamingConstantsConstants2["default"].SCHEME_ID_URI)) {
                            eventStream.schemeIdUri = eventStreams[i].schemeIdUri;
                        } else {
                            throw new Error("Invalid EventStream. SchemeIdUri has to be set");
                        }
                        if (eventStreams[i].hasOwnProperty(_constantsDashConstants2["default"].TIMESCALE)) {
                            eventStream.timescale = eventStreams[i].timescale;
                        }
                        if (eventStreams[i].hasOwnProperty(_constantsDashConstants2["default"].VALUE)) {
                            eventStream.value = eventStreams[i].value;
                        }
                        for (j = 0; eventStreams[i].Event_asArray && j < eventStreams[i].Event_asArray.length; j++) {
                            var _event = new _voEvent2["default"]();
                            _event.presentationTime = 0;
                            _event.eventStream = eventStream;
                            if (eventStreams[i].Event_asArray[j].hasOwnProperty(_constantsDashConstants2["default"].PRESENTATION_TIME)) {
                                _event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime;
                            }
                            if (eventStreams[i].Event_asArray[j].hasOwnProperty(_constantsDashConstants2["default"].DURATION)) {
                                _event.duration = eventStreams[i].Event_asArray[j].duration;
                            }
                            if (eventStreams[i].Event_asArray[j].hasOwnProperty(_constantsDashConstants2["default"].ID)) {
                                _event.id = eventStreams[i].Event_asArray[j].id;
                            }
                            if (eventStreams[i].Event_asArray[j].Signal && eventStreams[i].Event_asArray[j].Signal.Binary) {
                                _event.messageData = BASE64.decodeArray(eventStreams[i].Event_asArray[j].Signal.Binary);
                            } else {
                                _event.messageData = eventStreams[i].Event_asArray[j].messageData || eventStreams[i].Event_asArray[j].__text;
                            }
                            events.push(_event);
                        }
                    }
                }
                return events;
            }
            function getEventStreams(inbandStreams, representation) {
                var eventStreams = [];
                var i = undefined;
                if (!inbandStreams) return eventStreams;
                for (i = 0; i < inbandStreams.length; i++) {
                    var eventStream = new _voEventStream2["default"]();
                    eventStream.timescale = 1;
                    eventStream.representation = representation;
                    if (inbandStreams[i].hasOwnProperty(_streamingConstantsConstants2["default"].SCHEME_ID_URI)) {
                        eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;
                    } else {
                        throw new Error("Invalid EventStream. SchemeIdUri has to be set");
                    }
                    if (inbandStreams[i].hasOwnProperty(_constantsDashConstants2["default"].TIMESCALE)) {
                        eventStream.timescale = inbandStreams[i].timescale;
                    }
                    if (inbandStreams[i].hasOwnProperty(_constantsDashConstants2["default"].VALUE)) {
                        eventStream.value = inbandStreams[i].value;
                    }
                    eventStreams.push(eventStream);
                }
                return eventStreams;
            }
            function getEventStreamForAdaptationSet(manifest, adaptation) {
                var inbandStreams = undefined, periodArray = undefined, adaptationArray = undefined;
                if (manifest && manifest.Period_asArray && adaptation && adaptation.period && isInteger(adaptation.period.index)) {
                    periodArray = manifest.Period_asArray[adaptation.period.index];
                    if (periodArray && periodArray.AdaptationSet_asArray && isInteger(adaptation.index)) {
                        adaptationArray = periodArray.AdaptationSet_asArray[adaptation.index];
                        if (adaptationArray) {
                            inbandStreams = adaptationArray.InbandEventStream_asArray;
                        }
                    }
                }
                return getEventStreams(inbandStreams, null);
            }
            function getEventStreamForRepresentation(manifest, representation) {
                var inbandStreams = undefined, periodArray = undefined, adaptationArray = undefined, representationArray = undefined;
                if (manifest && manifest.Period_asArray && representation && representation.adaptation && representation.adaptation.period && isInteger(representation.adaptation.period.index)) {
                    periodArray = manifest.Period_asArray[representation.adaptation.period.index];
                    if (periodArray && periodArray.AdaptationSet_asArray && isInteger(representation.adaptation.index)) {
                        adaptationArray = periodArray.AdaptationSet_asArray[representation.adaptation.index];
                        if (adaptationArray && adaptationArray.Representation_asArray && isInteger(representation.index)) {
                            representationArray = adaptationArray.Representation_asArray[representation.index];
                            if (representationArray) {
                                inbandStreams = representationArray.InbandEventStream_asArray;
                            }
                        }
                    }
                }
                return getEventStreams(inbandStreams, representation);
            }
            function getUTCTimingSources(manifest) {
                var isDynamic = getIsDynamic(manifest);
                var hasAST = manifest ? manifest.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_START_TIME) : false;
                var utcTimingsArray = manifest ? manifest.UTCTiming_asArray : null;
                var utcTimingEntries = [];
                if (isDynamic || hasAST) {
                    if (utcTimingsArray) {
                        utcTimingsArray.forEach(function(utcTiming) {
                            var entry = new _voUTCTiming2["default"]();
                            if (utcTiming.hasOwnProperty(_streamingConstantsConstants2["default"].SCHEME_ID_URI)) {
                                entry.schemeIdUri = utcTiming.schemeIdUri;
                            } else {
                                return;
                            }
                            if (utcTiming.hasOwnProperty(_constantsDashConstants2["default"].VALUE)) {
                                entry.value = utcTiming.value.toString();
                            } else {
                                return;
                            }
                            utcTimingEntries.push(entry);
                        });
                    }
                }
                return utcTimingEntries;
            }
            function getBaseURLsFromElement(node) {
                var baseUrls = [];
                var entries = node.BaseURL_asArray || [ node.baseUri ];
                var earlyReturn = false;
                entries.some(function(entry) {
                    if (entry) {
                        var baseUrl = new _voBaseURL2["default"]();
                        var text = entry.__text || entry;
                        if (urlUtils.isRelative(text)) {
                            earlyReturn = true;
                            if (node.baseUri) {
                                text = urlUtils.resolve(text, node.baseUri);
                            }
                        }
                        baseUrl.url = text;
                        if (entry.hasOwnProperty(_constantsDashConstants2["default"].SERVICE_LOCATION) && entry.serviceLocation.length) {
                            baseUrl.serviceLocation = entry.serviceLocation;
                        } else {
                            baseUrl.serviceLocation = text;
                        }
                        if (entry.hasOwnProperty(_constantsDashConstants2["default"].DVB_PRIORITY)) {
                            baseUrl.dvb_priority = entry[_constantsDashConstants2["default"].DVB_PRIORITY];
                        }
                        if (entry.hasOwnProperty(_constantsDashConstants2["default"].DVB_WEIGHT)) {
                            baseUrl.dvb_weight = entry[_constantsDashConstants2["default"].DVB_WEIGHT];
                        }
                        if (entry.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_TIME_OFFSET)) {
                            baseUrl.availabilityTimeOffset = entry[_constantsDashConstants2["default"].AVAILABILITY_TIME_OFFSET];
                        }
                        if (entry.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_TIME_COMPLETE)) {
                            baseUrl.availabilityTimeComplete = entry[_constantsDashConstants2["default"].AVAILABILITY_TIME_COMPLETE] !== "false";
                        }
                        baseUrls.push(baseUrl);
                        return earlyReturn;
                    }
                });
                return baseUrls;
            }
            function getLocation(manifest) {
                if (manifest && manifest.hasOwnProperty(_streamingConstantsConstants2["default"].LOCATION)) {
                    manifest.Location = manifest.Location_asArray[0];
                    return manifest.Location;
                }
                return undefined;
            }
            function getSuggestedPresentationDelay(mpd) {
                return mpd && mpd.hasOwnProperty(_constantsDashConstants2["default"].SUGGESTED_PRESENTATION_DELAY) ? mpd.suggestedPresentationDelay : null;
            }
            function getAvailabilityStartTime(mpd) {
                return mpd && mpd.hasOwnProperty(_constantsDashConstants2["default"].AVAILABILITY_START_TIME) ? mpd.availabilityStartTime.getTime() : null;
            }
            function setConfig(config) {
                if (!config) return;
                if (config.errHandler) {
                    errHandler = config.errHandler;
                }
                if (config.BASE64) {
                    BASE64 = config.BASE64;
                }
            }
            instance = {
                getIsTypeOf: getIsTypeOf,
                getIsTextTrack: getIsTextTrack,
                getLanguageForAdaptation: getLanguageForAdaptation,
                getViewpointForAdaptation: getViewpointForAdaptation,
                getRolesForAdaptation: getRolesForAdaptation,
                getAccessibilityForAdaptation: getAccessibilityForAdaptation,
                getAudioChannelConfigurationForAdaptation: getAudioChannelConfigurationForAdaptation,
                getAdaptationForIndex: getAdaptationForIndex,
                getIndexForAdaptation: getIndexForAdaptation,
                getAdaptationForId: getAdaptationForId,
                getAdaptationsForType: getAdaptationsForType,
                getCodec: getCodec,
                getMimeType: getMimeType,
                getKID: getKID,
                getLabelsForAdaptation: getLabelsForAdaptation,
                getContentProtectionData: getContentProtectionData,
                getIsDynamic: getIsDynamic,
                hasProfile: hasProfile,
                getDuration: getDuration,
                getBandwidth: getBandwidth,
                getManifestUpdatePeriod: getManifestUpdatePeriod,
                getRepresentationCount: getRepresentationCount,
                getBitrateListForAdaptation: getBitrateListForAdaptation,
                getRepresentationFor: getRepresentationFor,
                getRepresentationsForAdaptation: getRepresentationsForAdaptation,
                getAdaptationsForPeriod: getAdaptationsForPeriod,
                getRegularPeriods: getRegularPeriods,
                getMpd: getMpd,
                getEventsForPeriod: getEventsForPeriod,
                getEventStreamForAdaptationSet: getEventStreamForAdaptationSet,
                getEventStreamForRepresentation: getEventStreamForRepresentation,
                getUTCTimingSources: getUTCTimingSources,
                getBaseURLsFromElement: getBaseURLsFromElement,
                getRepresentationSortFunction: getRepresentationSortFunction,
                getLocation: getLocation,
                getUseCalculatedLiveEdgeTimeForAdaptation: getUseCalculatedLiveEdgeTimeForAdaptation,
                getSuggestedPresentationDelay: getSuggestedPresentationDelay,
                getAvailabilityStartTime: getAvailabilityStartTime,
                setConfig: setConfig
            };
            setup();
            return instance;
        }
        DashManifestModel.__dashjs_factory_name = "DashManifestModel";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(DashManifestModel);
        module.exports = exports["default"];
    }, {
        107: 107,
        201: 201,
        212: 212,
        216: 216,
        221: 221,
        46: 46,
        48: 48,
        52: 52,
        62: 62,
        83: 83,
        84: 84,
        85: 85,
        86: 86,
        89: 89,
        90: 90,
        91: 91,
        95: 95
    } ],
    65: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _objectiron = _dereq_(75);
        var _objectiron2 = _interopRequireDefault(_objectiron);
        var _externalsXml2json = _dereq_(3);
        var _externalsXml2json2 = _interopRequireDefault(_externalsXml2json);
        var _matchersStringMatcher = _dereq_(74);
        var _matchersStringMatcher2 = _interopRequireDefault(_matchersStringMatcher);
        var _matchersDurationMatcher = _dereq_(72);
        var _matchersDurationMatcher2 = _interopRequireDefault(_matchersDurationMatcher);
        var _matchersDateTimeMatcher = _dereq_(71);
        var _matchersDateTimeMatcher2 = _interopRequireDefault(_matchersDateTimeMatcher);
        var _matchersNumericMatcher = _dereq_(73);
        var _matchersNumericMatcher2 = _interopRequireDefault(_matchersNumericMatcher);
        var _mapsRepresentationBaseValuesMap = _dereq_(68);
        var _mapsRepresentationBaseValuesMap2 = _interopRequireDefault(_mapsRepresentationBaseValuesMap);
        var _mapsSegmentValuesMap = _dereq_(69);
        var _mapsSegmentValuesMap2 = _interopRequireDefault(_mapsSegmentValuesMap);
        function DashParser() {
            var context = this.context;
            var instance = undefined, logger = undefined, matchers = undefined, converter = undefined, objectIron = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                matchers = [ new _matchersDurationMatcher2["default"](), new _matchersDateTimeMatcher2["default"](), new _matchersNumericMatcher2["default"](), new _matchersStringMatcher2["default"]() ];
                converter = new _externalsXml2json2["default"]({
                    escapeMode: false,
                    attributePrefix: "",
                    arrayAccessForm: "property",
                    emptyNodeForm: "object",
                    stripWhitespaces: false,
                    enableToStringFunc: false,
                    ignoreRoot: true,
                    matchers: matchers
                });
                objectIron = (0, _objectiron2["default"])(context).create({
                    adaptationset: new _mapsRepresentationBaseValuesMap2["default"](),
                    period: new _mapsSegmentValuesMap2["default"]()
                });
            }
            function getMatchers() {
                return matchers;
            }
            function getIron() {
                return objectIron;
            }
            function parse(data) {
                var manifest = undefined;
                var startTime = window.performance.now();
                manifest = converter.xml_str2json(data);
                if (!manifest) {
                    throw new Error("parsing the manifest failed");
                }
                var jsonTime = window.performance.now();
                objectIron.run(manifest);
                var ironedTime = window.performance.now();
                logger.info("Parsing complete: ( xml2json: " + (jsonTime - startTime).toPrecision(3) + "ms, objectiron: " + (ironedTime - jsonTime).toPrecision(3) + "ms, total: " + ((ironedTime - startTime) / 1e3).toPrecision(3) + "s)");
                return manifest;
            }
            function parseJSON(data) { //DIFF1: JSON Parser - object extension of the MPD-Parser?
                console.debug("DashParser.parseJSON() typeof data = ", typeof(data), "\n", data);
                var manifest = undefined;
                var startTime = window.performance.now();
                if (manifest = data, !manifest) {
                    throw new Error("parsing the manifest failed");
                }
                var jsonTime = window.performance.now();
                manifest.BaseURL = manifest.BaseURL_asArray[0];
                if (manifest.BaseURL.toString().indexOf("www") === 0) {
                    manifest.BaseURL = "http://" + manifest.BaseURL;
                }
                if (manifest.BaseURL.toString().slice(-1) !== "/") {
                    manifest.BaseURL = manifest.BaseURL + "/";
                }

                //location missing or not needed?
                objectIron.run(manifest);
                var ironedTime = window.performance.now();
                logger.info("Parsing complete: ( xml2json: " + (jsonTime - startTime).toPrecision(3) + "ms, objectiron: " + (ironedTime - jsonTime).toPrecision(3) + "ms, total: " + ((ironedTime - startTime) / 1e3).toPrecision(3) + "s)");
                return manifest;
            }
            instance = {
                parse: parse,
                parseJSON: parseJSON, //DIFF2
                getMatchers: getMatchers,
                getIron: getIron
            };
            setup();
            return instance;
        }
        DashParser.__dashjs_factory_name = "DashParser";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(DashParser);
        module.exports = exports["default"];
    }, {
        3: 3,
        46: 46,
        48: 48,
        68: 68,
        69: 69,
        71: 71,
        72: 72,
        73: 73,
        74: 74,
        75: 75
    } ],
    66: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var CommonProperty = function() {
            function CommonProperty(name) {
                _classCallCheck(this, CommonProperty);
                var getDefaultMergeForName = function getDefaultMergeForName(n) {
                    return n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();
                };
                this._name = name;
                this._merge = getDefaultMergeForName(name);
            }
            _createClass(CommonProperty, [ {
                key: "name",
                get: function get() {
                    return this._name;
                }
            }, {
                key: "merge",
                get: function get() {
                    return this._merge;
                }
            } ]);
            return CommonProperty;
        }();
        exports["default"] = CommonProperty;
        module.exports = exports["default"];
    }, {} ],
    67: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _CommonProperty = _dereq_(66);
        var _CommonProperty2 = _interopRequireDefault(_CommonProperty);
        var MapNode = function() {
            function MapNode(name, properties, children) {
                var _this = this;
                _classCallCheck(this, MapNode);
                this._name = name || "";
                this._properties = [];
                this._children = children || [];
                if (Array.isArray(properties)) {
                    properties.forEach(function(p) {
                        _this._properties.push(new _CommonProperty2["default"](p));
                    });
                }
            }
            _createClass(MapNode, [ {
                key: "name",
                get: function get() {
                    return this._name;
                }
            }, {
                key: "children",
                get: function get() {
                    return this._children;
                }
            }, {
                key: "properties",
                get: function get() {
                    return this._properties;
                }
            } ]);
            return MapNode;
        }();
        exports["default"] = MapNode;
        module.exports = exports["default"];
    }, {
        66: 66
    } ],
    68: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _MapNode2 = _dereq_(67);
        var _MapNode3 = _interopRequireDefault(_MapNode2);
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var RepresentationBaseValuesMap = function(_MapNode) {
            _inherits(RepresentationBaseValuesMap, _MapNode);
            function RepresentationBaseValuesMap() {
                _classCallCheck(this, RepresentationBaseValuesMap);
                var commonProperties = [ _constantsDashConstants2["default"].PROFILES, _constantsDashConstants2["default"].WIDTH, _constantsDashConstants2["default"].HEIGHT, _constantsDashConstants2["default"].SAR, _constantsDashConstants2["default"].FRAMERATE, _constantsDashConstants2["default"].AUDIO_SAMPLING_RATE, _constantsDashConstants2["default"].MIME_TYPE, _constantsDashConstants2["default"].SEGMENT_PROFILES, _constantsDashConstants2["default"].CODECS, _constantsDashConstants2["default"].MAXIMUM_SAP_PERIOD, _constantsDashConstants2["default"].START_WITH_SAP, _constantsDashConstants2["default"].MAX_PLAYOUT_RATE, _constantsDashConstants2["default"].CODING_DEPENDENCY, _constantsDashConstants2["default"].SCAN_TYPE, _constantsDashConstants2["default"].FRAME_PACKING, _constantsDashConstants2["default"].AUDIO_CHANNEL_CONFIGURATION, _constantsDashConstants2["default"].CONTENT_PROTECTION, _constantsDashConstants2["default"].ESSENTIAL_PROPERTY, _constantsDashConstants2["default"].SUPPLEMENTAL_PROPERTY, _constantsDashConstants2["default"].INBAND_EVENT_STREAM ];
                _get(Object.getPrototypeOf(RepresentationBaseValuesMap.prototype), "constructor", this).call(this, _constantsDashConstants2["default"].ADAPTATION_SET, commonProperties, [ new _MapNode3["default"](_constantsDashConstants2["default"].REPRESENTATION, commonProperties, [ new _MapNode3["default"](_constantsDashConstants2["default"].SUB_REPRESENTATION, commonProperties) ]) ]);
            }
            return RepresentationBaseValuesMap;
        }(_MapNode3["default"]);
        exports["default"] = RepresentationBaseValuesMap;
        module.exports = exports["default"];
    }, {
        62: 62,
        67: 67
    } ],
    69: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _MapNode2 = _dereq_(67);
        var _MapNode3 = _interopRequireDefault(_MapNode2);
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var SegmentValuesMap = function(_MapNode) {
            _inherits(SegmentValuesMap, _MapNode);
            function SegmentValuesMap() {
                _classCallCheck(this, SegmentValuesMap);
                var commonProperties = [ _constantsDashConstants2["default"].SEGMENT_BASE, _constantsDashConstants2["default"].SEGMENT_TEMPLATE, _constantsDashConstants2["default"].SEGMENT_LIST ];
                _get(Object.getPrototypeOf(SegmentValuesMap.prototype), "constructor", this).call(this, _constantsDashConstants2["default"].PERIOD, commonProperties, [ new _MapNode3["default"](_constantsDashConstants2["default"].ADAPTATION_SET, commonProperties, [ new _MapNode3["default"](_constantsDashConstants2["default"].REPRESENTATION, commonProperties) ]) ]);
            }
            return SegmentValuesMap;
        }(_MapNode3["default"]);
        exports["default"] = SegmentValuesMap;
        module.exports = exports["default"];
    }, {
        62: 62,
        67: 67
    } ],
    70: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var BaseMatcher = function() {
            function BaseMatcher(test, converter) {
                _classCallCheck(this, BaseMatcher);
                this._test = test;
                this._converter = converter;
            }
            _createClass(BaseMatcher, [ {
                key: "test",
                get: function get() {
                    return this._test;
                }
            }, {
                key: "converter",
                get: function get() {
                    return this._converter;
                }
            } ]);
            return BaseMatcher;
        }();
        exports["default"] = BaseMatcher;
        module.exports = exports["default"];
    }, {} ],
    71: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _BaseMatcher2 = _dereq_(70);
        var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);
        var SECONDS_IN_MIN = 60;
        var MINUTES_IN_HOUR = 60;
        var MILLISECONDS_IN_SECONDS = 1e3;
        var datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;
        var DateTimeMatcher = function(_BaseMatcher) {
            _inherits(DateTimeMatcher, _BaseMatcher);
            function DateTimeMatcher() {
                _classCallCheck(this, DateTimeMatcher);
                _get(Object.getPrototypeOf(DateTimeMatcher.prototype), "constructor", this).call(this, function(attr) {
                    return datetimeRegex.test(attr.value);
                }, function(str) {
                    var match = datetimeRegex.exec(str);
                    var utcDate = undefined;
                    utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && parseInt(match[6], 10) || 0, match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0);
                    if (match[9] && match[10]) {
                        var timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);
                        utcDate += (match[8] === "+" ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;
                    }
                    return new Date(utcDate);
                });
            }
            return DateTimeMatcher;
        }(_BaseMatcher3["default"]);
        exports["default"] = DateTimeMatcher;
        module.exports = exports["default"];
    }, {
        70: 70
    } ],
    72: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _BaseMatcher2 = _dereq_(70);
        var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var durationRegex = /^([-])?P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/;
        var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;
        var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;
        var SECONDS_IN_DAY = 24 * 60 * 60;
        var SECONDS_IN_HOUR = 60 * 60;
        var SECONDS_IN_MIN = 60;
        var DurationMatcher = function(_BaseMatcher) {
            _inherits(DurationMatcher, _BaseMatcher);
            function DurationMatcher() {
                _classCallCheck(this, DurationMatcher);
                _get(Object.getPrototypeOf(DurationMatcher.prototype), "constructor", this).call(this, function(attr) {
                    var attributeList = [ _constantsDashConstants2["default"].MIN_BUFFER_TIME, _constantsDashConstants2["default"].MEDIA_PRESENTATION_DURATION, _constantsDashConstants2["default"].MINIMUM_UPDATE_PERIOD, _constantsDashConstants2["default"].TIMESHIFT_BUFFER_DEPTH, _constantsDashConstants2["default"].MAX_SEGMENT_DURATION, _constantsDashConstants2["default"].MAX_SUBSEGMENT_DURATION, _streamingConstantsConstants2["default"].SUGGESTED_PRESENTATION_DELAY, _constantsDashConstants2["default"].START, _streamingConstantsConstants2["default"].START_TIME, _constantsDashConstants2["default"].DURATION ];
                    var len = attributeList.length;
                    for (var i = 0; i < len; i++) {
                        if (attr.nodeName === attributeList[i]) {
                            return durationRegex.test(attr.value);
                        }
                    }
                    return false;
                }, function(str) {
                    var match = durationRegex.exec(str);
                    var result = parseFloat(match[2] || 0) * SECONDS_IN_YEAR + parseFloat(match[4] || 0) * SECONDS_IN_MONTH + parseFloat(match[6] || 0) * SECONDS_IN_DAY + parseFloat(match[8] || 0) * SECONDS_IN_HOUR + parseFloat(match[10] || 0) * SECONDS_IN_MIN + parseFloat(match[12] || 0);
                    if (match[1] !== undefined) {
                        result = -result;
                    }
                    return result;
                });
            }
            return DurationMatcher;
        }(_BaseMatcher3["default"]);
        exports["default"] = DurationMatcher;
        module.exports = exports["default"];
    }, {
        107: 107,
        62: 62,
        70: 70
    } ],
    73: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _BaseMatcher2 = _dereq_(70);
        var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);
        var numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/;
        var NumericMatcher = function(_BaseMatcher) {
            _inherits(NumericMatcher, _BaseMatcher);
            function NumericMatcher() {
                _classCallCheck(this, NumericMatcher);
                _get(Object.getPrototypeOf(NumericMatcher.prototype), "constructor", this).call(this, function(attr) {
                    return numericRegex.test(attr.value);
                }, function(str) {
                    return parseFloat(str);
                });
            }
            return NumericMatcher;
        }(_BaseMatcher3["default"]);
        exports["default"] = NumericMatcher;
        module.exports = exports["default"];
    }, {
        70: 70
    } ],
    74: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _BaseMatcher2 = _dereq_(70);
        var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var StringMatcher = function(_BaseMatcher) {
            _inherits(StringMatcher, _BaseMatcher);
            function StringMatcher() {
                _classCallCheck(this, StringMatcher);
                _get(Object.getPrototypeOf(StringMatcher.prototype), "constructor", this).call(this, function(attr, nodeName) {
                    var _stringAttrsInElements;
                    var stringAttrsInElements = (_stringAttrsInElements = {}, _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].MPD, [ _constantsDashConstants2["default"].ID, _constantsDashConstants2["default"].PROFILES ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].PERIOD, [ _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].BASE_URL, [ _constantsDashConstants2["default"].SERVICE_LOCATION, _constantsDashConstants2["default"].BYTE_RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].SEGMENT_BASE, [ _constantsDashConstants2["default"].INDEX_RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].INITIALIZATION, [ _constantsDashConstants2["default"].RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].REPRESENTATION_INDEX, [ _constantsDashConstants2["default"].RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].SEGMENT_LIST, [ _constantsDashConstants2["default"].INDEX_RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].BITSTREAM_SWITCHING, [ _constantsDashConstants2["default"].RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].SEGMENT_URL, [ _constantsDashConstants2["default"].MEDIA_RANGE, _constantsDashConstants2["default"].INDEX_RANGE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].SEGMENT_TEMPLATE, [ _constantsDashConstants2["default"].INDEX_RANGE, _constantsDashConstants2["default"].MEDIA, _constantsDashConstants2["default"].INDEX, _constantsDashConstants2["default"].INITIALIZATION_MINUS, _constantsDashConstants2["default"].BITSTREAM_SWITCHING_MINUS ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].ASSET_IDENTIFIER, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].EVENT_STREAM, [ _constantsDashConstants2["default"].VALUE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].ADAPTATION_SET, [ _constantsDashConstants2["default"].PROFILES, _constantsDashConstants2["default"].MIME_TYPE, _constantsDashConstants2["default"].SEGMENT_PROFILES, _constantsDashConstants2["default"].CODECS, _constantsDashConstants2["default"].CONTENT_TYPE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].FRAME_PACKING, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].AUDIO_CHANNEL_CONFIGURATION, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].CONTENT_PROTECTION, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].ESSENTIAL_PROPERTY, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].SUPPLEMENTAL_PROPERTY, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].INBAND_EVENT_STREAM, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].ACCESSIBILITY, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].ROLE, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].RATING, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].VIEWPOINT, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].CONTENT_COMPONENT, [ _constantsDashConstants2["default"].CONTENT_TYPE ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].REPRESENTATION, [ _constantsDashConstants2["default"].ID, _constantsDashConstants2["default"].DEPENDENCY_ID, _constantsDashConstants2["default"].MEDIA_STREAM_STRUCTURE_ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].SUBSET, [ _constantsDashConstants2["default"].ID ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].METRICS, [ _constantsDashConstants2["default"].METRICS_MINUS ]),
                    _defineProperty(_stringAttrsInElements, _constantsDashConstants2["default"].REPORTING, [ _constantsDashConstants2["default"].VALUE, _constantsDashConstants2["default"].ID ]),
                    _stringAttrsInElements);
                    if (stringAttrsInElements.hasOwnProperty(nodeName)) {
                        var attrNames = stringAttrsInElements[nodeName];
                        if (attrNames !== undefined) {
                            return attrNames.indexOf(attr.name) >= 0;
                        } else {
                            return false;
                        }
                    }
                    return false;
                }, function(str) {
                    return String(str);
                });
            }
            return StringMatcher;
        }(_BaseMatcher3["default"]);
        exports["default"] = StringMatcher;
        module.exports = exports["default"];
    }, {
        62: 62,
        70: 70
    } ],
    75: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function ObjectIron(mappers) {
            function mergeValues(parentItem, childItem) {
                for (var _name in parentItem) {
                    if (!childItem.hasOwnProperty(_name)) {
                        childItem[_name] = parentItem[_name];
                    }
                }
            }
            function mapProperties(properties, parent, child) {
                for (var i = 0, len = properties.length; i < len; ++i) {
                    var property = properties[i];
                    if (parent[property.name]) {
                        if (child[property.name]) {
                            if (property.merge) {
                                var parentValue = parent[property.name];
                                var childValue = child[property.name];
                                if (typeof parentValue === "object" && typeof childValue === "object") {
                                    mergeValues(parentValue, childValue);
                                } else {
                                    child[property.name] = parentValue + childValue;
                                }
                            }
                        } else {
                            child[property.name] = parent[property.name];
                        }
                    }
                }
            }
            function mapItem(item, node) {
                for (var i = 0, len = item.children.length; i < len; ++i) {
                    var childItem = item.children[i];
                    var array = node[childItem.name + "_asArray"];
                    if (array) {
                        for (var v = 0, len2 = array.length; v < len2; ++v) {
                            var childNode = array[v];
                            mapProperties(item.properties, node, childNode);
                            mapItem(childItem, childNode);
                        }
                    }
                }
            }
            function run(source) {
                if (source === null || typeof source !== "object") {
                    return source;
                }
                if ("period" in mappers) {
                    var periodMapper = mappers.period;
                    var periods = source.Period_asArray;
                    for (var i = 0, len = periods.length; i < len; ++i) {
                        var period = periods[i];
                        mapItem(periodMapper, period);
                        if ("adaptationset" in mappers) {
                            var adaptationSets = period.AdaptationSet_asArray;
                            if (adaptationSets) {
                                var adaptationSetMapper = mappers.adaptationset;
                                for (var _i = 0, _len = adaptationSets.length; _i < _len; ++_i) {
                                    mapItem(adaptationSetMapper, adaptationSets[_i]);
                                }
                            }
                        }
                    }
                }
                return source;
            }
            return {
                run: run
            };
        }
        ObjectIron.__dashjs_factory_name = "ObjectIron";
        var factory = _coreFactoryMaker2["default"].getClassFactory(ObjectIron);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    76: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _SegmentsUtils = _dereq_(79);
        function ListSegmentsGetter(config, isDynamic) {
            config = config || {};
            var timelineConverter = config.timelineConverter;
            var instance = undefined;
            function getSegmentsFromList(representation, requestedTime, index, availabilityUpperLimit) {
                var list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;
                var len = list.SegmentURL_asArray.length;
                var segments = [];
                var periodSegIdx = undefined, seg = undefined, s = undefined, range = undefined, startIdx = undefined, endIdx = undefined, start = undefined;
                start = representation.startNumber;
                range = (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);
                startIdx = Math.max(range.start, 0);
                endIdx = Math.min(range.end, list.SegmentURL_asArray.length - 1);
                for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {
                    s = list.SegmentURL_asArray[periodSegIdx];
                    seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx);
                    seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;
                    seg.media = s.media ? s.media : "";
                    seg.mediaRange = s.mediaRange;
                    seg.index = s.index;
                    seg.indexRange = s.indexRange;
                    segments.push(seg);
                    seg = null;
                }
                representation.availableSegmentsNumber = len;
                return segments;
            }
            instance = {
                getSegments: getSegmentsFromList
            };
            return instance;
        }
        ListSegmentsGetter.__dashjs_factory_name = "ListSegmentsGetter";
        var factory = _coreFactoryMaker2["default"].getClassFactory(ListSegmentsGetter);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48,
        79: 79
    } ],
    77: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Round10 = function() {
            function Round10() {
                _classCallCheck(this, Round10);
            }
            _createClass(Round10, null, [ {
                key: "round10",
                value: function round10(value, exp) {
                    return _decimalAdjust("round", value, exp);
                }
            } ]);
            return Round10;
        }();
        exports["default"] = Round10;
        function _decimalAdjust(type, value, exp) {
            if (typeof exp === "undefined" || +exp === 0) {
                return Math[type](value);
            }
            value = +value;
            exp = +exp;
            if (value === null || isNaN(value) || !(typeof exp === "number" && exp % 1 === 0)) {
                return NaN;
            }
            value = value.toString().split("e");
            value = Math[type](+(value[0] + "e" + (value[1] ? +value[1] - exp : -exp)));
            value = value.toString().split("e");
            return +(value[0] + "e" + (value[1] ? +value[1] + exp : exp));
        }
        module.exports = exports["default"];
    }, {} ],
    78: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _TimelineSegmentsGetter = _dereq_(82);
        var _TimelineSegmentsGetter2 = _interopRequireDefault(_TimelineSegmentsGetter);
        var _TemplateSegmentsGetter = _dereq_(80);
        var _TemplateSegmentsGetter2 = _interopRequireDefault(_TemplateSegmentsGetter);
        var _ListSegmentsGetter = _dereq_(76);
        var _ListSegmentsGetter2 = _interopRequireDefault(_ListSegmentsGetter);
        function SegmentsGetter(config, isDynamic) {
            var context = this.context;
            var instance = undefined, timelineSegmentsGetter = undefined, templateSegmentsGetter = undefined, listSegmentsGetter = undefined;
            function setup() {
                timelineSegmentsGetter = (0, _TimelineSegmentsGetter2["default"])(context).create(config, isDynamic);
                templateSegmentsGetter = (0, _TemplateSegmentsGetter2["default"])(context).create(config, isDynamic);
                listSegmentsGetter = (0, _ListSegmentsGetter2["default"])(context).create(config, isDynamic);
            }
            function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback, availabilityUpperLimit) {
                var segments = undefined;
                var type = representation.segmentInfoType;
                if (type === _constantsDashConstants2["default"].SEGMENT_BASE || type === _constantsDashConstants2["default"].BASE_URL || !isSegmentListUpdateRequired(representation, index)) {
                    segments = representation.segments;
                } else {
                    if (type === _constantsDashConstants2["default"].SEGMENT_TIMELINE) {
                        segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);
                    } else if (type === _constantsDashConstants2["default"].SEGMENT_TEMPLATE) {
                        segments = templateSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);
                    } else if (type === _constantsDashConstants2["default"].SEGMENT_LIST) {
                        segments = listSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);
                    }
                    if (onSegmentListUpdatedCallback) {
                        onSegmentListUpdatedCallback(representation, segments);
                    }
                }
            }
            function isSegmentListUpdateRequired(representation, index) {
                var segments = representation.segments;
                var updateRequired = false;
                var upperIdx = undefined, lowerIdx = undefined;
                if (!segments || segments.length === 0) {
                    updateRequired = true;
                } else {
                    lowerIdx = segments[0].availabilityIdx;
                    upperIdx = segments[segments.length - 1].availabilityIdx;
                    updateRequired = index < lowerIdx || index > upperIdx;
                }
                return updateRequired;
            }
            instance = {
                getSegments: getSegments
            };
            setup();
            return instance;
        }
        SegmentsGetter.__dashjs_factory_name = "SegmentsGetter";
        var factory = _coreFactoryMaker2["default"].getClassFactory(SegmentsGetter);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48,
        62: 62,
        76: 76,
        80: 80,
        82: 82
    } ],
    79: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.unescapeDollarsInTemplate = unescapeDollarsInTemplate;
        exports.replaceIDForTemplate = replaceIDForTemplate;
        exports.replaceTokenForTemplate = replaceTokenForTemplate;
        exports.getIndexBasedSegment = getIndexBasedSegment;
        exports.getTimeBasedSegment = getTimeBasedSegment;
        exports.getSegmentByIndex = getSegmentByIndex;
        exports.decideSegmentListRangeForTemplate = decideSegmentListRangeForTemplate;
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voSegment = _dereq_(93);
        var _voSegment2 = _interopRequireDefault(_voSegment);
        function zeroPadToLength(numStr, minStrLength) {
            while (numStr.length < minStrLength) {
                numStr = "0" + numStr;
            }
            return numStr;
        }
        function getNumberForSegment(segment, segmentIndex) {
            return segment.representation.startNumber + segmentIndex;
        }
        function unescapeDollarsInTemplate(url) {
            return url ? url.split("$$").join("$") : url;
        }
        function replaceIDForTemplate(url, value) { //mark
            //if (!value || !url || url.indexOf("$RepresentationID$") === -1) { // representationID value of 0 was the problem. Look into standard what the allowed range is!
            if (value === null || url === null || url.indexOf("$RepresentationID$") === -1) {
                console.debug("replaceIDForTemplate error: url=", url, ", value=", value, ", url.indexOf($RepresentationID$)=", url.indexOf("$RepresentationID$"));
                return url;
            }
            var v = value.toString();
            var result = url.split("$RepresentationID$").join(v);
            console.debug("replaceIDForTemplate url out: ", result);
            return result; //mark4
        }
        function replaceTokenForTemplate(url, token, value) {
            var formatTag = "%0";
            var startPos = undefined, endPos = undefined, formatTagPos = undefined, specifier = undefined, width = undefined, paddedValue = undefined;
            var tokenLen = token.length;
            var formatTagLen = formatTag.length;
            if (!url) {
                return url;
            }
            while (true) {
                startPos = url.indexOf("$" + token);
                if (startPos < 0) {
                    return url;
                }
                endPos = url.indexOf("$", startPos + tokenLen);
                if (endPos < 0) {
                    return url;
                }
                formatTagPos = url.indexOf(formatTag, startPos + tokenLen);
                if (formatTagPos > startPos && formatTagPos < endPos) {
                    specifier = url.charAt(endPos - 1);
                    width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10);
                    switch (specifier) {
                      case "d":
                      case "i":
                      case "u":
                        paddedValue = zeroPadToLength(value.toString(), width);
                        break;

                      case "x":
                        paddedValue = zeroPadToLength(value.toString(16), width);
                        break;

                      case "X":
                        paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();
                        break;

                      case "o":
                        paddedValue = zeroPadToLength(value.toString(8), width);
                        break;

                      default:
                        return url;
                    }
                } else {
                    paddedValue = value;
                }
                url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);
            }
        }
        function getSegment(representation, duration, presentationStartTime, mediaStartTime, availabilityStartTime, timelineConverter, presentationEndTime, isDynamic, index) {
            console.debug("getSegment representation: ", representation);
            var seg = new _voSegment2["default"]();
            seg.representation = representation;
            seg.duration = duration;
            seg.presentationStartTime = presentationStartTime;
            seg.mediaStartTime = mediaStartTime;
            seg.availabilityStartTime = availabilityStartTime;
            seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);
            seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic);
            seg.replacementNumber = getNumberForSegment(seg, index);
            seg.availabilityIdx = index;
            return seg;
        }
        function getIndexBasedSegment(timelineConverter, isDynamic, representation, index) {
            var duration = undefined, presentationStartTime = undefined, presentationEndTime = undefined;
            duration = representation.segmentDuration;
            if (isNaN(duration)) {
                duration = representation.adaptation.period.duration;
            }
            presentationStartTime = parseFloat((representation.adaptation.period.start + index * duration).toFixed(5));
            presentationEndTime = parseFloat((presentationStartTime + duration).toFixed(5));
            return getSegment(representation, duration, presentationStartTime, timelineConverter.calcMediaTimeFromPresentationTime(presentationStartTime, representation), timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic), timelineConverter, presentationEndTime, isDynamic, index);
        }
        function getTimeBasedSegment(timelineConverter, isDynamic, representation, time, duration, fTimescale, url, range, index, tManifest) {
            var scaledTime = time / fTimescale;
            var scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration);
            var presentationStartTime = undefined, presentationEndTime = undefined, seg = undefined;
            presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation);
            presentationEndTime = presentationStartTime + scaledDuration;
            seg = getSegment(representation, scaledDuration, presentationStartTime, scaledTime, representation.adaptation.period.mpd.manifest.loadedTime, timelineConverter, presentationEndTime, isDynamic, index);
            seg.replacementTime = tManifest ? tManifest : time;
            url = replaceTokenForTemplate(url, "Number", seg.replacementNumber);
            url = replaceTokenForTemplate(url, "Time", seg.replacementTime);
            seg.media = url;
            seg.mediaRange = range;
            return seg;
        }
        function getSegmentByIndex(index, representation) {
            if (!representation || !representation.segments) return null;
            var ln = representation.segments.length;
            var seg = undefined, i = undefined;
            if (index < ln) {
                seg = representation.segments[index];
                if (seg && seg.availabilityIdx === index) {
                    return seg;
                }
            }
            for (i = 0; i < ln; i++) {
                seg = representation.segments[i];
                if (seg && seg.availabilityIdx === index) {
                    return seg;
                }
            }
            return null;
        }
        function decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, givenAvailabilityUpperLimit) {
            if (!representation) {
                return {
                    start: NaN,
                    end: NaN
                };
            }
            var duration = representation.segmentDuration;
            var minBufferTime = representation.adaptation.period.mpd.manifest.minBufferTime;
            var availabilityWindow = representation.segmentAvailabilityRange;
            var periodRelativeRange = {
                start: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow ? availabilityWindow.start : NaN),
                end: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow ? availabilityWindow.end : NaN)
            };
            var currentSegmentList = representation.segments;
            var availabilityLowerLimit = 2 * duration;
            var availabilityUpperLimit = givenAvailabilityUpperLimit || Math.max(2 * minBufferTime, 10 * duration);
            var originAvailabilityTime = NaN;
            var originSegment = null;
            var start = undefined, end = undefined, range = undefined;
            periodRelativeRange.start = Math.max(periodRelativeRange.start, 0);
            if (isDynamic && !timelineConverter.isTimeSyncCompleted()) {
                start = Math.floor(periodRelativeRange.start / duration);
                end = Math.floor(periodRelativeRange.end / duration);
                range = {
                    start: start,
                    end: end
                };
                return range;
            }
            if (currentSegmentList && currentSegmentList.length > 0) {
                originSegment = getSegmentByIndex(index, representation);
                if (originSegment) {
                    originAvailabilityTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, originSegment.presentationStartTime);
                } else {
                    originAvailabilityTime = index > 0 ? index * duration : timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);
                }
            } else {
                originAvailabilityTime = index > 0 ? index * duration : isDynamic ? periodRelativeRange.end : periodRelativeRange.start;
            }
            start = Math.floor(Math.max(originAvailabilityTime - availabilityLowerLimit, periodRelativeRange.start) / duration);
            end = Math.floor(Math.min(start + availabilityUpperLimit / duration, periodRelativeRange.end / duration));
            range = {
                start: start,
                end: end
            };
            return range;
        }
    }, {
        93: 93
    } ],
    80: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _SegmentsUtils = _dereq_(79);
        function TemplateSegmentsGetter(config, isDynamic) {
            var timelineConverter = config.timelineConverter;
            var instance = undefined;
            function getSegmentsFromTemplate(representation, requestedTime, index, availabilityUpperLimit) {
                var template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;
                var duration = representation.segmentDuration;
                var availabilityWindow = representation.segmentAvailabilityRange;
                var segments = [];
                var url = null;
                var seg = null;
                var segmentRange = undefined, periodSegIdx = undefined, startIdx = undefined, endIdx = undefined, start = undefined;
                start = representation.startNumber;
                if (isNaN(duration) && !isDynamic) {
                    segmentRange = {
                        start: start,
                        end: start
                    };
                } else {
                    segmentRange = (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);
                }
                startIdx = segmentRange.start;
                endIdx = segmentRange.end;
                for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {
                    seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx);
                    seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;
                    url = template.media;
                    url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Number", seg.replacementNumber);
                    url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Time", seg.replacementTime);
                    seg.media = url;
                    segments.push(seg);
                    seg = null;
                }
                if (isNaN(duration)) {
                    representation.availableSegmentsNumber = 1;
                } else {
                    representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);
                }
                return segments;
            }
            instance = {
                getSegments: getSegmentsFromTemplate
            };
            return instance;
        }
        TemplateSegmentsGetter.__dashjs_factory_name = "TemplateSegmentsGetter";
        var factory = _coreFactoryMaker2["default"].getClassFactory(TemplateSegmentsGetter);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48,
        79: 79
    } ],
    81: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function TimelineConverter() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, clientServerTimeShift = undefined, isClientServerTimeSyncCompleted = undefined, expectedLiveEdge = undefined;
            function initialize() {
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);
            }
            function isTimeSyncCompleted() {
                return isClientServerTimeSyncCompleted;
            }
            function setTimeSyncCompleted(value) {
                isClientServerTimeSyncCompleted = value;
            }
            function getClientTimeOffset() {
                return clientServerTimeShift;
            }
            function setClientTimeOffset(value) {
                clientServerTimeShift = value;
            }
            function getExpectedLiveEdge() {
                return expectedLiveEdge;
            }
            function setExpectedLiveEdge(value) {
                expectedLiveEdge = value;
            }
            function calcAvailabilityTimeFromPresentationTime(presentationTime, mpd, isDynamic, calculateEnd) {
                var availabilityTime = NaN;
                if (calculateEnd) {
                    if (isDynamic && mpd.timeShiftBufferDepth != Number.POSITIVE_INFINITY) {
                        availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime + mpd.timeShiftBufferDepth) * 1e3);
                    } else {
                        availabilityTime = mpd.availabilityEndTime;
                    }
                } else {
                    if (isDynamic) {
                        availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime - clientServerTimeShift) * 1e3);
                    } else {
                        availabilityTime = mpd.availabilityStartTime;
                    }
                }
                return availabilityTime;
            }
            function calcAvailabilityStartTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
                return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic);
            }
            function calcAvailabilityEndTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
                return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic, true);
            }
            function calcPresentationTimeFromWallTime(wallTime, period) {
                return (wallTime.getTime() - period.mpd.availabilityStartTime.getTime() + clientServerTimeShift * 1e3) / 1e3;
            }
            function calcPresentationTimeFromMediaTime(mediaTime, representation) {
                var periodStart = representation.adaptation.period.start;
                var presentationOffset = representation.presentationTimeOffset;
                return mediaTime + (periodStart - presentationOffset);
            }
            function calcMediaTimeFromPresentationTime(presentationTime, representation) {
                var periodStart = representation.adaptation.period.start;
                var presentationOffset = representation.presentationTimeOffset;
                return presentationTime - periodStart + presentationOffset;
            }
            function calcWallTimeForSegment(segment, isDynamic) {
                var suggestedPresentationDelay = undefined, displayStartTime = undefined, wallTime = undefined;
                if (isDynamic) {
                    suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay;
                    displayStartTime = segment.presentationStartTime + suggestedPresentationDelay;
                    wallTime = new Date(segment.availabilityStartTime.getTime() + displayStartTime * 1e3);
                }
                return wallTime;
            }
            function calcSegmentAvailabilityRange(voRepresentation, isDynamic) {
                var voPeriod = voRepresentation.adaptation.period;
                var range = {
                    start: voPeriod.start,
                    end: voPeriod.start + voPeriod.duration
                };
                if (!isDynamic) return range;
                if (!isClientServerTimeSyncCompleted && voRepresentation.segmentAvailabilityRange) {
                    return voRepresentation.segmentAvailabilityRange;
                }
                var d = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length ? voRepresentation.segments[voRepresentation.segments.length - 1].duration : 0);
                var now = calcPresentationTimeFromWallTime(new Date(), voPeriod);
                var periodEnd = voPeriod.start + voPeriod.duration;
                range.start = Math.max(now - voPeriod.mpd.timeShiftBufferDepth, voPeriod.start);
                var endOffset = voRepresentation.availabilityTimeOffset !== undefined && voRepresentation.availabilityTimeOffset < d ? d - voRepresentation.availabilityTimeOffset : d;
                range.end = now >= periodEnd && now - endOffset < periodEnd ? periodEnd : now - endOffset;
                return range;
            }
            function calcPeriodRelativeTimeFromMpdRelativeTime(representation, mpdRelativeTime) {
                var periodStartTime = representation.adaptation.period.start;
                return mpdRelativeTime - periodStartTime;
            }
            function onTimeSyncComplete(e) {
                if (isClientServerTimeSyncCompleted) return;
                if (e.offset !== undefined) {
                    setClientTimeOffset(e.offset / 1e3);
                    isClientServerTimeSyncCompleted = true;
                }
            }
            function resetInitialSettings() {
                clientServerTimeShift = 0;
                isClientServerTimeSyncCompleted = false;
                expectedLiveEdge = NaN;
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);
                resetInitialSettings();
            }
            instance = {
                initialize: initialize,
                isTimeSyncCompleted: isTimeSyncCompleted,
                setTimeSyncCompleted: setTimeSyncCompleted,
                getClientTimeOffset: getClientTimeOffset,
                setClientTimeOffset: setClientTimeOffset,
                getExpectedLiveEdge: getExpectedLiveEdge,
                setExpectedLiveEdge: setExpectedLiveEdge,
                calcAvailabilityStartTimeFromPresentationTime: calcAvailabilityStartTimeFromPresentationTime,
                calcAvailabilityEndTimeFromPresentationTime: calcAvailabilityEndTimeFromPresentationTime,
                calcPresentationTimeFromWallTime: calcPresentationTimeFromWallTime,
                calcPresentationTimeFromMediaTime: calcPresentationTimeFromMediaTime,
                calcPeriodRelativeTimeFromMpdRelativeTime: calcPeriodRelativeTimeFromMpdRelativeTime,
                calcMediaTimeFromPresentationTime: calcMediaTimeFromPresentationTime,
                calcSegmentAvailabilityRange: calcSegmentAvailabilityRange,
                calcWallTimeForSegment: calcWallTimeForSegment,
                reset: reset
            };
            return instance;
        }
        TimelineConverter.__dashjs_factory_name = "TimelineConverter";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(TimelineConverter);
        module.exports = exports["default"];
    }, {
        47: 47,
        48: 48,
        55: 55
    } ],
    82: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _streamingConstantsConstants = _dereq_(107);
        var _streamingConstantsConstants2 = _interopRequireDefault(_streamingConstantsConstants);
        var _SegmentsUtils = _dereq_(79);
        function TimelineSegmentsGetter(config, isDynamic) {
            config = config || {};
            var timelineConverter = config.timelineConverter;
            var instance = undefined;
            function checkConfig() {
                if (!timelineConverter || !timelineConverter.hasOwnProperty("calcMediaTimeFromPresentationTime") || !timelineConverter.hasOwnProperty("calcSegmentAvailabilityRange")) {
                    throw new Error(_streamingConstantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function getSegmentsFromTimeline(representation, requestedTime, index, availabilityUpperLimit) {
                checkConfig();
                if (!representation) {
                    throw new Error("no representation");
                }
                if (requestedTime === undefined) {
                    requestedTime = null;
                }
                var base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate || representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;
                var timeline = base.SegmentTimeline;
                var list = base.SegmentURL_asArray;
                var isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0;
                var maxSegmentsAhead = undefined;
                if (availabilityUpperLimit) {
                    maxSegmentsAhead = availabilityUpperLimit;
                } else {
                    maxSegmentsAhead = index > -1 || requestedTime !== null ? 10 : Infinity;
                }
                var time = 0;
                var scaledTime = 0;
                var availabilityIdx = -1;
                var segments = [];
                var requiredMediaTime = null;
                var fragments = undefined, frag = undefined, i = undefined, len = undefined, j = undefined, repeat = undefined, repeatEndTime = undefined, nextFrag = undefined, hasEnoughSegments = undefined, startIdx = undefined, fTimescale = undefined;
                var createSegment = function createSegment(s, i) {
                    var media = base.media;
                    var mediaRange = s.mediaRange;
                    if (list) {
                        media = list[i].media || "";
                        mediaRange = list[i].mediaRange;
                    }
                    return (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic, representation, time, s.d, fTimescale, media, mediaRange, availabilityIdx, s.tManifest);
                };
                fTimescale = representation.timescale;
                fragments = timeline.S_asArray;
                startIdx = index;
                if (requestedTime !== null) {
                    requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation);
                }
                for (i = 0, len = fragments.length; i < len; i++) {
                    frag = fragments[i];
                    repeat = 0;
                    if (frag.hasOwnProperty("r")) {
                        repeat = frag.r;
                    }
                    if (frag.hasOwnProperty("t")) {
                        time = frag.t;
                        scaledTime = time / fTimescale;
                    }
                    if (repeat < 0) {
                        nextFrag = fragments[i + 1];
                        if (nextFrag && nextFrag.hasOwnProperty("t")) {
                            repeatEndTime = nextFrag.t / fTimescale;
                        } else {
                            var availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end;
                            repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation);
                            representation.segmentDuration = frag.d / fTimescale;
                        }
                        repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;
                    }
                    if (hasEnoughSegments) {
                        if (isAvailableSegmentNumberCalculated) break;
                        availabilityIdx += repeat + 1;
                        continue;
                    }
                    for (j = 0; j <= repeat; j++) {
                        availabilityIdx++;
                        if (segments.length > maxSegmentsAhead) {
                            hasEnoughSegments = true;
                            if (isAvailableSegmentNumberCalculated) break;
                            continue;
                        }
                        if (requiredMediaTime !== null) {
                            if (scaledTime >= requiredMediaTime - frag.d / fTimescale * 1.5) {
                                segments.push(createSegment(frag, availabilityIdx));
                            }
                        } else if (availabilityIdx >= startIdx) {
                            segments.push(createSegment(frag, availabilityIdx));
                        }
                        time += frag.d;
                        scaledTime = time / fTimescale;
                    }
                }
                if (!isAvailableSegmentNumberCalculated) {
                    representation.availableSegmentsNumber = availabilityIdx + 1;
                }
                return segments;
            }
            instance = {
                getSegments: getSegmentsFromTimeline
            };
            return instance;
        }
        TimelineSegmentsGetter.__dashjs_factory_name = "TimelineSegmentsGetter";
        var factory = _coreFactoryMaker2["default"].getClassFactory(TimelineSegmentsGetter);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        107: 107,
        48: 48,
        79: 79
    } ],
    83: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var AdaptationSet = function AdaptationSet() {
            _classCallCheck(this, AdaptationSet);
            this.period = null;
            this.index = -1;
            this.type = null;
        };
        exports["default"] = AdaptationSet;
        module.exports = exports["default"];
    }, {} ],
    84: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DEFAULT_DVB_PRIORITY = 1;
        var DEFAULT_DVB_WEIGHT = 1;
        var BaseURL = function BaseURL(url, serviceLocation, priority, weight) {
            _classCallCheck(this, BaseURL);
            this.url = url || "";
            this.serviceLocation = serviceLocation || url || "";
            this.dvb_priority = priority || DEFAULT_DVB_PRIORITY;
            this.dvb_weight = weight || DEFAULT_DVB_WEIGHT;
            this.availabilityTimeOffset = 0;
            this.availabilityTimeComplete = true;
        };
        BaseURL.DEFAULT_DVB_PRIORITY = DEFAULT_DVB_PRIORITY;
        BaseURL.DEFAULT_DVB_WEIGHT = DEFAULT_DVB_WEIGHT;
        exports["default"] = BaseURL;
        module.exports = exports["default"];
    }, {} ],
    85: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Event = function Event() {
            _classCallCheck(this, Event);
            this.duration = NaN;
            this.presentationTime = NaN;
            this.id = NaN;
            this.messageData = "";
            this.eventStream = null;
            this.presentationTimeDelta = NaN;
        };
        exports["default"] = Event;
        module.exports = exports["default"];
    }, {} ],
    86: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var EventStream = function EventStream() {
            _classCallCheck(this, EventStream);
            this.adaptionSet = null;
            this.representation = null;
            this.period = null;
            this.timescale = 1;
            this.value = "";
            this.schemeIdUri = "";
        };
        exports["default"] = EventStream;
        module.exports = exports["default"];
    }, {} ],
    87: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var ManifestInfo = function ManifestInfo() {
            _classCallCheck(this, ManifestInfo);
            this.DVRWindowSize = NaN;
            this.loadedTime = null;
            this.availableFrom = null;
            this.minBufferTime = NaN;
            this.duration = NaN;
            this.isDynamic = false;
            this.maxFragmentDuration = null;
        };
        exports["default"] = ManifestInfo;
        module.exports = exports["default"];
    }, {} ],
    88: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var MediaInfo = function() {
            function MediaInfo() {
                _classCallCheck(this, MediaInfo);
                this.id = null;
                this.index = null;
                this.type = null;
                this.streamInfo = null;
                this.representationCount = 0;
                this.lang = null;
                this.viewpoint = null;
                this.accessibility = null;
                this.audioChannelConfiguration = null;
                this.roles = null;
                this.codec = null;
                this.mimeType = null;
                this.contentProtection = null;
                this.isText = false;
                this.KID = null;
                this.bitrateList = null;
            }
            _createClass(MediaInfo, [ {
                key: "isMediaInfoEqual",
                value: function isMediaInfoEqual(mediaInfo) {
                    if (!mediaInfo) {
                        return false;
                    }
                    var sameId = this.id === mediaInfo.id;
                    var sameViewpoint = this.viewpoint === mediaInfo.viewpoint;
                    var sameLang = this.lang === mediaInfo.lang;
                    var sameRoles = this.roles.toString() === mediaInfo.roles.toString();
                    var sameAccessibility = this.accessibility.toString() === mediaInfo.accessibility.toString();
                    var sameAudioChannelConfiguration = this.audioChannelConfiguration.toString() === mediaInfo.audioChannelConfiguration.toString();
                    return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration;
                }
            } ]);
            return MediaInfo;
        }();
        exports["default"] = MediaInfo;
        module.exports = exports["default"];
    }, {} ],
    89: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Mpd = function Mpd() {
            _classCallCheck(this, Mpd);
            this.manifest = null;
            this.suggestedPresentationDelay = 0;
            this.availabilityStartTime = null;
            this.availabilityEndTime = Number.POSITIVE_INFINITY;
            this.timeShiftBufferDepth = Number.POSITIVE_INFINITY;
            this.maxSegmentDuration = Number.POSITIVE_INFINITY;
            this.minimumUpdatePeriod = NaN;
            this.mediaPresentationDuration = NaN;
        };
        exports["default"] = Mpd;
        module.exports = exports["default"];
    }, {} ],
    90: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Period = function Period() {
            _classCallCheck(this, Period);
            this.id = null;
            this.index = -1;
            this.duration = NaN;
            this.start = NaN;
            this.mpd = null;
        };
        Period.DEFAULT_ID = "defaultId";
        exports["default"] = Period;
        module.exports = exports["default"];
    }, {} ],
    91: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _constantsDashConstants = _dereq_(62);
        var _constantsDashConstants2 = _interopRequireDefault(_constantsDashConstants);
        var Representation = function() {
            function Representation() {
                _classCallCheck(this, Representation);
                this.id = null;
                this.index = -1;
                this.adaptation = null;
                this.segmentInfoType = null;
                this.initialization = null;
                this.codecs = null;
                this.codecPrivateData = null;
                this.segmentDuration = NaN;
                this.timescale = 1;
                this.startNumber = 1;
                this.indexRange = null;
                this.range = null;
                this.presentationTimeOffset = 0;
                this.MSETimeOffset = NaN;
                this.segmentAvailabilityRange = null;
                this.availableSegmentsNumber = 0;
                this.bandwidth = NaN;
                this.width = NaN;
                this.height = NaN;
                this.scanType = null;
                this.maxPlayoutRate = NaN;
                this.availabilityTimeOffset = 0;
                this.availabilityTimeComplete = true;
            }
            _createClass(Representation, null, [ {
                key: "hasInitialization",
                value: function hasInitialization(r) {
                    return r.initialization !== null || r.range !== null;
                }
            }, {
                key: "hasSegments",
                value: function hasSegments(r) {
                    return r.segmentInfoType !== _constantsDashConstants2["default"].BASE_URL && r.segmentInfoType !== _constantsDashConstants2["default"].SEGMENT_BASE && !r.indexRange;
                }
            } ]);
            return Representation;
        }();
        exports["default"] = Representation;
        module.exports = exports["default"];
    }, {
        62: 62
    } ],
    92: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var RepresentationInfo = function RepresentationInfo() {
            _classCallCheck(this, RepresentationInfo);
            this.id = null;
            this.quality = null;
            this.DVRWindow = null;
            this.fragmentDuration = null;
            this.mediaInfo = null;
            this.MSETimeOffset = null;
        };
        exports["default"] = RepresentationInfo;
        module.exports = exports["default"];
    }, {} ],
    93: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Segment = function Segment() {
            _classCallCheck(this, Segment);
            this.indexRange = null;
            this.index = null;
            this.mediaRange = null;
            this.media = null;
            this.duration = NaN;
            this.replacementTime = null;
            this.replacementNumber = NaN;
            this.mediaStartTime = NaN;
            this.presentationStartTime = NaN;
            this.availabilityStartTime = NaN;
            this.availabilityEndTime = NaN;
            this.availabilityIdx = NaN;
            this.wallStartTime = NaN;
            this.representation = null;
        };
        exports["default"] = Segment;
        module.exports = exports["default"];
    }, {} ],
    94: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var StreamInfo = function StreamInfo() {
            _classCallCheck(this, StreamInfo);
            this.id = null;
            this.index = null;
            this.start = NaN;
            this.duration = NaN;
            this.manifestInfo = null;
            this.isLast = true;
        };
        exports["default"] = StreamInfo;
        module.exports = exports["default"];
    }, {} ],
    95: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var UTCTiming = function UTCTiming() {
            _classCallCheck(this, UTCTiming);
            this.schemeIdUri = "";
            this.value = "";
        };
        exports["default"] = UTCTiming;
        module.exports = exports["default"];
    }, {} ],
    96: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _netHTTPLoader = _dereq_(154);
        var _netHTTPLoader2 = _interopRequireDefault(_netHTTPLoader);
        var _voHeadRequest = _dereq_(224);
        var _voHeadRequest2 = _interopRequireDefault(_voHeadRequest);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _streamingUtilsBoxParser = _dereq_(203);
        var _streamingUtilsBoxParser2 = _interopRequireDefault(_streamingUtilsBoxParser);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function FragmentLoader(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, httpLoader = undefined;
            function setup() {
                var boxParser = (0, _streamingUtilsBoxParser2["default"])(context).getInstance();
                httpLoader = (0, _netHTTPLoader2["default"])(context).create({
                    errHandler: config.errHandler,
                    dashMetrics: config.dashMetrics,
                    mediaPlayerModel: config.mediaPlayerModel,
                    requestModifier: config.requestModifier,
                    boxParser: boxParser,
                    useFetch: config.settings.get().streaming.lowLatencyEnabled
                });
            }
            function checkForExistence(request) {
                var report = function report(success) {
                    eventBus.trigger(_coreEventsEvents2["default"].CHECK_FOR_EXISTENCE_COMPLETED, {
                        request: request,
                        exists: success
                    });
                };
                if (request) {
                    var headRequest = new _voHeadRequest2["default"](request.url);
                    httpLoader.load({
                        request: headRequest,
                        success: function success() {
                            report(true);
                        },
                        error: function error() {
                            report(false);
                        }
                    });
                } else {
                    report(false);
                }
            }
            function load(request) {
                var report = function report(data, error) {
                    eventBus.trigger(_coreEventsEvents2["default"].LOADING_COMPLETED, {
                        request: request,
                        response: data || null,
                        error: error || null,
                        sender: instance
                    });
                };
                if (request) {
                    httpLoader.load({
                        request: request,
                        progress: function progress(event) {
                            eventBus.trigger(_coreEventsEvents2["default"].LOADING_PROGRESS, {
                                request: request,
                                stream: event.stream
                            });
                            if (event.data) {
                                eventBus.trigger(_coreEventsEvents2["default"].LOADING_DATA_PROGRESS, {
                                    request: request,
                                    response: event.data || null,
                                    error: null,
                                    sender: instance
                                });
                            }
                        },
                        success: function success(data) {
                            report(data);
                        },
                        error: function error(request, statusText, errorText) {
                            report(undefined, new _voDashJSError2["default"](_coreErrorsErrors2["default"].FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE, errorText, statusText));
                        },
                        abort: function abort(request) {
                            if (request) {
                                eventBus.trigger(_coreEventsEvents2["default"].LOADING_ABANDONED, {
                                    request: request,
                                    mediaType: request.mediaType,
                                    sender: instance
                                });
                            }
                        }
                    });
                } else {
                    report(undefined, new _voDashJSError2["default"](_coreErrorsErrors2["default"].FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE, _coreErrorsErrors2["default"].FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE));
                }
            }
            function abort() {
                if (httpLoader) {
                    httpLoader.abort();
                }
            }
            function reset() {
                if (httpLoader) {
                    httpLoader.abort();
                    httpLoader = null;
                }
            }
            instance = {
                checkForExistence: checkForExistence,
                load: load,
                abort: abort,
                reset: reset
            };
            setup();
            return instance;
        }
        FragmentLoader.__dashjs_factory_name = "FragmentLoader";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(FragmentLoader);
        module.exports = exports["default"];
    }, {
        154: 154,
        203: 203,
        221: 221,
        224: 224,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    97: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _controllersXlinkController = _dereq_(122);
        var _controllersXlinkController2 = _interopRequireDefault(_controllersXlinkController);
        var _netHTTPLoader = _dereq_(154);
        var _netHTTPLoader2 = _interopRequireDefault(_netHTTPLoader);
        var _utilsURLUtils = _dereq_(216);
        var _utilsURLUtils2 = _interopRequireDefault(_utilsURLUtils);
        var _voTextRequest = _dereq_(228);
        var _voTextRequest2 = _interopRequireDefault(_voTextRequest);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _dashParserDashParser = _dereq_(65);
        var _dashParserDashParser2 = _interopRequireDefault(_dashParserDashParser);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);

        function ManifestLoader(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var urlUtils = (0, _utilsURLUtils2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, httpLoader = undefined, xlinkController = undefined, parser = undefined;
            var mssHandler = config.mssHandler;
            var errHandler = config.errHandler;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                eventBus.on(_coreEventsEvents2["default"].XLINK_READY, onXlinkReady, instance);
                httpLoader = (0, _netHTTPLoader2["default"])(context).create({
                    errHandler: errHandler,
                    dashMetrics: config.dashMetrics,
                    mediaPlayerModel: config.mediaPlayerModel,
                    requestModifier: config.requestModifier
                });
                xlinkController = (0, _controllersXlinkController2["default"])(context).create({
                    errHandler: errHandler,
                    dashMetrics: config.dashMetrics,
                    mediaPlayerModel: config.mediaPlayerModel,
                    requestModifier: config.requestModifier
                });
                parser = null;
            }
            function onXlinkReady(event) {
                eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                    manifest: event.manifest
                });
            }
            function createParser(data) {
                var parser = null;
                if (typeof data === "object") {
                    return (0, _dashParserDashParser2["default"])(context).create(); //TODO: find out how this works!
                } else if (data.indexOf("SmoothStreamingMedia") > -1) {
                    if (mssHandler) {
                        parser = mssHandler.createMssParser();
                        mssHandler.registerEvents();
                    }
                    return parser;
                } else if (data.indexOf("MPD") > -1) {
                    return (0, _dashParserDashParser2["default"])(context).create();
                } else {
                    return parser;
                }
            }

            function doLoad(url) {
                console.debug("ManifestLoader.doLoad() typeof url: ", typeof(url), "\n", url);

                var request = new _voTextRequest2["default"](url, _voMetricsHTTPRequest.HTTPRequest.MPD_TYPE);
                httpLoader.load({
                    request: request,
                    success: function success(data, textStatus, responseURL) {
                        if (!xlinkController) return;
                        var actualUrl = undefined, baseUri = undefined, manifest = undefined;
                        if (responseURL && responseURL !== url) {
                            baseUri = urlUtils.parseBaseUrl(responseURL);
                            actualUrl = responseURL;
                        } else {
                            if (urlUtils.isRelative(url)) {
                                url = urlUtils.resolve(url, window.location.href);
                            }
                            baseUri = urlUtils.parseBaseUrl(url);
                        }
                        if (parser === null) {
                            parser = createParser(data);
                        }
                        if (parser === null) {
                            eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                                manifest: null,
                                error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ("" + url))
                            });
                            return;
                        }
                        xlinkController.setMatchers(parser.getMatchers());
                        xlinkController.setIron(parser.getIron());

                        try {
                            manifest = parser.parse(data);
                        } catch (e) {
                            eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                                    manifest: null,
                                    error: new _voDashJSError2(_coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`
                                   )
                                }
                            );
                            return;
                        }

                        if (manifest) {
                            manifest.url = actualUrl || url;
                            if (!manifest.originalUrl) {
                                manifest.originalUrl = manifest.url;
                            }
                            if (manifest.hasOwnProperty(_constantsConstants2["default"].LOCATION)) {
                                baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);
                                logger.debug("BaseURI set by Location to: " + baseUri);
                            }
                            manifest.baseUri = baseUri;
                            manifest.loadedTime = new Date();
                            xlinkController.resolveManifestOnLoad(manifest);
                        } else {
                            eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                                manifest: null,
                                error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ("" + url))
                            });
                        }
                    },
                    error: function error(request, statusText, errorText) {
                        eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                            manifest: null,
                            error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + (url + ", " + errorText))
                        });
                    }
                });
            }

            function doLoadObject(url, json) { //DIFF3
                console.debug("ManifestLoader.doLoadObject() typeof json: ", typeof(json), "\n", json);

                var request = new _voTextRequest2["default"](url, _voMetricsHTTPRequest.HTTPRequest.MPD_TYPE);
                httpLoader.load({
                    request: request,
                    success: function success(data, textStatus, responseURL) {
                        console.debug("httpLoader.load success");
                        if (!xlinkController) return;
                        var actualUrl = undefined, baseUri = undefined, manifest = undefined;
                        if (responseURL && responseURL !== url) {
                            baseUri = urlUtils.parseBaseUrl(responseURL);
                            actualUrl = responseURL;
                        } else {
                            if (urlUtils.isRelative(url)) {
                                url = urlUtils.resolve(url, window.location.href);
                            }
                            baseUri = urlUtils.parseBaseUrl(url);
                        }
                        if (parser === null) {
                            parser = createParser(data);
                            console.debug("createParser");
                        }
                        if (parser === null) {
                            eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                                manifest: null,
                                error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ("" + url))
                            });
                            return;
                        }
                        xlinkController.setMatchers(parser.getMatchers());
                        xlinkController.setIron(parser.getIron());

                        try {
                            manifest = parser.parseJSON(json);
                        } catch (e) {
                            eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                                    manifest: null,
                                    error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`
                                   )
                                }
                            );
                            return;
                        }

                        if (manifest) {
                            console.debug("manifest =  \n", manifest);
                            manifest.url = actualUrl || url;
                            if (!manifest.originalUrl) {
                                manifest.originalUrl = manifest.url;
                            }
                            if (manifest.hasOwnProperty(_constantsConstants2["default"].LOCATION)) {
                                baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);
                                logger.debug("BaseURI set by Location to: " + baseUri);
                            }
                            manifest.baseUri = baseUri;
                            manifest.loadedTime = new Date();
                            xlinkController.resolveManifestOnLoad(manifest);
                        } else {
                            eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                                manifest: null,
                                error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ("" + url))
                            });
                        }
                    },
                    error: function error(request, statusText, errorText) {
                        eventBus.trigger(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, {
                            manifest: null,
                            error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + (url + ", " + errorText))
                        });
                    }
                });
            }

            function reset() {
                eventBus.off(_coreEventsEvents2["default"].XLINK_READY, onXlinkReady, instance);
                if (xlinkController) {
                    xlinkController.reset();
                    xlinkController = null;
                }
                if (httpLoader) {
                    httpLoader.abort();
                    httpLoader = null;
                }
                if (mssHandler) {
                    mssHandler.reset();
                }
            }
            instance = {
                load: function(url) { //DIFF4
                  console.debug("ManifestLoader.load() Typeof url: ", typeof url, "\n", url);
                  if (typeof url === "string") {
                      doLoad.call(this, url);
                  } else if (typeof url === "object") {
                      doLoadObject.call(this, url[0], url[1]);
                  }
                },
                reset: reset
            };
            setup();
            return instance;
        }
        ManifestLoader.__dashjs_factory_name = "ManifestLoader";
        var factory = _coreFactoryMaker2["default"].getClassFactory(ManifestLoader);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        107: 107,
        122: 122,
        154: 154,
        216: 216,
        221: 221,
        228: 228,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55,
        65: 65
    } ],
    98: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        function ManifestUpdater() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, refreshDelay = undefined, refreshTimer = undefined, isPaused = undefined, isUpdating = undefined, manifestLoader = undefined, manifestModel = undefined, adapter = undefined, errHandler = undefined, mediaPlayerModel = undefined, settings = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function setConfig(config) {
                if (!config) return;
                if (config.manifestModel) {
                    manifestModel = config.manifestModel;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
                if (config.mediaPlayerModel) {
                    mediaPlayerModel = config.mediaPlayerModel;
                }
                if (config.manifestLoader) {
                    manifestLoader = config.manifestLoader;
                }
                if (config.errHandler) {
                    errHandler = config.errHandler;
                }
                if (config.settings) {
                    settings = config.settings;
                }
            }
            function initialize() {
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].STREAMS_COMPOSED, onStreamsComposed, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_STARTED, onPlaybackStarted, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_PAUSED, onPlaybackPaused, this);
                eventBus.on(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);
            }
            function setManifest(manifest) {
                console.debug("ManifestUpdater.setManifest()");
                update(manifest);
            }
            function resetInitialSettings() {
                refreshDelay = NaN;
                isUpdating = false;
                isPaused = true;
                stopManifestRefreshTimer();
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_STARTED, onPlaybackStarted, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_PAUSED, onPlaybackPaused, this);
                eventBus.off(_coreEventsEvents2["default"].STREAMS_COMPOSED, onStreamsComposed, this);
                eventBus.off(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);
                resetInitialSettings();
            }
            function stopManifestRefreshTimer() {
                if (refreshTimer !== null) {
                    clearInterval(refreshTimer);
                    refreshTimer = null;
                }
            }
            function startManifestRefreshTimer(delay) {
                stopManifestRefreshTimer();
                if (isNaN(delay) && !isNaN(refreshDelay)) {
                    delay = refreshDelay * 1e3;
                }
                if (!isNaN(delay)) {
                    logger.debug("Refresh manifest in " + delay + " milliseconds.");
                    refreshTimer = setTimeout(onRefreshTimer, delay);
                }
            }
            function refreshManifest() {
                isUpdating = true;
                var manifest = manifestModel.getValue();
                var url = manifest.url;
                var location = adapter.getLocation(manifest);
                if (location) {
                    url = location;
                }
                manifestLoader.load(url);
            }
            function update(manifest) {
                manifestModel.setValue(manifest);
                var date = new Date();
                var latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1e3;
                refreshDelay = adapter.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);
                if (refreshDelay * 1e3 > 2147483647) {
                    refreshDelay = 2147483647 / 1e3;
                }
                eventBus.trigger(_coreEventsEvents2["default"].MANIFEST_UPDATED, {
                    manifest: manifest
                });
                logger.info("Manifest has been refreshed at " + date + "[" + date.getTime() / 1e3 + "] ");
                if (!isPaused) {
                    startManifestRefreshTimer();
                }
            }
            function onRefreshTimer() {
                if (isPaused && !settings.get().streaming.scheduleWhilePaused) {
                    return;
                }
                if (isUpdating) {
                    startManifestRefreshTimer(settings.get().streaming.manifestUpdateRetryInterval);
                    return;
                }
                refreshManifest();
            }
            function onManifestLoaded(e) {
                if (!e.error) {
                    update(e.manifest);
                } else if (e.error.code === _coreErrorsErrors2["default"].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE) {
                    errHandler.error(e.error);
                }
            }
            function onPlaybackStarted() {
                isPaused = false;
                startManifestRefreshTimer();
            }
            function onPlaybackPaused() {
                isPaused = true;
                stopManifestRefreshTimer();
            }
            function onStreamsComposed() {
                isUpdating = false;
            }
            instance = {
                initialize: initialize,
                setManifest: setManifest,
                refreshManifest: refreshManifest,
                setConfig: setConfig,
                reset: reset
            };
            setup();
            return instance;
        }
        ManifestUpdater.__dashjs_factory_name = "ManifestUpdater";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(ManifestUpdater);
        module.exports = exports["default"];
    }, {
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    99: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _externalsCea608Parser = _dereq_(2);
        var _externalsCea608Parser2 = _interopRequireDefault(_externalsCea608Parser);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        var _controllersPlaybackController = _dereq_(118);
        var _controllersPlaybackController2 = _interopRequireDefault(_controllersPlaybackController);
        var _controllersStreamController = _dereq_(120);
        var _controllersStreamController2 = _interopRequireDefault(_controllersStreamController);
        var _controllersMediaController = _dereq_(116);
        var _controllersMediaController2 = _interopRequireDefault(_controllersMediaController);
        var _controllersBaseURLController = _dereq_(111);
        var _controllersBaseURLController2 = _interopRequireDefault(_controllersBaseURLController);
        var _ManifestLoader = _dereq_(97);
        var _ManifestLoader2 = _interopRequireDefault(_ManifestLoader);
        var _utilsErrorHandler = _dereq_(208);
        var _utilsErrorHandler2 = _interopRequireDefault(_utilsErrorHandler);
        var _utilsCapabilities = _dereq_(204);
        var _utilsCapabilities2 = _interopRequireDefault(_utilsCapabilities);
        var _textTextTracks = _dereq_(199);
        var _textTextTracks2 = _interopRequireDefault(_textTextTracks);
        var _utilsRequestModifier = _dereq_(213);
        var _utilsRequestModifier2 = _interopRequireDefault(_utilsRequestModifier);
        var _textTextController = _dereq_(197);
        var _textTextController2 = _interopRequireDefault(_textTextController);
        var _modelsURIFragmentModel = _dereq_(151);
        var _modelsURIFragmentModel2 = _interopRequireDefault(_modelsURIFragmentModel);
        var _modelsManifestModel = _dereq_(148);
        var _modelsManifestModel2 = _interopRequireDefault(_modelsManifestModel);
        var _modelsMediaPlayerModel = _dereq_(149);
        var _modelsMediaPlayerModel2 = _interopRequireDefault(_modelsMediaPlayerModel);
        var _controllersAbrController = _dereq_(110);
        var _controllersAbrController2 = _interopRequireDefault(_controllersAbrController);
        var _modelsVideoModel = _dereq_(152);
        var _modelsVideoModel2 = _interopRequireDefault(_modelsVideoModel);
        var _utilsDOMStorage = _dereq_(206);
        var _utilsDOMStorage2 = _interopRequireDefault(_utilsDOMStorage);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _MediaPlayerEvents = _dereq_(100);
        var _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreSettings = _dereq_(49);
        var _coreSettings2 = _interopRequireDefault(_coreSettings);
        var _coreVersion = _dereq_(51);
        var _dashDashAdapter = _dereq_(57);
        var _dashDashAdapter2 = _interopRequireDefault(_dashDashAdapter);
        var _dashDashMetrics = _dereq_(59);
        var _dashDashMetrics2 = _interopRequireDefault(_dashDashMetrics);
        var _dashUtilsTimelineConverter = _dereq_(81);
        var _dashUtilsTimelineConverter2 = _interopRequireDefault(_dashUtilsTimelineConverter);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _externalsBase64 = _dereq_(1);
        var _externalsBase642 = _interopRequireDefault(_externalsBase64);
        var _codemIsoboxer = _dereq_(13);
        var _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _utilsSupervisorTools = _dereq_(214);
        function MediaPlayer() {
            var STREAMING_NOT_INITIALIZED_ERROR = "You must first call initialize() and set a source before calling this method";
            var PLAYBACK_NOT_INITIALIZED_ERROR = "You must first call initialize() and set a valid source and view before calling this method";
            var ELEMENT_NOT_ATTACHED_ERROR = "You must first call attachView() to set the video element before calling this method";
            var SOURCE_NOT_ATTACHED_ERROR = "You must first call attachSource() with a valid source before calling this method";
            var MEDIA_PLAYER_NOT_INITIALIZED_ERROR = "MediaPlayer not initialized!";
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var settings = (0, _coreSettings2["default"])(context).getInstance();
            var debug = (0, _coreDebug2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, source = undefined, protectionData = undefined, mediaPlayerInitialized = undefined, streamingInitialized = undefined, playbackInitialized = undefined, autoPlay = undefined, abrController = undefined, timelineConverter = undefined, mediaController = undefined, protectionController = undefined, metricsReportingController = undefined, mssHandler = undefined, adapter = undefined, mediaPlayerModel = undefined, errHandler = undefined, capabilities = undefined, streamController = undefined, playbackController = undefined, dashMetrics = undefined, manifestModel = undefined, videoModel = undefined, textController = undefined, uriFragmentModel = undefined, domStorage = undefined;
            function setup() {
                logger = debug.getLogger(instance);
                mediaPlayerInitialized = false;
                playbackInitialized = false;
                streamingInitialized = false;
                autoPlay = true;
                protectionController = null;
                protectionData = null;
                adapter = null;
                _coreEventsEvents2["default"].extend(_MediaPlayerEvents2["default"]);
                mediaPlayerModel = (0, _modelsMediaPlayerModel2["default"])(context).getInstance();
                videoModel = (0, _modelsVideoModel2["default"])(context).getInstance();
                uriFragmentModel = (0, _modelsURIFragmentModel2["default"])(context).getInstance();
            }
            function setConfig(config) {
                if (!config) {
                    return;
                }
                if (config.capabilities) {
                    capabilities = config.capabilities;
                }
                if (config.streamController) {
                    streamController = config.streamController;
                }
                if (config.playbackController) {
                    playbackController = config.playbackController;
                }
                if (config.mediaPlayerModel) {
                    mediaPlayerModel = config.mediaPlayerModel;
                }
                if (config.abrController) {
                    abrController = config.abrController;
                }
                if (config.mediaController) {
                    mediaController = config.mediaController;
                }
                if (config.settings) {
                    settings = config.settings;
                }
            }
            function initialize(view, source, AutoPlay) {
                if (!capabilities) {
                    capabilities = (0, _utilsCapabilities2["default"])(context).getInstance();
                }
                errHandler = (0, _utilsErrorHandler2["default"])(context).getInstance();
                if (!capabilities.supportsMediaSource()) {
                    errHandler.capabilityError("mediasource");
                    errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].CAPABILITY_MEDIASOURCE_ERROR_CODE, _coreErrorsErrors2["default"].CAPABILITY_MEDIASOURCE_ERROR_MESSAGE));
                    return;
                }
                if (mediaPlayerInitialized) return;
                mediaPlayerInitialized = true;
                timelineConverter = (0, _dashUtilsTimelineConverter2["default"])(context).getInstance();
                if (!abrController) {
                    abrController = (0, _controllersAbrController2["default"])(context).getInstance();
                }
                if (!playbackController) {
                    playbackController = (0, _controllersPlaybackController2["default"])(context).getInstance();
                }
                if (!mediaController) {
                    mediaController = (0, _controllersMediaController2["default"])(context).getInstance();
                }
                adapter = (0, _dashDashAdapter2["default"])(context).getInstance();
                manifestModel = (0, _modelsManifestModel2["default"])(context).getInstance();
                dashMetrics = (0, _dashDashMetrics2["default"])(context).getInstance({
                    settings: settings
                });
                textController = (0, _textTextController2["default"])(context).getInstance();
                domStorage = (0, _utilsDOMStorage2["default"])(context).getInstance({
                    settings: settings
                });
                adapter.setConfig({
                    constants: _constantsConstants2["default"],
                    cea608parser: _externalsCea608Parser2["default"],
                    errHandler: errHandler,
                    BASE64: _externalsBase642["default"]
                });
                restoreDefaultUTCTimingSources();
                setAutoPlay(AutoPlay !== undefined ? AutoPlay : true);
                if (view) {
                    attachView(view);
                }
                if (source) {
                    attachSource(source);
                }
                logger.info("[dash.js " + getVersion() + "] " + "MediaPlayer has been initialized");
            }
            function reset() {
                attachSource(null);
                attachView(null);
                protectionData = null;
                if (protectionController) {
                    protectionController.reset();
                    protectionController = null;
                }
                if (metricsReportingController) {
                    metricsReportingController.reset();
                    metricsReportingController = null;
                }
                settings.reset();
            }
            function isReady() {
                return !!source && !!videoModel.getElement();
            }
            function on(type, listener, scope) {
                eventBus.on(type, listener, scope);
            }
            function off(type, listener, scope) {
                eventBus.off(type, listener, scope);
            }
            function getVersion() {
                return (0, _coreVersion.getVersionString)();
            }
            function getDebug() {
                return debug;
            }
            function preload() {
                if (videoModel.getElement() || streamingInitialized) {
                    return false;
                }
                if (source) {
                    initializePlayback();
                } else {
                    throw SOURCE_NOT_ATTACHED_ERROR;
                }
            }
            function play() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                if (!autoPlay || isPaused() && playbackInitialized) {
                    playbackController.play();
                }
            }
            function pause() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                playbackController.pause();
            }
            function isPaused() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                return playbackController.isPaused();
            }
            function seek(value) {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                (0, _utilsSupervisorTools.checkParameterType)(value, "number");
                if (isNaN(value)) {
                    throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR;
                }
                var s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;
                playbackController.seek(s);
            }
            function isSeeking() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                return playbackController.isSeeking();
            }
            function isDynamic() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                return playbackController.getIsDynamic();
            }
            function setPlaybackRate(value) {
                getVideoElement().playbackRate = value;
            }
            function getPlaybackRate() {
                return getVideoElement().playbackRate;
            }
            function setMute(value) {
                (0, _utilsSupervisorTools.checkParameterType)(value, "boolean");
                getVideoElement().muted = value;
            }
            function isMuted() {
                return getVideoElement().muted;
            }
            function setVolume(value) {
                if (typeof value !== "number" || isNaN(value) || value < 0 || value > 1) {
                    throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR;
                }
                getVideoElement().volume = value;
            }
            function getVolume() {
                return getVideoElement().volume;
            }
            function getBufferLength(type) {
                var types = [ _constantsConstants2["default"].VIDEO, _constantsConstants2["default"].AUDIO, _constantsConstants2["default"].FRAGMENTED_TEXT ];
                if (!type) {
                    var buffer = types.map(function(t) {
                        return getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(t) : Number.MAX_VALUE;
                    }).reduce(function(p, c) {
                        return Math.min(p, c);
                    });
                    return buffer === Number.MAX_VALUE ? NaN : buffer;
                } else {
                    if (types.indexOf(type) !== -1) {
                        var buffer = getDashMetrics().getCurrentBufferLevel(type);
                        return buffer ? buffer : NaN;
                    } else {
                        logger.warn("getBufferLength requested for invalid type");
                        return NaN;
                    }
                }
            }
            function getDVRWindowSize() {
                var metric = dashMetrics.getCurrentDVRInfo();
                if (!metric) {
                    return 0;
                }
                return metric.manifestInfo.DVRWindowSize;
            }
            function getDVRSeekOffset(value) {
                var metric = dashMetrics.getCurrentDVRInfo();
                if (!metric) {
                    return 0;
                }
                var liveDelay = playbackController.getLiveDelay();
                var val = metric.range.start + value;
                if (val > metric.range.end - liveDelay) {
                    val = metric.range.end - liveDelay;
                }
                return val;
            }
            function time(streamId) {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                var t = getVideoElement().currentTime;
                if (streamId !== undefined) {
                    t = streamController.getTimeRelativeToStreamId(t, streamId);
                } else if (playbackController.getIsDynamic()) {
                    var metric = dashMetrics.getCurrentDVRInfo();
                    t = metric === null ? 0 : duration() - (metric.range.end - metric.time);
                }
                return t;
            }
            function duration() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                var d = getVideoElement().duration;
                if (playbackController.getIsDynamic()) {
                    var metric = dashMetrics.getCurrentDVRInfo();
                    var range = undefined;
                    if (!metric) {
                        return 0;
                    }
                    range = metric.range.end - metric.range.start;
                    d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;
                }
                return d;
            }
            function timeAsUTC() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                if (time() < 0) {
                    return NaN;
                }
                return getAsUTC(time());
            }
            function durationAsUTC() {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                return getAsUTC(duration());
            }
            function getTopBitrateInfoFor(type) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                return abrController.getTopBitrateInfoFor(type);
            }
            function getQualityFor(type) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                if (type === _constantsConstants2["default"].IMAGE) {
                    var activeStream = getActiveStream();
                    if (!activeStream) {
                        return -1;
                    }
                    var thumbnailController = activeStream.getThumbnailController();
                    if (!thumbnailController) {
                        return -1;
                    }
                    return thumbnailController.getCurrentTrackIndex();
                }
                return abrController.getQualityFor(type);
            }
            function setQualityFor(type, value) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                if (type === _constantsConstants2["default"].IMAGE) {
                    var activeStream = getActiveStream();
                    if (!activeStream) {
                        return;
                    }
                    var thumbnailController = activeStream.getThumbnailController();
                    if (thumbnailController) {
                        thumbnailController.setTrackByIndex(value);
                    }
                }
                abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);
            }
            function updatePortalSize() {
                abrController.setElementSize();
                abrController.setWindowResizeEventCalled(true);
            }
            function setAutoPlay(value) {
                (0, _utilsSupervisorTools.checkParameterType)(value, "boolean");
                autoPlay = value;
            }
            function getAutoPlay() {
                return autoPlay;
            }
            function getCurrentLiveLatency() {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                if (!playbackInitialized) {
                    return NaN;
                }
                return playbackController.getCurrentLiveLatency();
            }
            function addABRCustomRule(type, rulename, rule) {
                mediaPlayerModel.addABRCustomRule(type, rulename, rule);
            }
            function removeABRCustomRule(rulename) {
                mediaPlayerModel.removeABRCustomRule(rulename);
            }
            function removeAllABRCustomRule() {
                mediaPlayerModel.removeABRCustomRule();
            }
            function addUTCTimingSource(schemeIdUri, value) {
                mediaPlayerModel.addUTCTimingSource(schemeIdUri, value);
            }
            function removeUTCTimingSource(schemeIdUri, value) {
                mediaPlayerModel.removeUTCTimingSource(schemeIdUri, value);
            }
            function clearDefaultUTCTimingSources() {
                mediaPlayerModel.clearDefaultUTCTimingSources();
            }
            function restoreDefaultUTCTimingSources() {
                mediaPlayerModel.restoreDefaultUTCTimingSources();
            }
            function getAverageThroughput(type) {
                var throughputHistory = abrController.getThroughputHistory();
                return throughputHistory ? throughputHistory.getAverageThroughput(type) : 0;
            }
            function setXHRWithCredentialsForType(type, value) {
                mediaPlayerModel.setXHRWithCredentialsForType(type, value);
            }
            function getXHRWithCredentialsForType(type) {
                return mediaPlayerModel.getXHRWithCredentialsForType(type);
            }
            function getDashMetrics() {
                return dashMetrics;
            }
            function setTextDefaultLanguage(lang) {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                textController.setTextDefaultLanguage(lang);
            }
            function getTextDefaultLanguage() {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                return textController.getTextDefaultLanguage();
            }
            function setTextDefaultEnabled(enable) {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                textController.setTextDefaultEnabled(enable);
            }
            function getTextDefaultEnabled() {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                return textController.getTextDefaultEnabled();
            }
            function enableText(enable) {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                textController.enableText(enable);
            }
            function enableForcedTextStreaming(enable) {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                textController.enableForcedTextStreaming(enable);
            }
            function isTextEnabled() {
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                return textController.isTextEnabled();
            }
            function setTextTrack(idx) {
                if (!playbackInitialized) {
                    throw PLAYBACK_NOT_INITIALIZED_ERROR;
                }
                if (textController === undefined) {
                    textController = (0, _textTextController2["default"])(context).getInstance();
                }
                textController.setTextTrack(idx);
            }
            function getCurrentTextTrackIndex() {
                var idx = NaN;
                if (textController) {
                    idx = textController.getCurrentTrackIdx();
                }
                return idx;
            }
            function displayCaptionsOnTop(value) {
                var textTracks = (0, _textTextTracks2["default"])(context).getInstance();
                textTracks.setConfig({
                    videoModel: videoModel
                });
                textTracks.initialize();
                textTracks.setDisplayCConTop(value);
            }
            function getVideoElement() {
                if (!videoModel.getElement()) {
                    throw ELEMENT_NOT_ATTACHED_ERROR;
                }
                return videoModel.getElement();
            }
            function attachView(element) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                videoModel.setElement(element);
                if (element) {
                    detectProtection();
                    detectMetricsReporting();
                    detectMss();
                    if (streamController) {
                        streamController.switchToVideoElement();
                    }
                }
                if (playbackInitialized) {
                    resetPlaybackControllers();
                }
                initializePlayback();
            }
            function getTTMLRenderingDiv() {
                return videoModel ? videoModel.getTTMLRenderingDiv() : null;
            }
            function attachTTMLRenderingDiv(div) {
                if (!videoModel.getElement()) {
                    throw ELEMENT_NOT_ATTACHED_ERROR;
                }
                videoModel.setTTMLRenderingDiv(div);
            }
            function getBitrateInfoListFor(type) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                var stream = getActiveStream();
                return stream ? stream.getBitrateListFor(type) : [];
            }
            function getStreamsFromManifest(manifest) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                return adapter.getStreamsInfo(manifest);
            }
            function getTracksFor(type) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                var streamInfo = streamController.getActiveStreamInfo();
                return mediaController.getTracksFor(type, streamInfo);
            }
            function getTracksForTypeFromManifest(type, manifest, streamInfo) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                streamInfo = streamInfo || adapter.getStreamsInfo(manifest, 1)[0];
                return streamInfo ? adapter.getAllMediaInfoForType(streamInfo, type, manifest) : [];
            }
            function getCurrentTrackFor(type) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                var streamInfo = streamController.getActiveStreamInfo();
                return mediaController.getCurrentTrackFor(type, streamInfo);
            }
            function setQualityForSettingsFor(type, value) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                mediaController.setInitialSettings(type, value);
            }
            function getInitialMediaSettingsFor(type) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                return mediaController.getInitialSettings(type);
            }
            function setCurrentTrack(track) {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                mediaController.setTrack(track);
            }
            function getTrackSwitchModeFor(type) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                return mediaController.getSwitchMode(type);
            }
            function setTrackSwitchModeFor(type, mode) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                mediaController.setSwitchMode(type, mode);
            }
            function setSelectionModeForInitialTrack(mode) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                mediaController.setSelectionModeForInitialTrack(mode);
            }
            function getSelectionModeForInitialTrack() {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                return mediaController.getSelectionModeForInitialTrack();
            }
            function getProtectionController() {
                return detectProtection();
            }
            function attachProtectionController(value) {
                protectionController = value;
            }
            function setProtectionData(value) {
                protectionData = value;
                if (streamController) {
                    streamController.setProtectionData(protectionData);
                }
            }
            function getThumbnail(time, callback) {
                if (time < 0) {
                    return null;
                }
                var s = playbackController.getIsDynamic() ? getDVRSeekOffset(time) : time;
                var stream = streamController.getStreamForTime(s);
                if (stream === null) {
                    return null;
                }
                var thumbnailController = stream.getThumbnailController();
                if (!thumbnailController) {
                    return null;
                }
                var timeInPeriod = streamController.getTimeRelativeToStreamId(s, stream.getId());
                return thumbnailController.get(timeInPeriod, callback);
            }
            function retrieveManifest(url, callback) {
                var manifestLoader = createManifestLoader();
                var self = this;
                var handler = function handler(e) {
                    if (!e.error) {
                        callback(e.manifest);
                    } else {
                        callback(null, e.error);
                    }
                    eventBus.off(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, handler, self);
                    manifestLoader.reset();
                };
                eventBus.on(_coreEventsEvents2["default"].INTERNAL_MANIFEST_LOADED, handler, self);
                uriFragmentModel.initialize(url);
                manifestLoader.load(url);
            }
            function getSource() {
                if (!source) {
                    throw SOURCE_NOT_ATTACHED_ERROR;
                }
                return source;
            }
            function attachSource(urlOrManifest) {
                if (!mediaPlayerInitialized) {
                    throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
                }
                if (typeof urlOrManifest === "string") {
                    uriFragmentModel.initialize(urlOrManifest);
                }
                source = urlOrManifest;
                if (streamingInitialized || playbackInitialized) {
                    resetPlaybackControllers();
                }
                if (isReady()) {
                    initializePlayback();
                }
            }
            function getSettings() {
                return settings.get();
            }
            function updateSettings(settingsObj) {
                settings.update(settingsObj);
            }
            function resetSettings() {
                settings.reset();
            }
            function formatUTC(time, locales, hour12) {
                var withDate = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                var dt = new Date(time * 1e3);
                var d = dt.toLocaleDateString(locales);
                var t = dt.toLocaleTimeString(locales, {
                    hour12: hour12
                });
                return withDate ? t + " " + d : t;
            }
            function convertToTimeCode(value) {
                value = Math.max(value, 0);
                var h = Math.floor(value / 3600);
                var m = Math.floor(value % 3600 / 60);
                var s = Math.floor(value % 3600 % 60);
                return (h === 0 ? "" : h < 10 ? "0" + h.toString() + ":" : h.toString() + ":") + (m < 10 ? "0" + m.toString() : m.toString()) + ":" + (s < 10 ? "0" + s.toString() : s.toString());
            }
            function extend(parentNameString, childInstance, override) {
                _coreFactoryMaker2["default"].extend(parentNameString, childInstance, override, context);
            }
            function getActiveStream() {
                if (!streamingInitialized) {
                    throw STREAMING_NOT_INITIALIZED_ERROR;
                }
                var streamInfo = streamController.getActiveStreamInfo();
                return streamInfo ? streamController.getStreamById(streamInfo.id) : null;
            }
            function resetPlaybackControllers() {
                playbackInitialized = false;
                streamingInitialized = false;
                adapter.reset();
                streamController.reset();
                playbackController.reset();
                abrController.reset();
                mediaController.reset();
                textController.reset();
                if (protectionController) {
                    if (settings.get().streaming.keepProtectionMediaKeys) {
                        protectionController.stop();
                    } else {
                        protectionController.reset();
                        protectionController = null;
                        detectProtection();
                    }
                }
            }
            function createPlaybackControllers() {
                var manifestLoader = createManifestLoader();
                if (!streamController) {
                    streamController = (0, _controllersStreamController2["default"])(context).getInstance();
                }
                mediaController.setConfig({
                    domStorage: domStorage
                });
                streamController.setConfig({
                    capabilities: capabilities,
                    manifestLoader: manifestLoader,
                    manifestModel: manifestModel,
                    mediaPlayerModel: mediaPlayerModel,
                    protectionController: protectionController,
                    adapter: adapter,
                    dashMetrics: dashMetrics,
                    errHandler: errHandler,
                    timelineConverter: timelineConverter,
                    videoModel: videoModel,
                    playbackController: playbackController,
                    abrController: abrController,
                    mediaController: mediaController,
                    textController: textController,
                    settings: settings
                });
                playbackController.setConfig({
                    streamController: streamController,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    adapter: adapter,
                    videoModel: videoModel,
                    timelineConverter: timelineConverter,
                    uriFragmentModel: uriFragmentModel,
                    settings: settings
                });
                abrController.setConfig({
                    streamController: streamController,
                    domStorage: domStorage,
                    mediaPlayerModel: mediaPlayerModel,
                    dashMetrics: dashMetrics,
                    adapter: adapter,
                    videoModel: videoModel,
                    settings: settings
                });
                abrController.createAbrRulesCollection();
                textController.setConfig({
                    errHandler: errHandler,
                    manifestModel: manifestModel,
                    adapter: adapter,
                    mediaController: mediaController,
                    streamController: streamController,
                    videoModel: videoModel
                });
                streamController.initialize(autoPlay, protectionData);
            }
            function createManifestLoader() {
                return (0, _ManifestLoader2["default"])(context).create({
                    errHandler: errHandler,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    requestModifier: (0, _utilsRequestModifier2["default"])(context).getInstance(),
                    mssHandler: mssHandler,
                    settings: settings
                });
            }
            function detectProtection() {
                if (protectionController) {
                    return protectionController;
                }
                var Protection = dashjs.Protection;
                if (typeof Protection === "function") {
                    var protection = Protection(context).create();
                    _coreEventsEvents2["default"].extend(Protection.events);
                    _MediaPlayerEvents2["default"].extend(Protection.events, {
                        publicOnly: true
                    });
                    _coreErrorsErrors2["default"].extend(Protection.errors);
                    if (!capabilities) {
                        capabilities = (0, _utilsCapabilities2["default"])(context).getInstance();
                    }
                    protectionController = protection.createProtectionSystem({
                        debug: debug,
                        errHandler: errHandler,
                        videoModel: videoModel,
                        capabilities: capabilities,
                        eventBus: eventBus,
                        events: _coreEventsEvents2["default"],
                        BASE64: _externalsBase642["default"],
                        constants: _constantsConstants2["default"]
                    });
                    return protectionController;
                }
                return null;
            }
            function detectMetricsReporting() {
                if (metricsReportingController) {
                    return;
                }
                var MetricsReporting = dashjs.MetricsReporting;
                if (typeof MetricsReporting === "function") {
                    var metricsReporting = MetricsReporting(context).create();
                    metricsReportingController = metricsReporting.createMetricsReporting({
                        debug: debug,
                        eventBus: eventBus,
                        mediaElement: getVideoElement(),
                        adapter: adapter,
                        dashMetrics: dashMetrics,
                        events: _coreEventsEvents2["default"],
                        constants: _constantsConstants2["default"],
                        metricsConstants: _constantsMetricsConstants2["default"]
                    });
                }
            }
            function detectMss() {
                if (mssHandler) {
                    return;
                }
                var MssHandler = dashjs.MssHandler;
                if (typeof MssHandler === "function") {
                    _coreErrorsErrors2["default"].extend(MssHandler.errors);
                    mssHandler = MssHandler(context).create({
                        eventBus: eventBus,
                        mediaPlayerModel: mediaPlayerModel,
                        dashMetrics: dashMetrics,
                        manifestModel: manifestModel,
                        playbackController: playbackController,
                        protectionController: protectionController,
                        baseURLController: (0, _controllersBaseURLController2["default"])(context).getInstance(),
                        errHandler: errHandler,
                        events: _coreEventsEvents2["default"],
                        constants: _constantsConstants2["default"],
                        debug: debug,
                        initSegmentType: _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,
                        BASE64: _externalsBase642["default"],
                        ISOBoxer: _codemIsoboxer2["default"]
                    });
                }
            }
            function getAsUTC(valToConvert) {
                var metric = dashMetrics.getCurrentDVRInfo();
                var availableFrom = undefined, utcValue = undefined;
                if (!metric) {
                    return 0;
                }
                availableFrom = metric.manifestInfo.availableFrom.getTime() / 1e3;
                utcValue = valToConvert + (availableFrom + metric.range.start);
                return utcValue;
            }
            function initializePlayback() {
                if (!streamingInitialized && source) {
                    streamingInitialized = true;
                    logger.info("Streaming Initialized");
                    createPlaybackControllers();
                    if (typeof source === "string") {
                        streamController.load(source);
                    } else {
                        streamController.loadWithManifest(source);
                    }
                }
                if (!playbackInitialized && isReady()) {
                    playbackInitialized = true;
                    logger.info("Playback Initialized");
                }
            }
            function getDashAdapter() {
                return adapter;
            }
            instance = {
                initialize: initialize,
                setConfig: setConfig,
                on: on,
                off: off,
                extend: extend,
                attachView: attachView,
                attachSource: attachSource,
                isReady: isReady,
                preload: preload,
                play: play,
                isPaused: isPaused,
                pause: pause,
                isSeeking: isSeeking,
                isDynamic: isDynamic,
                seek: seek,
                setPlaybackRate: setPlaybackRate,
                getPlaybackRate: getPlaybackRate,
                setMute: setMute,
                isMuted: isMuted,
                setVolume: setVolume,
                getVolume: getVolume,
                time: time,
                duration: duration,
                timeAsUTC: timeAsUTC,
                durationAsUTC: durationAsUTC,
                getActiveStream: getActiveStream,
                getDVRWindowSize: getDVRWindowSize,
                getDVRSeekOffset: getDVRSeekOffset,
                convertToTimeCode: convertToTimeCode,
                formatUTC: formatUTC,
                getVersion: getVersion,
                getDebug: getDebug,
                getBufferLength: getBufferLength,
                getTTMLRenderingDiv: getTTMLRenderingDiv,
                getVideoElement: getVideoElement,
                getSource: getSource,
                getCurrentLiveLatency: getCurrentLiveLatency,
                getTopBitrateInfoFor: getTopBitrateInfoFor,
                setAutoPlay: setAutoPlay,
                getAutoPlay: getAutoPlay,
                getDashMetrics: getDashMetrics,
                getQualityFor: getQualityFor,
                setQualityFor: setQualityFor,
                updatePortalSize: updatePortalSize,
                setTextDefaultLanguage: setTextDefaultLanguage,
                getTextDefaultLanguage: getTextDefaultLanguage,
                setTextDefaultEnabled: setTextDefaultEnabled,
                getTextDefaultEnabled: getTextDefaultEnabled,
                enableText: enableText,
                enableForcedTextStreaming: enableForcedTextStreaming,
                isTextEnabled: isTextEnabled,
                setTextTrack: setTextTrack,
                getBitrateInfoListFor: getBitrateInfoListFor,
                getStreamsFromManifest: getStreamsFromManifest,
                getTracksFor: getTracksFor,
                getTracksForTypeFromManifest: getTracksForTypeFromManifest,
                getCurrentTrackFor: getCurrentTrackFor,
                setInitialMediaSettingsFor: setQualityForSettingsFor,
                getInitialMediaSettingsFor: getInitialMediaSettingsFor,
                setCurrentTrack: setCurrentTrack,
                getTrackSwitchModeFor: getTrackSwitchModeFor,
                setTrackSwitchModeFor: setTrackSwitchModeFor,
                setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
                getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
                addABRCustomRule: addABRCustomRule,
                removeABRCustomRule: removeABRCustomRule,
                removeAllABRCustomRule: removeAllABRCustomRule,
                getAverageThroughput: getAverageThroughput,
                retrieveManifest: retrieveManifest,
                addUTCTimingSource: addUTCTimingSource,
                removeUTCTimingSource: removeUTCTimingSource,
                clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,
                restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,
                setXHRWithCredentialsForType: setXHRWithCredentialsForType,
                getXHRWithCredentialsForType: getXHRWithCredentialsForType,
                getProtectionController: getProtectionController,
                attachProtectionController: attachProtectionController,
                setProtectionData: setProtectionData,
                displayCaptionsOnTop: displayCaptionsOnTop,
                attachTTMLRenderingDiv: attachTTMLRenderingDiv,
                getCurrentTextTrackIndex: getCurrentTextTrackIndex,
                getThumbnail: getThumbnail,
                getDashAdapter: getDashAdapter,
                getSettings: getSettings,
                updateSettings: updateSettings,
                resetSettings: resetSettings,
                reset: reset
            };
            setup();
            return instance;
        }
        MediaPlayer.__dashjs_factory_name = "MediaPlayer";
        var factory = _coreFactoryMaker2["default"].getClassFactory(MediaPlayer);
        factory.events = _MediaPlayerEvents2["default"];
        factory.errors = _coreErrorsErrors2["default"];
        _coreFactoryMaker2["default"].updateClassFactory(MediaPlayer.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        1: 1,
        100: 100,
        107: 107,
        108: 108,
        110: 110,
        111: 111,
        116: 116,
        118: 118,
        120: 120,
        13: 13,
        148: 148,
        149: 149,
        151: 151,
        152: 152,
        197: 197,
        199: 199,
        2: 2,
        204: 204,
        206: 206,
        208: 208,
        213: 213,
        214: 214,
        221: 221,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        49: 49,
        51: 51,
        52: 52,
        55: 55,
        57: 57,
        59: 59,
        81: 81,
        97: 97
    } ],
    100: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _coreEventsEventsBase = _dereq_(56);
        var _coreEventsEventsBase2 = _interopRequireDefault(_coreEventsEventsBase);
        var MediaPlayerEvents = function(_EventsBase) {
            _inherits(MediaPlayerEvents, _EventsBase);
            function MediaPlayerEvents() {
                _classCallCheck(this, MediaPlayerEvents);
                _get(Object.getPrototypeOf(MediaPlayerEvents.prototype), "constructor", this).call(this);
                this.AST_IN_FUTURE = "astInFuture";
                this.BUFFER_EMPTY = "bufferStalled";
                this.BUFFER_LOADED = "bufferLoaded";
                this.BUFFER_LEVEL_STATE_CHANGED = "bufferStateChanged";
                this.ERROR = "error";
                this.FRAGMENT_LOADING_COMPLETED = "fragmentLoadingCompleted";
                this.FRAGMENT_LOADING_PROGRESS = "fragmentLoadingProgress";
                this.FRAGMENT_LOADING_STARTED = "fragmentLoadingStarted";
                this.FRAGMENT_LOADING_ABANDONED = "fragmentLoadingAbandoned";
                this.LOG = "log";
                this.MANIFEST_LOADED = "manifestLoaded";
                this.METRICS_CHANGED = "metricsChanged";
                this.METRIC_CHANGED = "metricChanged";
                this.METRIC_ADDED = "metricAdded";
                this.METRIC_UPDATED = "metricUpdated";
                this.PERIOD_SWITCH_COMPLETED = "periodSwitchCompleted";
                this.PERIOD_SWITCH_STARTED = "periodSwitchStarted";
                this.QUALITY_CHANGE_REQUESTED = "qualityChangeRequested";
                this.QUALITY_CHANGE_RENDERED = "qualityChangeRendered";
                this.TRACK_CHANGE_RENDERED = "trackChangeRendered";
                this.SOURCE_INITIALIZED = "sourceInitialized";
                this.STREAM_INITIALIZED = "streamInitialized";
                this.STREAM_TEARDOWN_COMPLETE = "streamTeardownComplete";
                this.TEXT_TRACKS_ADDED = "allTextTracksAdded";
                this.TEXT_TRACK_ADDED = "textTrackAdded";
                this.TTML_PARSED = "ttmlParsed";
                this.TTML_TO_PARSE = "ttmlToParse";
                this.CAPTION_RENDERED = "captionRendered";
                this.CAPTION_CONTAINER_RESIZE = "captionContainerResize";
                this.CAN_PLAY = "canPlay";
                this.PLAYBACK_ENDED = "playbackEnded";
                this.PLAYBACK_ERROR = "playbackError";
                this.PLAYBACK_NOT_ALLOWED = "playbackNotAllowed";
                this.PLAYBACK_METADATA_LOADED = "playbackMetaDataLoaded";
                this.PLAYBACK_PAUSED = "playbackPaused";
                this.PLAYBACK_PLAYING = "playbackPlaying";
                this.PLAYBACK_PROGRESS = "playbackProgress";
                this.PLAYBACK_RATE_CHANGED = "playbackRateChanged";
                this.PLAYBACK_SEEKED = "playbackSeeked";
                this.PLAYBACK_SEEKING = "playbackSeeking";
                this.PLAYBACK_SEEK_ASKED = "playbackSeekAsked";
                this.PLAYBACK_STALLED = "playbackStalled";
                this.PLAYBACK_STARTED = "playbackStarted";
                this.PLAYBACK_TIME_UPDATED = "playbackTimeUpdated";
                this.PLAYBACK_WAITING = "playbackWaiting";
                this.MANIFEST_VALIDITY_CHANGED = "manifestValidityChanged";
            }
            return MediaPlayerEvents;
        }(_coreEventsEventsBase2["default"]);
        var mediaPlayerEvents = new MediaPlayerEvents();
        exports["default"] = mediaPlayerEvents;
        module.exports = exports["default"];
    }, {
        56: 56
    } ],
    101: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _MediaPlayer = _dereq_(99);
        var _MediaPlayer2 = _interopRequireDefault(_MediaPlayer);
        function MediaPlayerFactory() {
            var SUPPORTED_MIME_TYPE = "application/dash+xml";
            var logger = undefined;
            function create(video, source, context) {
                if (!video || !/^VIDEO$/i.test(video.nodeName)) return null;
                if (video._dashjs_player) return video._dashjs_player;
                var player = undefined;
                var videoID = video.id || video.name || "video element";
                source = source || [].slice.call(video.querySelectorAll("source")).filter(function(s) {
                    return s.type == SUPPORTED_MIME_TYPE;
                })[0];
                if (!source && video.src) {
                    source = document.createElement("source");
                    source.src = video.src;
                } else if (!source && !video.src) {
                    return null;
                }
                context = context || {};
                player = (0, _MediaPlayer2["default"])(context).create();
                player.initialize(video, source.src, video.autoplay);
                if (!logger) {
                    logger = player.getDebug().getLogger();
                }
                logger.debug("Converted " + videoID + " to dash.js player and added content: " + source.src);
                video._dashjs_player = player;
                return player;
            }
            function createAll(selector, scope) {
                var aPlayers = [];
                selector = selector || "[data-dashjs-player]";
                scope = scope || document;
                var videos = scope.querySelectorAll(selector);
                for (var i = 0; i < videos.length; i++) {
                    var player = create(videos[i], null);
                    aPlayers.push(player);
                }
                var sources = scope.querySelectorAll('source[type="' + SUPPORTED_MIME_TYPE + '"]');
                for (var i = 0; i < sources.length; i++) {
                    var video = findVideo(sources[i]);
                    var player = create(video, null);
                    aPlayers.push(player);
                }
                return aPlayers;
            }
            function findVideo(_x) {
                var _again = true;
                _function: while (_again) {
                    var el = _x;
                    _again = false;
                    if (/^VIDEO$/i.test(el.nodeName)) {
                        return el;
                    } else {
                        _x = el.parentNode;
                        _again = true;
                        continue _function;
                    }
                }
            }
            return {
                create: create,
                createAll: createAll
            };
        }
        var instance = MediaPlayerFactory();
        var loadInterval = undefined;
        function loadHandler() {
            window.removeEventListener("load", loadHandler);
            instance.createAll();
        }
        function loadIntervalHandler() {
            if (window.dashjs) {
                window.clearInterval(loadInterval);
                instance.createAll();
            }
        }
        var avoidAutoCreate = typeof window !== "undefined" && window && window.dashjs && window.dashjs.skipAutoCreate;
        if (!avoidAutoCreate && typeof window !== "undefined" && window && window.addEventListener) {
            if (window.document.readyState === "complete") {
                if (window.dashjs) {
                    instance.createAll();
                } else {
                    loadInterval = window.setInterval(loadIntervalHandler, 500);
                }
            } else {
                window.addEventListener("load", loadHandler);
            }
        }
        exports["default"] = instance;
        module.exports = exports["default"];
    }, {
        99: 99
    } ],
    102: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function PreBufferSink(onAppendedCallback) {
            var context = this.context;
            var instance = undefined, logger = undefined, outstandingInit = undefined;
            var chunks = [];
            var onAppended = onAppendedCallback;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function reset() {
                chunks = [];
                outstandingInit = null;
                onAppended = null;
            }
            function append(chunk) {
                if (chunk.segmentType !== "InitializationSegment") {
                    chunks.push(chunk);
                    chunks.sort(function(a, b) {
                        return a.start - b.start;
                    });
                    outstandingInit = null;
                } else {
                    outstandingInit = chunk;
                }
                logger.debug("PreBufferSink appended chunk s: " + chunk.start + "; e: " + chunk.end);
                if (onAppended) {
                    onAppended({
                        chunk: chunk
                    });
                }
            }
            function remove(start, end) {
                chunks = chunks.filter(function(a) {
                    return !((isNaN(end) || a.start < end) && (isNaN(start) || a.end > start));
                });
            }
            function abort() {}
            function getAllBufferRanges() {
                var ranges = [];
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    if (ranges.length === 0 || chunk.start > ranges[ranges.length - 1].end) {
                        ranges.push({
                            start: chunk.start,
                            end: chunk.end
                        });
                    } else {
                        ranges[ranges.length - 1].end = chunk.end;
                    }
                }
                var timeranges = {
                    start: function start(n) {
                        return ranges[n].start;
                    },
                    end: function end(n) {
                        return ranges[n].end;
                    }
                };
                Object.defineProperty(timeranges, "length", {
                    get: function get() {
                        return ranges.length;
                    }
                });
                return timeranges;
            }
            function hasDiscontinuitiesAfter() {
                return false;
            }
            function updateTimestampOffset() {}
            function discharge(start, end) {
                var result = getChunksAt(start, end);
                if (outstandingInit) {
                    result.push(outstandingInit);
                    outstandingInit = null;
                }
                remove(start, end);
                return result;
            }
            function getChunksAt(start, end) {
                return chunks.filter(function(a) {
                    return (isNaN(end) || a.start < end) && (isNaN(start) || a.end > start);
                });
            }
            instance = {
                getAllBufferRanges: getAllBufferRanges,
                append: append,
                remove: remove,
                abort: abort,
                discharge: discharge,
                reset: reset,
                updateTimestampOffset: updateTimestampOffset,
                hasDiscontinuitiesAfter: hasDiscontinuitiesAfter
            };
            setup();
            return instance;
        }
        PreBufferSink.__dashjs_factory_name = "PreBufferSink";
        var factory = _coreFactoryMaker2["default"].getClassFactory(PreBufferSink);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        46: 46,
        48: 48
    } ],
    103: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _textTextController = _dereq_(197);
        var _textTextController2 = _interopRequireDefault(_textTextController);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var MAX_ALLOWED_DISCONTINUITY = .1;
        function SourceBufferSink(mediaSource, mediaInfo, onAppendedCallback, oldBuffer) {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, buffer = undefined, isAppendingInProgress = undefined, intervalId = undefined;
            var callbacks = [];
            var appendQueue = [];
            var onAppended = onAppendedCallback;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                isAppendingInProgress = false;
                var codec = mediaInfo.codec;
                try {
                    if (codec.match(/application\/mp4;\s*codecs="(stpp|wvtt).*"/i)) {
                        throw new Error("not really supported");
                    }
                    buffer = oldBuffer ? oldBuffer : mediaSource.addSourceBuffer(codec);
                    if (buffer.changeType && oldBuffer) {
                        logger.debug("Doing period transition with changeType");
                        buffer.changeType(codec);
                    }
                    var CHECK_INTERVAL = 50;
                    if (typeof buffer.addEventListener === "function") {
                        try {
                            buffer.addEventListener("updateend", updateEndHandler, false);
                            buffer.addEventListener("error", errHandler, false);
                            buffer.addEventListener("abort", errHandler, false);
                        } catch (err) {
                            intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);
                        }
                    } else {
                        intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);
                    }
                } catch (ex) {
                    if (mediaInfo.isText || codec.indexOf('codecs="stpp') !== -1 || codec.indexOf('codecs="wvtt') !== -1) {
                        var textController = (0, _textTextController2["default"])(context).getInstance();
                        buffer = textController.getTextSourceBuffer();
                    } else {
                        throw ex;
                    }
                }
            }
            function reset(keepBuffer) {
                if (buffer) {
                    if (typeof buffer.removeEventListener === "function") {
                        buffer.removeEventListener("updateend", updateEndHandler, false);
                        buffer.removeEventListener("error", errHandler, false);
                        buffer.removeEventListener("abort", errHandler, false);
                    }
                    clearInterval(intervalId);
                    if (!keepBuffer) {
                        try {
                            if (!buffer.getClassName || buffer.getClassName() !== "TextSourceBuffer") {
                                mediaSource.removeSourceBuffer(buffer);
                            }
                        } catch (e) {
                            logger.error("Failed to remove source buffer from media source.");
                        }
                        buffer = null;
                    }
                    isAppendingInProgress = false;
                }
                appendQueue = [];
                onAppended = null;
            }
            function getBuffer() {
                return buffer;
            }
            function getAllBufferRanges() {//err5
                try {
                    return buffer.buffered;
                } catch (e) {
                    logger.error("getAllBufferRanges exception: " + e.message); //getAllBufferRanges exception: An attempt was made to use an object that is not, or is no longer, usable
                    return null;
                }
            }
            function hasDiscontinuitiesAfter(time) {
                try {
                    var ranges = getAllBufferRanges();
                    if (ranges && ranges.length > 1) {
                        for (var i = 0, len = ranges.length; i < len; i++) {
                            if (i > 0) {
                                if (time < ranges.start(i) && ranges.start(i) > ranges.end(i - 1) + MAX_ALLOWED_DISCONTINUITY) {
                                    return true;
                                }
                            }
                        }
                    }
                } catch (e) {
                    logger.error("hasDiscontinuities exception: " + e.message);
                }
                return false;
            }
            function append(chunk) {
                if (!chunk) {
                    onAppended({
                        chunk: chunk,
                        error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].APPEND_ERROR_CODE, _coreErrorsErrors2["default"].APPEND_ERROR_MESSAGE)
                    });
                    return;
                }
                appendQueue.push(chunk);
                if (!isAppendingInProgress) {
                    waitForUpdateEnd(buffer, appendNextInQueue.bind(this));
                }
            }
            function updateTimestampOffset(MSETimeOffset) {
                if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {
                    waitForUpdateEnd(buffer, function() {
                        buffer.timestampOffset = MSETimeOffset;
                    });
                }
            }
            function remove(start, end, forceRemoval) {
                var sourceBufferSink = this;
                waitForUpdateEnd(buffer, function() {
                    try {
                        if (start >= 0 && end > start && (forceRemoval || mediaSource.readyState !== "ended")) {
                            buffer.remove(start, end);
                        }
                        waitForUpdateEnd(buffer, function() {
                            eventBus.trigger(_coreEventsEvents2["default"].SOURCEBUFFER_REMOVE_COMPLETED, {
                                buffer: sourceBufferSink,
                                from: start,
                                to: end,
                                unintended: false
                            });
                        });
                    } catch (err) {
                        eventBus.trigger(_coreEventsEvents2["default"].SOURCEBUFFER_REMOVE_COMPLETED, {
                            buffer: sourceBufferSink,
                            from: start,
                            to: end,
                            unintended: false,
                            error: new _voDashJSError2["default"](err.code, err.message)
                        });
                    }
                });
            }
            function appendNextInQueue() {
                var _this = this;
                var sourceBufferSink = this;
                if (appendQueue.length > 0) {
                    (function() {
                        isAppendingInProgress = true;
                        var nextChunk = appendQueue[0];
                        appendQueue.splice(0, 1);
                        var oldRanges = [];
                        var afterSuccess = function afterSuccess() {
                            var newRanges = getAllBufferRanges();
                            checkBufferGapsAfterAppend(sourceBufferSink, oldRanges, newRanges, nextChunk);
                            if (appendQueue.length > 0) {
                                appendNextInQueue.call(this);
                            } else {
                                isAppendingInProgress = false;
                                if (onAppended) {
                                    onAppended({
                                        chunk: nextChunk
                                    });
                                }
                            }
                        };
                        try {
                            if (nextChunk.bytes.length === 0) {
                                afterSuccess.call(_this);
                            } else {
                                oldRanges = getAllBufferRanges();
                                if (buffer.appendBuffer) {
                                    buffer.appendBuffer(nextChunk.bytes);
                                } else {
                                    buffer.append(nextChunk.bytes, nextChunk);
                                }
                                waitForUpdateEnd(buffer, afterSuccess.bind(_this));
                            }
                        } catch (err) {
                            logger.fatal('SourceBuffer append failed "' + err + '"');
                            if (appendQueue.length > 0) {
                                appendNextInQueue();
                            } else {
                                isAppendingInProgress = false;
                            }
                            if (onAppended) {
                                onAppended({
                                    chunk: nextChunk,
                                    error: new _voDashJSError2["default"](err.code, err.message)
                                });
                            }
                        }
                    })();
                }
            }
            function checkBufferGapsAfterAppend(buffer, oldRanges, newRanges, chunk) {
                if (oldRanges && oldRanges.length > 0 && oldRanges.length < newRanges.length && isChunkAlignedWithRange(oldRanges, chunk)) {
                    eventBus.trigger(_coreEventsEvents2["default"].SOURCEBUFFER_REMOVE_COMPLETED, {
                        buffer: buffer,
                        from: newRanges.end(newRanges.length - 2),
                        to: newRanges.start(newRanges.length - 1),
                        unintended: true
                    });
                }
            }
            function isChunkAlignedWithRange(oldRanges, chunk) {
                for (var i = 0; i < oldRanges.length; i++) {
                    var start = Math.round(oldRanges.start(i));
                    var end = Math.round(oldRanges.end(i));
                    if (end === chunk.start || start === chunk.end || chunk.start >= start && chunk.end <= end) {
                        return true;
                    }
                }
                return false;
            }
            function abort() {
                try {
                    if (mediaSource.readyState === "open") {
                        buffer.abort();
                    } else if (buffer.setTextTrack && mediaSource.readyState === "ended") {
                        buffer.abort();
                    }
                } catch (ex) {
                    logger.error('SourceBuffer append abort failed: "' + ex + '"');
                }
                appendQueue = [];
            }
            function executeCallback() {
                if (callbacks.length > 0) {
                    var cb = callbacks.shift();
                    if (buffer.updating) {
                        waitForUpdateEnd(buffer, cb);
                    } else {
                        cb();
                        executeCallback();
                    }
                }
            }
            function checkIsUpdateEnded() {
                if (buffer.updating) return;
                executeCallback();
            }
            function updateEndHandler() {
                if (buffer.updating) return;
                executeCallback();
            }
            function errHandler() {
                logger.error("SourceBufferSink error", mediaInfo.type);
            }
            function waitForUpdateEnd(buffer, callback) {
                callbacks.push(callback);
                if (!buffer.updating) {
                    executeCallback();
                }
            }
            instance = {
                getAllBufferRanges: getAllBufferRanges,
                getBuffer: getBuffer,
                append: append,
                remove: remove,
                abort: abort,
                reset: reset,
                updateTimestampOffset: updateTimestampOffset,
                hasDiscontinuitiesAfter: hasDiscontinuitiesAfter
            };
            setup();
            return instance;
        }
        SourceBufferSink.__dashjs_factory_name = "SourceBufferSink";
        var factory = _coreFactoryMaker2["default"].getClassFactory(SourceBufferSink);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        197: 197,
        221: 221,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    104: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _StreamProcessor = _dereq_(105);
        var _StreamProcessor2 = _interopRequireDefault(_StreamProcessor);
        var _controllersEventController = _dereq_(114);
        var _controllersEventController2 = _interopRequireDefault(_controllersEventController);
        var _controllersFragmentController = _dereq_(115);
        var _controllersFragmentController2 = _interopRequireDefault(_controllersFragmentController);
        var _thumbnailThumbnailController = _dereq_(200);
        var _thumbnailThumbnailController2 = _interopRequireDefault(_thumbnailThumbnailController);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        function Stream(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var manifestModel = config.manifestModel;
            var mediaPlayerModel = config.mediaPlayerModel;
            var manifestUpdater = config.manifestUpdater;
            var adapter = config.adapter;
            var capabilities = config.capabilities;
            var errHandler = config.errHandler;
            var timelineConverter = config.timelineConverter;
            var dashMetrics = config.dashMetrics;
            var abrController = config.abrController;
            var playbackController = config.playbackController;
            var mediaController = config.mediaController;
            var textController = config.textController;
            var videoModel = config.videoModel;
            var settings = config.settings;
            var instance = undefined, logger = undefined, streamProcessors = undefined, isStreamActivated = undefined, isMediaInitialized = undefined, streamInfo = undefined, updateError = undefined, isUpdating = undefined, protectionController = undefined, fragmentController = undefined, thumbnailController = undefined, eventController = undefined, preloaded = undefined, trackChangedEvent = undefined;
            var codecCompatibilityTable = [ {
                codec: "avc1",
                compatibleCodecs: [ "avc3" ]
            }, {
                codec: "avc3",
                compatibleCodecs: [ "avc1" ]
            } ];
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
                fragmentController = (0, _controllersFragmentController2["default"])(context).create({
                    mediaPlayerModel: mediaPlayerModel,
                    dashMetrics: dashMetrics,
                    errHandler: errHandler,
                    settings: settings
                });
                registerEvents();
            }
            function registerEvents() {
                eventBus.on(_coreEventsEvents2["default"].BUFFERING_COMPLETED, onBufferingCompleted, instance);
                eventBus.on(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
            }
            function unRegisterEvents() {
                eventBus.off(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
                eventBus.off(_coreEventsEvents2["default"].BUFFERING_COMPLETED, onBufferingCompleted, instance);
            }
            function registerProtectionEvents() {
                if (protectionController) {
                    eventBus.on(_coreEventsEvents2["default"].KEY_ERROR, onProtectionError, instance);
                    eventBus.on(_coreEventsEvents2["default"].SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);
                    eventBus.on(_coreEventsEvents2["default"].LICENSE_REQUEST_COMPLETE, onProtectionError, instance);
                    eventBus.on(_coreEventsEvents2["default"].KEY_SYSTEM_SELECTED, onProtectionError, instance);
                    eventBus.on(_coreEventsEvents2["default"].KEY_SESSION_CREATED, onProtectionError, instance);
                    eventBus.on(_coreEventsEvents2["default"].KEY_STATUSES_CHANGED, onProtectionError, instance);
                }
            }
            function unRegisterProtectionEvents() {
                if (protectionController) {
                    eventBus.off(_coreEventsEvents2["default"].KEY_ERROR, onProtectionError, instance);
                    eventBus.off(_coreEventsEvents2["default"].SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);
                    eventBus.off(_coreEventsEvents2["default"].LICENSE_REQUEST_COMPLETE, onProtectionError, instance);
                    eventBus.off(_coreEventsEvents2["default"].KEY_SYSTEM_SELECTED, onProtectionError, instance);
                    eventBus.off(_coreEventsEvents2["default"].KEY_SESSION_CREATED, onProtectionError, instance);
                    eventBus.off(_coreEventsEvents2["default"].KEY_STATUSES_CHANGED, onProtectionError, instance);
                }
            }
            function initialize(StreamInfo, ProtectionController) {
                streamInfo = StreamInfo;
                protectionController = ProtectionController;
                registerProtectionEvents();
            }
            function activate(mediaSource, previousBuffers) {
                if (!isStreamActivated) {
                    var result = undefined;
                    eventBus.on(_coreEventsEvents2["default"].CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
                    if (!getPreloaded()) {
                        result = initializeMedia(mediaSource, previousBuffers);
                    } else {
                        initializeAfterPreload();
                        result = previousBuffers;
                    }
                    isStreamActivated = true;
                    return result;
                }
                return previousBuffers;
            }
            function deactivate(keepBuffers) {
                var ln = streamProcessors ? streamProcessors.length : 0;
                var errored = false;
                for (var i = 0; i < ln; i++) {
                    var fragmentModel = streamProcessors[i].getFragmentModel();
                    fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());
                    streamProcessors[i].reset(errored, keepBuffers);
                }
                streamProcessors = [];
                isStreamActivated = false;
                isMediaInitialized = false;
                setPreloaded(false);
                eventBus.off(_coreEventsEvents2["default"].CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
            }
            function isActive() {
                return isStreamActivated;
            }
            function setMediaSource(mediaSource) {
                for (var i = 0; i < streamProcessors.length; ) {
                    if (isMediaSupported(streamProcessors[i].getMediaInfo())) {
                        streamProcessors[i].setMediaSource(mediaSource);
                        i++;
                    } else {
                        streamProcessors[i].reset();
                        streamProcessors.splice(i, 1);
                    }
                }
                for (var i = 0; i < streamProcessors.length; i++) {
                    streamProcessors[i].dischargePreBuffer();
                }
                if (streamProcessors.length === 0) {
                    var msg = "No streams to play.";
                    errHandler.manifestError(msg, "nostreams", manifestModel.getValue());
                    errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg + "nostreams", manifestModel.getValue()));
                    logger.fatal(msg);
                }
            }
            function resetInitialSettings() {
                deactivate();
                streamInfo = null;
                updateError = {};
                isUpdating = false;
            }
            function reset() {
                if (playbackController) {
                    playbackController.pause();
                }
                if (fragmentController) {
                    fragmentController.reset();
                    fragmentController = null;
                }
                resetInitialSettings();
                unRegisterEvents();
                unRegisterProtectionEvents();
                setPreloaded(false);
            }
            function getDuration() {
                return streamInfo ? streamInfo.duration : NaN;
            }
            function getStartTime() {
                return streamInfo ? streamInfo.start : NaN;
            }
            function getId() {
                return streamInfo ? streamInfo.id : null;
            }
            function getStreamInfo() {
                return streamInfo;
            }
            function getFragmentController() {
                return fragmentController;
            }
            function getThumbnailController() {
                return thumbnailController;
            }
            function checkConfig() {
                if (!abrController || !abrController.hasOwnProperty("getBitrateList") || !adapter || !adapter.hasOwnProperty("getAllMediaInfoForType") || !adapter.hasOwnProperty("getEventsFor")) {
                    throw new Error(_constantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function getBitrateListFor(type) {
                checkConfig();
                if (type === _constantsConstants2["default"].IMAGE) {
                    if (!thumbnailController) {
                        return [];
                    }
                    return thumbnailController.getBitrateList();
                }
                var mediaInfo = getMediaInfo(type);
                return abrController.getBitrateList(mediaInfo);
            }
            function startEventController() {
                if (eventController) {
                    eventController.start();
                }
            }
            function stopEventController() {
                if (eventController) {
                    eventController.stop();
                }
            }
            function onProtectionError(event) {
                if (event.error) {
                    errHandler.mediaKeySessionError(event.error.message);
                    errHandler.error(event.error);
                    logger.fatal(event.error.message);
                    reset();
                }
            }
            function isMediaSupported(mediaInfo) {
                var type = mediaInfo.type;
                var codec = undefined, msg = undefined;
                if (type === _constantsConstants2["default"].MUXED && mediaInfo) {
                    msg = "Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines";
                    logger.fatal(msg);
                    errHandler.manifestError(msg, "multiplexedrep", manifestModel.getValue());
                    errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_ERROR_ID_MULTIPLEXED_CODE, msg, manifestModel.getValue()));
                    return false;
                }
                if (type === _constantsConstants2["default"].TEXT || type === _constantsConstants2["default"].FRAGMENTED_TEXT || type === _constantsConstants2["default"].EMBEDDED_TEXT || type === _constantsConstants2["default"].IMAGE) {
                    return true;
                }
                codec = mediaInfo.codec;
                logger.debug(type + " codec: " + codec);
                if (!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) {
                    errHandler.capabilityError("encryptedmedia");
                    errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].CAPABILITY_MEDIAKEYS_ERROR_CODE, _coreErrorsErrors2["default"].CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));
                } else if (!capabilities.supportsCodec(codec)) {
                    msg = type + "Codec (" + codec + ") is not supported.";
                    logger.error(msg);
                    return false;
                }
                return true;
            }
            function onCurrentTrackChanged(e) {
                if (e.newMediaInfo.streamInfo.id !== streamInfo.id) return;
                var processor = getProcessorForMediaInfo(e.newMediaInfo);
                if (!processor) return;
                var currentTime = playbackController.getTime();
                logger.info("Stream -  Process track changed at current time " + currentTime);
                var mediaInfo = e.newMediaInfo;
                var manifest = manifestModel.getValue();
                adapter.setCurrentMediaInfo(streamInfo.id, mediaInfo.type, mediaInfo);
                logger.debug("Stream -  Update stream controller");
                if (manifest.refreshManifestOnSwitchTrack) {
                    logger.debug("Stream -  Refreshing manifest for switch track");
                    trackChangedEvent = e;
                    manifestUpdater.refreshManifest();
                } else {
                    processor.selectMediaInfo(mediaInfo);
                    if (mediaInfo.type !== _constantsConstants2["default"].FRAGMENTED_TEXT) {
                        abrController.updateTopQualityIndex(mediaInfo);
                        processor.switchTrackAsked();
                        processor.getFragmentModel().abortRequests();
                    } else {
                        processor.getScheduleController().setSeekTarget(NaN);
                        processor.setIndexHandlerTime(currentTime);
                        processor.resetIndexHandler();
                    }
                }
            }
            function createStreamProcessor(mediaInfo, allMediaForType, mediaSource, optionalSettings) {
                var streamProcessor = (0, _StreamProcessor2["default"])(context).create({
                    type: mediaInfo.type,
                    mimeType: mediaInfo.mimeType,
                    timelineConverter: timelineConverter,
                    adapter: adapter,
                    manifestModel: manifestModel,
                    mediaPlayerModel: mediaPlayerModel,
                    dashMetrics: config.dashMetrics,
                    baseURLController: config.baseURLController,
                    stream: instance,
                    abrController: abrController,
                    playbackController: playbackController,
                    mediaController: mediaController,
                    streamController: config.streamController,
                    textController: textController,
                    errHandler: errHandler,
                    settings: settings
                });
                streamProcessor.initialize(mediaSource);
                abrController.updateTopQualityIndex(mediaInfo);
                if (optionalSettings) {
                    streamProcessor.setBuffer(optionalSettings.buffer);
                    streamProcessor.setIndexHandlerTime(optionalSettings.currentTime);
                    streamProcessors[optionalSettings.replaceIdx] = streamProcessor;
                } else {
                    streamProcessors.push(streamProcessor);
                }
                if (optionalSettings && optionalSettings.ignoreMediaInfo) {
                    return;
                }
                if (mediaInfo.type === _constantsConstants2["default"].TEXT || mediaInfo.type === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    var idx = undefined;
                    for (var i = 0; i < allMediaForType.length; i++) {
                        if (allMediaForType[i].index === mediaInfo.index) {
                            idx = i;
                        }
                        streamProcessor.addMediaInfo(allMediaForType[i]);
                    }
                    streamProcessor.selectMediaInfo(allMediaForType[idx]);
                } else {
                    streamProcessor.addMediaInfo(mediaInfo, true);
                }
            }
            function initializeMediaForType(type, mediaSource) {
                var allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type);
                var mediaInfo = null;
                var initialMediaInfo = undefined;
                if (!allMediaForType || allMediaForType.length === 0) {
                    logger.info("No " + type + " data.");
                    return;
                }
                for (var i = 0, ln = allMediaForType.length; i < ln; i++) {
                    mediaInfo = allMediaForType[i];
                    if (type === _constantsConstants2["default"].EMBEDDED_TEXT) {
                        textController.addEmbeddedTrack(mediaInfo);
                    } else {
                        if (!isMediaSupported(mediaInfo)) continue;
                        mediaController.addTrack(mediaInfo);
                    }
                }
                if (type === _constantsConstants2["default"].EMBEDDED_TEXT || mediaController.getTracksFor(type, streamInfo).length === 0) {
                    return;
                }
                if (type === _constantsConstants2["default"].IMAGE) {
                    thumbnailController = (0, _thumbnailThumbnailController2["default"])(context).create({
                        adapter: adapter,
                        baseURLController: config.baseURLController,
                        stream: instance,
                        timelineConverter: config.timelineConverter
                    });
                    return;
                }
                if (type !== _constantsConstants2["default"].FRAGMENTED_TEXT || type === _constantsConstants2["default"].FRAGMENTED_TEXT && textController.getTextDefaultEnabled()) {
                    mediaController.checkInitialMediaSettingsForType(type, streamInfo);
                    initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo);
                }
                if (type === _constantsConstants2["default"].FRAGMENTED_TEXT && !textController.getTextDefaultEnabled()) {
                    initialMediaInfo = mediaController.getTracksFor(type, streamInfo)[0];
                }
                createStreamProcessor(initialMediaInfo, allMediaForType, mediaSource);
            }
            function initializeEventController() {
                if (!eventController) {
                    eventController = (0, _controllersEventController2["default"])(context).create();
                    eventController.setConfig({
                        manifestUpdater: manifestUpdater,
                        playbackController: playbackController
                    });
                    addInlineEvents();
                }
            }
            function addInlineEvents() {
                var events = adapter.getEventsFor(streamInfo);
                eventController.addInlineEvents(events);
            }
            function addInbandEvents(events) {
                if (eventController) {
                    eventController.addInbandEvents(events);
                }
            }
            function initializeMedia(mediaSource, previousBuffers) {
                checkConfig();
                var element = videoModel.getElement();
                initializeEventController();
                isUpdating = true;
                filterCodecs(_constantsConstants2["default"].VIDEO);
                filterCodecs(_constantsConstants2["default"].AUDIO);
                if (element === null || element && /^VIDEO$/i.test(element.nodeName)) {
                    initializeMediaForType(_constantsConstants2["default"].VIDEO, mediaSource);
                }
                initializeMediaForType(_constantsConstants2["default"].AUDIO, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].TEXT, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].FRAGMENTED_TEXT, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].EMBEDDED_TEXT, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].MUXED, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].IMAGE, mediaSource);
                var buffers = createBuffers(previousBuffers);
                isMediaInitialized = true;
                isUpdating = false;
                if (streamProcessors.length === 0) {
                    var msg = "No streams to play.";
                    errHandler.manifestError(msg, "nostreams", manifestModel.getValue());
                    errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));
                    logger.fatal(msg);
                } else {
                    checkIfInitializationCompleted();
                }
                return buffers;
            }
            function initializeAfterPreload() {
                isUpdating = true;
                checkConfig();
                filterCodecs(_constantsConstants2["default"].VIDEO);
                filterCodecs(_constantsConstants2["default"].AUDIO);
                isMediaInitialized = true;
                isUpdating = false;
                if (streamProcessors.length === 0) {
                    var msg = "No streams to play.";
                    errHandler.manifestError(msg, "nostreams", manifestModel.getValue());
                    logger.debug(msg);
                } else {
                    checkIfInitializationCompleted();
                }
            }
            function filterCodecs(type) {
                var realAdaptation = adapter.getAdaptationForType(streamInfo.index, type, streamInfo);
                if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return;
                realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter(function(_, i) {
                    if (i === 0) return true;
                    var codec = adapter.getCodec(realAdaptation, i, true);
                    if (!capabilities.supportsCodec(codec)) {
                        logger.error("[Stream] codec not supported: " + codec);
                        return false;
                    }
                    return true;
                });
            }
            function checkIfInitializationCompleted() {
                var ln = streamProcessors.length;
                var hasError = !!updateError.audio || !!updateError.video;
                var error = hasError ? new _voDashJSError2["default"](_coreErrorsErrors2["default"].DATA_UPDATE_FAILED_ERROR_CODE, _coreErrorsErrors2["default"].DATA_UPDATE_FAILED_ERROR_MESSAGE) : null;
                for (var i = 0; i < ln; i++) {
                    if (streamProcessors[i].isUpdating() || isUpdating) {
                        return;
                    }
                }
                if (!isMediaInitialized) {
                    return;
                }
                if (protectionController) {
                    for (var i = 0; i < ln && streamProcessors[i]; i++) {
                        if (streamProcessors[i].getType() === _constantsConstants2["default"].AUDIO || streamProcessors[i].getType() === _constantsConstants2["default"].VIDEO || streamProcessors[i].getType() === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                            protectionController.initializeForMedia(streamProcessors[i].getMediaInfo());
                        }
                    }
                }
                if (error) {
                    errHandler.error(error);
                } else {
                    eventBus.trigger(_coreEventsEvents2["default"].STREAM_INITIALIZED, {
                        streamInfo: streamInfo
                    });
                }
            }
            function getMediaInfo(type) {
                var ln = streamProcessors.length;
                var streamProcessor = null;
                for (var i = 0; i < ln; i++) {
                    streamProcessor = streamProcessors[i];
                    if (streamProcessor.getType() === type) {
                        return streamProcessor.getMediaInfo();
                    }
                }
                return null;
            }
            function createBuffers(previousBuffers) {
                var buffers = {};
                for (var i = 0, ln = streamProcessors.length; i < ln; i++) {
                    buffers[streamProcessors[i].getType()] = streamProcessors[i].createBuffer(previousBuffers).getBuffer();
                }
                return buffers;
            }
            function onBufferingCompleted(e) {
                if (e.streamInfo !== streamInfo) {
                    return;
                }
                var processors = getProcessors();
                var ln = processors.length;
                if (ln === 0) {
                    logger.warn("onBufferingCompleted - can't trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined");
                    return;
                }
                for (var i = 0; i < ln; i++) {
                    if (!processors[i].isBufferingCompleted() && (processors[i].getType() === _constantsConstants2["default"].AUDIO || processors[i].getType() === _constantsConstants2["default"].VIDEO)) {
                        logger.warn("onBufferingCompleted - One streamProcessor has finished but", processors[i].getType(), "one is not buffering completed");
                        return;
                    }
                }
                logger.debug("onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED");
                eventBus.trigger(_coreEventsEvents2["default"].STREAM_BUFFERING_COMPLETED, {
                    streamInfo: streamInfo
                });
            }
            function onDataUpdateCompleted(e) {
                var sp = e.sender.getStreamProcessor();
                if (sp.getStreamInfo() !== streamInfo) {
                    return;
                }
                updateError[sp.getType()] = e.error;
                checkIfInitializationCompleted();
            }
            function getProcessorForMediaInfo(mediaInfo) {
                if (!mediaInfo) {
                    return null;
                }
                var processors = getProcessors();
                return processors.filter(function(processor) {
                    return processor.getType() === mediaInfo.type;
                })[0];
            }
            function getProcessors() {
                var ln = streamProcessors.length;
                var arr = [];
                var type = undefined, streamProcessor = undefined;
                for (var i = 0; i < ln; i++) {
                    streamProcessor = streamProcessors[i];
                    type = streamProcessor.getType();
                    if (type === _constantsConstants2["default"].AUDIO || type === _constantsConstants2["default"].VIDEO || type === _constantsConstants2["default"].FRAGMENTED_TEXT || type === _constantsConstants2["default"].TEXT) {
                        arr.push(streamProcessor);
                    }
                }
                return arr;
            }
            function updateData(updatedStreamInfo) {
                logger.info("Manifest updated... updating data system wide.");
                isStreamActivated = false;
                isUpdating = true;
                streamInfo = updatedStreamInfo;
                if (eventController) {
                    addInlineEvents();
                }
                filterCodecs(_constantsConstants2["default"].VIDEO);
                filterCodecs(_constantsConstants2["default"].AUDIO);
                for (var i = 0, ln = streamProcessors.length; i < ln; i++) {
                    var streamProcessor = streamProcessors[i];
                    var mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());
                    abrController.updateTopQualityIndex(mediaInfo);
                    streamProcessor.addMediaInfo(mediaInfo, true);
                }
                if (trackChangedEvent) {
                    var mediaInfo = trackChangedEvent.newMediaInfo;
                    if (mediaInfo.type !== "fragmentedText") {
                        var processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);
                        if (!processor) return;
                        processor.switchTrackAsked();
                        trackChangedEvent = undefined;
                    }
                }
                isUpdating = false;
                checkIfInitializationCompleted();
            }
            function isMediaCodecCompatible(stream) {
                return compareCodecs(stream, _constantsConstants2["default"].VIDEO) && compareCodecs(stream, _constantsConstants2["default"].AUDIO);
            }
            function isProtectionCompatible(stream) {
                return compareProtectionConfig(stream, _constantsConstants2["default"].VIDEO) && compareProtectionConfig(stream, _constantsConstants2["default"].AUDIO);
            }
            function compareProtectionConfig(stream, type) {
                if (!stream) {
                    return false;
                }
                var newStreamInfo = stream.getStreamInfo();
                var currentStreamInfo = getStreamInfo();
                if (!newStreamInfo || !currentStreamInfo) {
                    return false;
                }
                var newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);
                var currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);
                if (!newAdaptation || !currentAdaptation) {
                    return !newAdaptation && !currentAdaptation;
                }
                if (newAdaptation.ContentProtection || currentAdaptation.ContentProtection) {
                    return false;
                }
                return true;
            }
            function compareCodecs(stream, type) {
                if (!stream) {
                    return false;
                }
                var newStreamInfo = stream.getStreamInfo();
                var currentStreamInfo = getStreamInfo();
                if (!newStreamInfo || !currentStreamInfo) {
                    return false;
                }
                var newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);
                var currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);
                if (!newAdaptation || !currentAdaptation) {
                    return !newAdaptation && !currentAdaptation;
                }
                var sameMimeType = newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;
                var oldCodecs = currentAdaptation.Representation_asArray.map(function(representation) {
                    return representation.codecs;
                });
                var newCodecs = newAdaptation.Representation_asArray.map(function(representation) {
                    return representation.codecs;
                });
                var codecMatch = newCodecs.some(function(newCodec) {
                    return oldCodecs.indexOf(newCodec) > -1;
                });
                var partialCodecMatch = newCodecs.some(function(newCodec) {
                    return oldCodecs.some(function(oldCodec) {
                        return codecRootCompatibleWithCodec(oldCodec, newCodec);
                    });
                });
                return codecMatch || partialCodecMatch && sameMimeType;
            }
            function codecRootCompatibleWithCodec(codec1, codec2) {
                var codecRoot = codec1.split(".")[0];
                var rootCompatible = codec2.indexOf(codecRoot) === 0;
                var compatTableCodec = undefined;
                for (var i = 0; i < codecCompatibilityTable.length; i++) {
                    if (codecCompatibilityTable[i].codec === codecRoot) {
                        compatTableCodec = codecCompatibilityTable[i];
                        break;
                    }
                }
                if (compatTableCodec) {
                    return rootCompatible || compatTableCodec.compatibleCodecs.some(function(compatibleCodec) {
                        return codec2.indexOf(compatibleCodec) === 0;
                    });
                }
                return rootCompatible;
            }
            function setPreloaded(value) {
                preloaded = value;
            }
            function getPreloaded() {
                return preloaded;
            }
            function preload(mediaSource, previousBuffers) {
                initializeEventController();
                initializeMediaForType(_constantsConstants2["default"].VIDEO, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].AUDIO, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].TEXT, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].FRAGMENTED_TEXT, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].EMBEDDED_TEXT, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].MUXED, mediaSource);
                initializeMediaForType(_constantsConstants2["default"].IMAGE, mediaSource);
                createBuffers(previousBuffers);
                eventBus.on(_coreEventsEvents2["default"].CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
                for (var i = 0; i < streamProcessors.length && streamProcessors[i]; i++) {
                    streamProcessors[i].getScheduleController().start();
                }
                setPreloaded(true);
            }
            instance = {
                initialize: initialize,
                activate: activate,
                deactivate: deactivate,
                isActive: isActive,
                getDuration: getDuration,
                getStartTime: getStartTime,
                getId: getId,
                getStreamInfo: getStreamInfo,
                preload: preload,
                getFragmentController: getFragmentController,
                getThumbnailController: getThumbnailController,
                getBitrateListFor: getBitrateListFor,
                startEventController: startEventController,
                stopEventController: stopEventController,
                updateData: updateData,
                reset: reset,
                getProcessors: getProcessors,
                setMediaSource: setMediaSource,
                isMediaCodecCompatible: isMediaCodecCompatible,
                isProtectionCompatible: isProtectionCompatible,
                getPreloaded: getPreloaded,
                addInbandEvents: addInbandEvents
            };
            setup();
            return instance;
        }
        Stream.__dashjs_factory_name = "Stream";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(Stream);
        module.exports = exports["default"];
    }, {
        105: 105,
        107: 107,
        114: 114,
        115: 115,
        200: 200,
        221: 221,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    105: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _utilsLiveEdgeFinder = _dereq_(211);
        var _utilsLiveEdgeFinder2 = _interopRequireDefault(_utilsLiveEdgeFinder);
        var _controllersBufferController = _dereq_(113);
        var _controllersBufferController2 = _interopRequireDefault(_controllersBufferController);
        var _textTextBufferController = _dereq_(196);
        var _textTextBufferController2 = _interopRequireDefault(_textTextBufferController);
        var _controllersScheduleController = _dereq_(119);
        var _controllersScheduleController2 = _interopRequireDefault(_controllersScheduleController);
        var _dashControllersRepresentationController = _dereq_(63);
        var _dashControllersRepresentationController2 = _interopRequireDefault(_dashControllersRepresentationController);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _utilsSupervisorTools = _dereq_(214);
        var _dashDashHandler = _dereq_(58);
        var _dashDashHandler2 = _interopRequireDefault(_dashDashHandler);
        function StreamProcessor(config) {
            config = config || {};
            var context = this.context;
            var type = config.type;
            var errHandler = config.errHandler;
            var mimeType = config.mimeType;
            var timelineConverter = config.timelineConverter;
            var adapter = config.adapter;
            var manifestModel = config.manifestModel;
            var mediaPlayerModel = config.mediaPlayerModel;
            var stream = config.stream;
            var abrController = config.abrController;
            var playbackController = config.playbackController;
            var streamController = config.streamController;
            var mediaController = config.mediaController;
            var textController = config.textController;
            var dashMetrics = config.dashMetrics;
            var settings = config.settings;
            var instance = undefined, mediaInfo = undefined, mediaInfoArr = undefined, bufferController = undefined, scheduleController = undefined, liveEdgeFinder = undefined, representationController = undefined, fragmentModel = undefined, spExternalControllers = undefined, indexHandler = undefined;
            function setup() {
                if (playbackController && playbackController.getIsDynamic()) {
                    liveEdgeFinder = (0, _utilsLiveEdgeFinder2["default"])(context).create({
                        timelineConverter: timelineConverter,
                        streamProcessor: instance
                    });
                }
                resetInitialSettings();
            }
            function initialize(mediaSource) {
                indexHandler = (0, _dashDashHandler2["default"])(context).create({
                    mimeType: mimeType,
                    timelineConverter: timelineConverter,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    baseURLController: config.baseURLController,
                    errHandler: errHandler,
                    settings: settings
                });
                indexHandler.initialize(instance);
                abrController.registerStreamType(type, instance);
                fragmentModel = stream.getFragmentController().getModel(type);
                fragmentModel.setStreamProcessor(instance);
                bufferController = createBufferControllerForType(type);
                scheduleController = (0, _controllersScheduleController2["default"])(context).create({
                    type: type,
                    mimeType: mimeType,
                    adapter: adapter,
                    dashMetrics: dashMetrics,
                    timelineConverter: timelineConverter,
                    mediaPlayerModel: mediaPlayerModel,
                    abrController: abrController,
                    playbackController: playbackController,
                    streamController: streamController,
                    textController: textController,
                    streamProcessor: instance,
                    mediaController: mediaController,
                    settings: settings
                });
                representationController = (0, _dashControllersRepresentationController2["default"])(context).create();
                representationController.setConfig({
                    abrController: abrController,
                    dashMetrics: dashMetrics,
                    manifestModel: manifestModel,
                    playbackController: playbackController,
                    timelineConverter: timelineConverter,
                    streamProcessor: instance
                });
                bufferController.initialize(mediaSource);
                scheduleController.initialize();
                representationController.initialize();
            }
            function registerExternalController(controller) {
                spExternalControllers.push(controller);
            }
            function unregisterExternalController(controller) {
                var index = spExternalControllers.indexOf(controller);
                if (index !== -1) {
                    spExternalControllers.splice(index, 1);
                }
            }
            function getExternalControllers() {
                return spExternalControllers;
            }
            function unregisterAllExternalController() {
                spExternalControllers = [];
            }
            function resetInitialSettings() {
                mediaInfoArr = [];
                mediaInfo = null;
                unregisterAllExternalController();
            }
            function reset(errored, keepBuffers) {
                indexHandler.reset();
                if (bufferController) {
                    bufferController.reset(errored, keepBuffers);
                    bufferController = null;
                }
                if (scheduleController) {
                    scheduleController.reset();
                    scheduleController = null;
                }
                if (representationController) {
                    representationController.reset();
                    representationController = null;
                }
                if (abrController) {
                    abrController.unRegisterStreamType(type);
                }
                spExternalControllers.forEach(function(controller) {
                    controller.reset();
                });
                resetInitialSettings();
                type = null;
                stream = null;
                if (liveEdgeFinder) {
                    liveEdgeFinder.reset();
                    liveEdgeFinder = null;
                }
            }
            function isUpdating() {
                return representationController ? representationController.isUpdating() : false;
            }
            function getType() {
                return type;
            }
            function getRepresentationController() {
                return representationController;
            }
            function getIndexHandler() {
                return indexHandler;
            }
            function getFragmentController() {
                return stream ? stream.getFragmentController() : null;
            }
            function getBuffer() {
                return bufferController.getBuffer();
            }
            function setBuffer(buffer) {
                bufferController.setBuffer(buffer);
            }
            function getBufferController() {
                return bufferController;
            }
            function getFragmentModel() {
                return fragmentModel;
            }
            function getLiveEdgeFinder() {
                return liveEdgeFinder;
            }
            function getStreamInfo() {
                return stream ? stream.getStreamInfo() : null;
            }
            function addInbandEvents(events) {
                if (stream) {
                    stream.addInbandEvents(events);
                }
            }
            function selectMediaInfo(newMediaInfo) {
                if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || newMediaInfo.type === mediaInfo.type)) {
                    mediaInfo = newMediaInfo;
                }
                var realAdaptation = adapter.getRealAdaptation(getStreamInfo(), mediaInfo);
                var voRepresentations = adapter.getVoRepresentations(mediaInfo);
                if (representationController) {
                    representationController.updateData(realAdaptation, voRepresentations, type);
                }
            }
            function addMediaInfo(newMediaInfo, selectNewMediaInfo) {
                if (mediaInfoArr.indexOf(newMediaInfo) === -1) {
                    mediaInfoArr.push(newMediaInfo);
                }
                if (selectNewMediaInfo) {
                    this.selectMediaInfo(newMediaInfo);
                }
            }
            function getMediaInfoArr() {
                return mediaInfoArr;
            }
            function getMediaInfo() {
                return mediaInfo;
            }
            function getMediaSource() {
                return bufferController.getMediaSource();
            }
            function setMediaSource(mediaSource) {
                bufferController.setMediaSource(mediaSource, getMediaInfo());
            }
            function dischargePreBuffer() {
                bufferController.dischargePreBuffer();
            }
            function getScheduleController() {
                return scheduleController;
            }
            function getRepresentationInfo(quality) {
                var voRepresentation = undefined;
                if (quality !== undefined) {
                    (0, _utilsSupervisorTools.checkInteger)(quality);
                    voRepresentation = representationController ? representationController.getRepresentationForQuality(quality) : null;
                } else {
                    voRepresentation = representationController ? representationController.getCurrentRepresentation() : null;
                }
                return voRepresentation ? adapter.convertDataToRepresentationInfo(voRepresentation) : null;
            }
            function isBufferingCompleted() {
                if (bufferController) {
                    return bufferController.getIsBufferingCompleted();
                }
                return false;
            }
            function getBufferLevel() {
                return bufferController.getBufferLevel();
            }
            function switchInitData(representationId, bufferResetEnabled) {
                if (bufferController) {
                    bufferController.switchInitData(getStreamInfo().id, representationId, bufferResetEnabled);
                }
            }
            function createBuffer(previousBuffers) {
                return bufferController.getBuffer() || bufferController.createBuffer(mediaInfo, previousBuffers);
            }
            function switchTrackAsked() {
                scheduleController.switchTrackAsked();
            }
            function createBufferControllerForType(type) {
                var controller = null;
                if (type === _constantsConstants2["default"].VIDEO || type === _constantsConstants2["default"].AUDIO) {
                    controller = (0, _controllersBufferController2["default"])(context).create({
                        type: type,
                        dashMetrics: dashMetrics,
                        mediaPlayerModel: mediaPlayerModel,
                        manifestModel: manifestModel,
                        errHandler: errHandler,
                        streamController: streamController,
                        mediaController: mediaController,
                        adapter: adapter,
                        textController: textController,
                        abrController: abrController,
                        playbackController: playbackController,
                        streamProcessor: instance,
                        settings: settings
                    });
                } else {
                    controller = (0, _textTextBufferController2["default"])(context).create({
                        type: type,
                        mimeType: mimeType,
                        dashMetrics: dashMetrics,
                        mediaPlayerModel: mediaPlayerModel,
                        manifestModel: manifestModel,
                        errHandler: errHandler,
                        streamController: streamController,
                        mediaController: mediaController,
                        adapter: adapter,
                        textController: textController,
                        abrController: abrController,
                        playbackController: playbackController,
                        streamProcessor: instance,
                        settings: settings
                    });
                }
                return controller;
            }
            function setIndexHandlerTime(value) {
                if (indexHandler) {
                    indexHandler.setCurrentTime(value);
                }
            }
            function getIndexHandlerTime() {
                return indexHandler ? indexHandler.getCurrentTime() : NaN;
            }
            function resetIndexHandler() {
                if (indexHandler) {
                    indexHandler.resetIndex();
                }
            }
            function getInitRequest(quality) {
                (0, _utilsSupervisorTools.checkInteger)(quality);
                var representation = representationController ? representationController.getRepresentationForQuality(quality) : null;
                return indexHandler ? indexHandler.getInitRequest(representation) : null;
            }
            function getFragmentRequest(representationInfo, time, options) {
                var fragRequest = null;
                var representation = representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;
                if (indexHandler) {
                    if (time !== undefined && options !== undefined) {
                        fragRequest = indexHandler.getSegmentRequestForTime(representation, time, options);
                    } else {
                        fragRequest = indexHandler.getNextSegmentRequest(representation);
                    }
                }
                return fragRequest;
            }
            instance = {
                initialize: initialize,
                isUpdating: isUpdating,
                getType: getType,
                getBufferController: getBufferController,
                getFragmentModel: getFragmentModel,
                getScheduleController: getScheduleController,
                getLiveEdgeFinder: getLiveEdgeFinder,
                getFragmentController: getFragmentController,
                getRepresentationController: getRepresentationController,
                getIndexHandler: getIndexHandler,
                getRepresentationInfo: getRepresentationInfo,
                getBufferLevel: getBufferLevel,
                switchInitData: switchInitData,
                isBufferingCompleted: isBufferingCompleted,
                createBuffer: createBuffer,
                getStreamInfo: getStreamInfo,
                selectMediaInfo: selectMediaInfo,
                addMediaInfo: addMediaInfo,
                switchTrackAsked: switchTrackAsked,
                getMediaInfoArr: getMediaInfoArr,
                getMediaInfo: getMediaInfo,
                getMediaSource: getMediaSource,
                setMediaSource: setMediaSource,
                dischargePreBuffer: dischargePreBuffer,
                getBuffer: getBuffer,
                setBuffer: setBuffer,
                registerExternalController: registerExternalController,
                unregisterExternalController: unregisterExternalController,
                getExternalControllers: getExternalControllers,
                unregisterAllExternalController: unregisterAllExternalController,
                addInbandEvents: addInbandEvents,
                setIndexHandlerTime: setIndexHandlerTime,
                getIndexHandlerTime: getIndexHandlerTime,
                resetIndexHandler: resetIndexHandler,
                getInitRequest: getInitRequest,
                getFragmentRequest: getFragmentRequest,
                reset: reset
            };
            setup();
            return instance;
        }
        StreamProcessor.__dashjs_factory_name = "StreamProcessor";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(StreamProcessor);
        module.exports = exports["default"];
    }, {
        107: 107,
        113: 113,
        119: 119,
        196: 196,
        211: 211,
        214: 214,
        48: 48,
        58: 58,
        63: 63
    } ],
    106: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _netHTTPLoader = _dereq_(154);
        var _netHTTPLoader2 = _interopRequireDefault(_netHTTPLoader);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _voTextRequest = _dereq_(228);
        var _voTextRequest2 = _interopRequireDefault(_voTextRequest);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        function XlinkLoader(config) {
            config = config || {};
            var RESOLVE_TO_ZERO = "urn:mpeg:dash:resolve-to-zero:2013";
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var httpLoader = (0, _netHTTPLoader2["default"])(context).create({
                errHandler: config.errHandler,
                dashMetrics: config.dashMetrics,
                mediaPlayerModel: config.mediaPlayerModel,
                requestModifier: config.requestModifier
            });
            var instance = undefined;
            function load(url, element, resolveObject) {
                var report = function report(content, resolveToZero) {
                    element.resolved = true;
                    element.resolvedContent = content ? content : null;
                    eventBus.trigger(_coreEventsEvents2["default"].XLINK_ELEMENT_LOADED, {
                        element: element,
                        resolveObject: resolveObject,
                        error: content || resolveToZero ? null : new _voDashJSError2["default"](_coreErrorsErrors2["default"].XLINK_LOADER_LOADING_FAILURE_ERROR_CODE, _coreErrorsErrors2["default"].XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE + url)
                    });
                };
                if (url === RESOLVE_TO_ZERO) {
                    report(null, true);
                } else {
                    var request = new _voTextRequest2["default"](url, _voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE);
                    httpLoader.load({
                        request: request,
                        success: function success(data) {
                            report(data);
                        },
                        error: function error() {
                            report(null);
                        }
                    });
                }
            }
            function reset() {
                if (httpLoader) {
                    httpLoader.abort();
                    httpLoader = null;
                }
            }
            instance = {
                load: load,
                reset: reset
            };
            return instance;
        }
        XlinkLoader.__dashjs_factory_name = "XlinkLoader";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(XlinkLoader);
        module.exports = exports["default"];
    }, {
        154: 154,
        221: 221,
        228: 228,
        237: 237,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    107: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Constants = function() {
            _createClass(Constants, [ {
                key: "init",
                value: function init() {
                    this.STREAM = "stream";
                    this.VIDEO = "video";
                    this.AUDIO = "audio";
                    this.TEXT = "text";
                    this.FRAGMENTED_TEXT = "fragmentedText";
                    this.EMBEDDED_TEXT = "embeddedText";
                    this.MUXED = "muxed";
                    this.IMAGE = "image";
                    this.LOCATION = "Location";
                    this.INITIALIZE = "initialize";
                    this.TEXT_SHOWING = "showing";
                    this.TEXT_HIDDEN = "hidden";
                    this.CC1 = "CC1";
                    this.CC3 = "CC3";
                    this.STPP = "stpp";
                    this.TTML = "ttml";
                    this.VTT = "vtt";
                    this.WVTT = "wvtt";
                    this.UTF8 = "utf-8";
                    this.SCHEME_ID_URI = "schemeIdUri";
                    this.START_TIME = "starttime";
                    this.ABR_STRATEGY_DYNAMIC = "abrDynamic";
                    this.ABR_STRATEGY_BOLA = "abrBola";
                    this.ABR_STRATEGY_THROUGHPUT = "abrThroughput";
                    this.MOVING_AVERAGE_SLIDING_WINDOW = "slidingWindow";
                    this.MOVING_AVERAGE_EWMA = "ewma";
                    this.BAD_ARGUMENT_ERROR = "Invalid Arguments";
                    this.MISSING_CONFIG_ERROR = "Missing config parameter(s)";
                }
            } ]);
            function Constants() {
                _classCallCheck(this, Constants);
                this.init();
            }
            return Constants;
        }();
        var constants = new Constants();
        exports["default"] = constants;
        module.exports = exports["default"];
    }, {} ],
    108: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var MetricsConstants = function() {
            _createClass(MetricsConstants, [ {
                key: "init",
                value: function init() {
                    this.TCP_CONNECTION = "TcpList";
                    this.HTTP_REQUEST = "HttpList";
                    this.TRACK_SWITCH = "RepSwitchList";
                    this.BUFFER_LEVEL = "BufferLevel";
                    this.BUFFER_STATE = "BufferState";
                    this.DVR_INFO = "DVRInfo";
                    this.DROPPED_FRAMES = "DroppedFrames";
                    this.SCHEDULING_INFO = "SchedulingInfo";
                    this.REQUESTS_QUEUE = "RequestsQueue";
                    this.MANIFEST_UPDATE = "ManifestUpdate";
                    this.MANIFEST_UPDATE_STREAM_INFO = "ManifestUpdatePeriodInfo";
                    this.MANIFEST_UPDATE_TRACK_INFO = "ManifestUpdateRepresentationInfo";
                    this.PLAY_LIST = "PlayList";
                    this.DVB_ERRORS = "DVBErrors";
                }
            } ]);
            function MetricsConstants() {
                _classCallCheck(this, MetricsConstants);
                this.init();
            }
            return MetricsConstants;
        }();
        var constants = new MetricsConstants();
        exports["default"] = constants;
        module.exports = exports["default"];
    }, {} ],
    109: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var ProtectionConstants = function() {
            _createClass(ProtectionConstants, [ {
                key: "init",
                value: function init() {
                    this.CLEARKEY_KEYSTEM_STRING = "org.w3.clearkey";
                    this.WIDEVINE_KEYSTEM_STRING = "com.widevine.alpha";
                    this.PLAYREADY_KEYSTEM_STRING = "com.microsoft.playready";
                }
            } ]);
            function ProtectionConstants() {
                _classCallCheck(this, ProtectionConstants);
                this.init();
            }
            return ProtectionConstants;
        }();
        var constants = new ProtectionConstants();
        exports["default"] = constants;
        module.exports = exports["default"];
    }, {} ],
    110: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _rulesAbrABRRulesCollection = _dereq_(185);
        var _rulesAbrABRRulesCollection2 = _interopRequireDefault(_rulesAbrABRRulesCollection);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        var _voBitrateInfo = _dereq_(220);
        var _voBitrateInfo2 = _interopRequireDefault(_voBitrateInfo);
        var _modelsFragmentModel = _dereq_(147);
        var _modelsFragmentModel2 = _interopRequireDefault(_modelsFragmentModel);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _rulesRulesContext = _dereq_(181);
        var _rulesRulesContext2 = _interopRequireDefault(_rulesRulesContext);
        var _rulesSwitchRequest = _dereq_(182);
        var _rulesSwitchRequest2 = _interopRequireDefault(_rulesSwitchRequest);
        var _rulesSwitchRequestHistory = _dereq_(183);
        var _rulesSwitchRequestHistory2 = _interopRequireDefault(_rulesSwitchRequestHistory);
        var _rulesDroppedFramesHistory = _dereq_(180);
        var _rulesDroppedFramesHistory2 = _interopRequireDefault(_rulesDroppedFramesHistory);
        var _rulesThroughputHistory = _dereq_(184);
        var _rulesThroughputHistory2 = _interopRequireDefault(_rulesThroughputHistory);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _utilsSupervisorTools = _dereq_(214);
        var ABANDON_LOAD = "abandonload";
        var ALLOW_LOAD = "allowload";
        var DEFAULT_VIDEO_BITRATE = 1e3;
        var DEFAULT_AUDIO_BITRATE = 100;
        var QUALITY_DEFAULT = 0;
        function AbrController() {
            var context = this.context;
            var debug = (0, _coreDebug2["default"])(context).getInstance();
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, abrRulesCollection = undefined, streamController = undefined, topQualities = undefined, qualityDict = undefined, streamProcessorDict = undefined, abandonmentStateDict = undefined, abandonmentTimeout = undefined, windowResizeEventCalled = undefined, elementWidth = undefined, elementHeight = undefined, adapter = undefined, videoModel = undefined, mediaPlayerModel = undefined, domStorage = undefined, playbackIndex = undefined, switchHistoryDict = undefined, droppedFramesHistory = undefined, throughputHistory = undefined, isUsingBufferOccupancyABRDict = undefined, dashMetrics = undefined, settings = undefined;
            function setup() {
                logger = debug.getLogger(instance);
                resetInitialSettings();
            }
            function registerStreamType(type, streamProcessor) {
                switchHistoryDict[type] = switchHistoryDict[type] || (0, _rulesSwitchRequestHistory2["default"])(context).create();
                streamProcessorDict[type] = streamProcessor;
                abandonmentStateDict[type] = abandonmentStateDict[type] || {};
                abandonmentStateDict[type].state = ALLOW_LOAD;
                isUsingBufferOccupancyABRDict[type] = false;
                eventBus.on(_coreEventsEvents2["default"].LOADING_PROGRESS, onFragmentLoadProgress, this);
                if (type == _constantsConstants2["default"].VIDEO) {
                    eventBus.on(_coreEventsEvents2["default"].QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this);
                    droppedFramesHistory = droppedFramesHistory || (0, _rulesDroppedFramesHistory2["default"])(context).create();
                    setElementSize();
                }
                eventBus.on(_coreEventsEvents2["default"].METRIC_ADDED, onMetricAdded, this);
                eventBus.on(_coreEventsEvents2["default"].PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, this);
                throughputHistory = throughputHistory || (0, _rulesThroughputHistory2["default"])(context).create({
                    settings: settings
                });
            }
            function unRegisterStreamType(type) {
                delete streamProcessorDict[type];
            }
            function createAbrRulesCollection() {
                abrRulesCollection = (0, _rulesAbrABRRulesCollection2["default"])(context).create({
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    settings: settings
                });
                abrRulesCollection.initialize();
            }
            function resetInitialSettings() {
                topQualities = {};
                qualityDict = {};
                abandonmentStateDict = {};
                streamProcessorDict = {};
                switchHistoryDict = {};
                isUsingBufferOccupancyABRDict = {};
                if (windowResizeEventCalled === undefined) {
                    windowResizeEventCalled = false;
                }
                playbackIndex = undefined;
                droppedFramesHistory = undefined;
                throughputHistory = undefined;
                clearTimeout(abandonmentTimeout);
                abandonmentTimeout = null;
            }
            function reset() {
                resetInitialSettings();
                eventBus.off(_coreEventsEvents2["default"].LOADING_PROGRESS, onFragmentLoadProgress, this);
                eventBus.off(_coreEventsEvents2["default"].QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this);
                eventBus.off(_coreEventsEvents2["default"].METRIC_ADDED, onMetricAdded, this);
                eventBus.off(_coreEventsEvents2["default"].PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, this);
                if (abrRulesCollection) {
                    abrRulesCollection.reset();
                }
            }
            function setConfig(config) {
                if (!config) return;
                if (config.streamController) {
                    streamController = config.streamController;
                }
                if (config.domStorage) {
                    domStorage = config.domStorage;
                }
                if (config.mediaPlayerModel) {
                    mediaPlayerModel = config.mediaPlayerModel;
                }
                if (config.dashMetrics) {
                    dashMetrics = config.dashMetrics;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
                if (config.videoModel) {
                    videoModel = config.videoModel;
                }
                if (config.settings) {
                    settings = config.settings;
                }
            }
            function checkConfig() {
                if (!domStorage || !domStorage.hasOwnProperty("getSavedBitrateSettings")) {
                    throw new Error(_constantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function onQualityChangeRendered(e) {
                if (e.mediaType === _constantsConstants2["default"].VIDEO) {
                    playbackIndex = e.oldQuality;
                    droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality());
                }
            }
            function onMetricAdded(e) {
                if (e.metric === _constantsMetricsConstants2["default"].HTTP_REQUEST && e.value && e.value.type === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && (e.mediaType === _constantsConstants2["default"].AUDIO || e.mediaType === _constantsConstants2["default"].VIDEO)) {
                    throughputHistory.push(e.mediaType, e.value, settings.get().streaming.abr.useDeadTimeLatency);
                }
                if (e.metric === _constantsMetricsConstants2["default"].BUFFER_LEVEL && (e.mediaType === _constantsConstants2["default"].AUDIO || e.mediaType === _constantsConstants2["default"].VIDEO)) {
                    updateIsUsingBufferOccupancyABR(e.mediaType, .001 * e.value.level);
                }
            }
            function getTopQualityIndexFor(type, id) {
                var idx = undefined;
                topQualities[id] = topQualities[id] || {};
                if (!topQualities[id].hasOwnProperty(type)) {
                    topQualities[id][type] = 0;
                }
                idx = checkMaxBitrate(topQualities[id][type], type);
                idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]);
                idx = checkPortalSize(idx, type);
                return idx;
            }
            function getTopBitrateInfoFor(type) {
                if (type && streamProcessorDict && streamProcessorDict[type]) {
                    var streamInfo = streamProcessorDict[type].getStreamInfo();
                    if (streamInfo && streamInfo.id) {
                        var idx = getTopQualityIndexFor(type, streamInfo.id);
                        var bitrates = getBitrateList(streamProcessorDict[type].getMediaInfo());
                        return bitrates[idx] ? bitrates[idx] : null;
                    }
                }
                return null;
            }
            function getInitialBitrateFor(type) {
                checkConfig();
                if (type === _constantsConstants2["default"].TEXT || type === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    return NaN;
                }
                var savedBitrate = domStorage.getSavedBitrateSettings(type);
                var configBitrate = settings.get().streaming.abr.initialBitrate[type];
                var configRatio = settings.get().streaming.abr.initialRepresentationRatio[type];
                if (configBitrate === -1) {
                    if (configRatio > -1) {
                        var representation = adapter.getAdaptationForType(0, type).Representation;
                        if (Array.isArray(representation)) {
                            var repIdx = Math.max(Math.round(representation.length * configRatio) - 1, 0);
                            configBitrate = representation[repIdx].bandwidth;
                        } else {
                            configBitrate = 0;
                        }
                    } else if (!isNaN(savedBitrate)) {
                        configBitrate = savedBitrate;
                    } else {
                        configBitrate = type === _constantsConstants2["default"].VIDEO ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE;
                    }
                }
                return configBitrate;
            }
            function getMaxAllowedBitrateFor(type) {
                return settings.get().streaming.abr.maxBitrate[type];
            }
            function getMinAllowedBitrateFor(type) {
                return settings.get().streaming.abr.minBitrate[type];
            }
            function getMaxAllowedIndexFor(type) {
                var maxBitrate = getMaxAllowedBitrateFor(type);
                if (maxBitrate > -1) {
                    return getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);
                } else {
                    return undefined;
                }
            }
            function getMinAllowedIndexFor(type) {
                var minBitrate = getMinAllowedBitrateFor(type);
                if (minBitrate > -1) {
                    var mediaInfo = streamProcessorDict[type].getMediaInfo();
                    var bitrateList = getBitrateList(mediaInfo);
                    var minIdx = getQualityForBitrate(mediaInfo, minBitrate);
                    if (bitrateList[minIdx] && minIdx < bitrateList.length - 1 && bitrateList[minIdx].bitrate < minBitrate * 1e3) {
                        minIdx++;
                    }
                    return minIdx;
                } else {
                    return undefined;
                }
            }
            function getMaxAllowedRepresentationRatioFor(type) {
                return settings.get().streaming.abr.maxRepresentationRatio[type];
            }
            function getAutoSwitchBitrateFor(type) {
                return !!settings.get().streaming.abr.autoSwitchBitrate[type];
            }
            function checkPlaybackQuality(type) {
                if (type && streamProcessorDict && streamProcessorDict[type]) {
                    var streamInfo = streamProcessorDict[type].getStreamInfo();
                    var streamId = streamInfo ? streamInfo.id : null;
                    var oldQuality = getQualityFor(type);
                    var rulesContext = (0, _rulesRulesContext2["default"])(context).create({
                        abrController: instance,
                        streamProcessor: streamProcessorDict[type],
                        currentValue: oldQuality,
                        switchHistory: switchHistoryDict[type],
                        droppedFramesHistory: droppedFramesHistory,
                        useBufferOccupancyABR: useBufferOccupancyABR(type)
                    });
                    if (droppedFramesHistory) {
                        var playbackQuality = videoModel.getPlaybackQuality();
                        if (playbackQuality) {
                            droppedFramesHistory.push(playbackIndex, playbackQuality);
                        }
                    }
                    if (getAutoSwitchBitrateFor(type)) {
                        var minIdx = getMinAllowedIndexFor(type);
                        var topQualityIdx = getTopQualityIndexFor(type, streamId);
                        var switchRequest = abrRulesCollection.getMaxQuality(rulesContext);
                        var newQuality = switchRequest.quality;
                        if (minIdx !== undefined && newQuality < minIdx) {
                            newQuality = minIdx;
                        }
                        if (newQuality > topQualityIdx) {
                            newQuality = topQualityIdx;
                        }
                        switchHistoryDict[type].push({
                            oldValue: oldQuality,
                            newValue: newQuality
                        });
                        if (newQuality > _rulesSwitchRequest2["default"].NO_CHANGE && newQuality != oldQuality) {
                            if (abandonmentStateDict[type].state === ALLOW_LOAD || newQuality > oldQuality) {
                                changeQuality(type, oldQuality, newQuality, topQualityIdx, switchRequest.reason);
                            }
                        } else if (settings.get().debug.logLevel === _coreDebug2["default"].LOG_LEVEL_DEBUG) {
                            var bufferLevel = dashMetrics.getCurrentBufferLevel(type, true);
                            logger.debug("AbrController (" + type + ") stay on " + oldQuality + "/" + topQualityIdx + " (buffer: " + bufferLevel + ")");
                        }
                    }
                }
            }
            function setPlaybackQuality(type, streamInfo, newQuality, reason) {
                var id = streamInfo.id;
                var oldQuality = getQualityFor(type);
                (0, _utilsSupervisorTools.checkInteger)(newQuality);
                var topQualityIdx = getTopQualityIndexFor(type, id);
                if (newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx) {
                    changeQuality(type, oldQuality, newQuality, topQualityIdx, reason);
                }
            }
            function changeQuality(type, oldQuality, newQuality, topQualityIdx, reason) {
                if (type && streamProcessorDict[type]) {
                    var streamInfo = streamProcessorDict[type].getStreamInfo();
                    var id = streamInfo ? streamInfo.id : null;
                    if (settings.get().debug.logLevel === _coreDebug2["default"].LOG_LEVEL_DEBUG) {
                        var bufferLevel = dashMetrics.getCurrentBufferLevel(type, true);
                        logger.info("AbrController (" + type + ") switch from " + oldQuality + " to " + newQuality + "/" + topQualityIdx + " (buffer: " + bufferLevel + ") " + (reason ? JSON.stringify(reason) : "."));
                    }
                    setQualityFor(type, id, newQuality);
                    eventBus.trigger(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, {
                        mediaType: type,
                        streamInfo: streamInfo,
                        oldQuality: oldQuality,
                        newQuality: newQuality,
                        reason: reason
                    });
                    var bitrate = throughputHistory.getAverageThroughput(type);
                    if (!isNaN(bitrate)) {
                        domStorage.setSavedBitrateSettings(type, bitrate);
                    }
                }
            }
            function setAbandonmentStateFor(type, state) {
                abandonmentStateDict[type].state = state;
            }
            function getAbandonmentStateFor(type) {
                return abandonmentStateDict[type] ? abandonmentStateDict[type].state : null;
            }
            function getQualityForBitrate(mediaInfo, bitrate, latency) {
                var voRepresentation = mediaInfo && mediaInfo.type ? streamProcessorDict[mediaInfo.type].getRepresentationInfo() : null;
                if (settings.get().streaming.abr.useDeadTimeLatency && latency && voRepresentation && voRepresentation.fragmentDuration) {
                    latency = latency / 1e3;
                    var fragmentDuration = voRepresentation.fragmentDuration;
                    if (latency > fragmentDuration) {
                        return 0;
                    } else {
                        var deadTimeRatio = latency / fragmentDuration;
                        bitrate = bitrate * (1 - deadTimeRatio);
                    }
                }
                var bitrateList = getBitrateList(mediaInfo);
                for (var i = bitrateList.length - 1; i >= 0; i--) {
                    var bitrateInfo = bitrateList[i];
                    if (bitrate * 1e3 >= bitrateInfo.bitrate) {
                        return i;
                    }
                }
                return QUALITY_DEFAULT;
            }
            function getBitrateList(mediaInfo) {
                var infoList = [];
                if (!mediaInfo || !mediaInfo.bitrateList) return infoList;
                var bitrateList = mediaInfo.bitrateList;
                var type = mediaInfo.type;
                var bitrateInfo = undefined;
                for (var i = 0, ln = bitrateList.length; i < ln; i++) {
                    bitrateInfo = new _voBitrateInfo2["default"]();
                    bitrateInfo.mediaType = type;
                    bitrateInfo.qualityIndex = i;
                    bitrateInfo.bitrate = bitrateList[i].bandwidth;
                    bitrateInfo.width = bitrateList[i].width;
                    bitrateInfo.height = bitrateList[i].height;
                    bitrateInfo.scanType = bitrateList[i].scanType;
                    infoList.push(bitrateInfo);
                }
                return infoList;
            }
            function updateIsUsingBufferOccupancyABR(mediaType, bufferLevel) {
                var strategy = settings.get().streaming.ABRStrategy;
                if (strategy === _constantsConstants2["default"].ABR_STRATEGY_BOLA) {
                    isUsingBufferOccupancyABRDict[mediaType] = true;
                    return;
                } else if (strategy === _constantsConstants2["default"].ABR_STRATEGY_THROUGHPUT) {
                    isUsingBufferOccupancyABRDict[mediaType] = false;
                    return;
                }
                var stableBufferTime = mediaPlayerModel.getStableBufferTime();
                var switchOnThreshold = stableBufferTime;
                var switchOffThreshold = .5 * stableBufferTime;
                var useBufferABR = isUsingBufferOccupancyABRDict[mediaType];
                var newUseBufferABR = bufferLevel > (useBufferABR ? switchOffThreshold : switchOnThreshold);
                isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR;
                if (newUseBufferABR !== useBufferABR) {
                    if (newUseBufferABR) {
                        logger.info("AbrController (" + mediaType + ") switching from throughput to buffer occupancy ABR rule (buffer: " + bufferLevel.toFixed(3) + ").");
                    } else {
                        logger.info("AbrController (" + mediaType + ") switching from buffer occupancy to throughput ABR rule (buffer: " + bufferLevel.toFixed(3) + ").");
                    }
                }
            }
            function useBufferOccupancyABR(mediaType) {
                return isUsingBufferOccupancyABRDict[mediaType];
            }
            function getThroughputHistory() {
                return throughputHistory;
            }
            function updateTopQualityIndex(mediaInfo) {
                var type = mediaInfo.type;
                var streamId = mediaInfo.streamInfo.id;
                var max = mediaInfo.representationCount - 1;
                setTopQualityIndex(type, streamId, max);
                return max;
            }
            function isPlayingAtTopQuality(streamInfo) {
                var streamId = streamInfo ? streamInfo.id : null;
                var audioQuality = getQualityFor(_constantsConstants2["default"].AUDIO);
                var videoQuality = getQualityFor(_constantsConstants2["default"].VIDEO);
                var isAtTop = audioQuality === getTopQualityIndexFor(_constantsConstants2["default"].AUDIO, streamId) && videoQuality === getTopQualityIndexFor(_constantsConstants2["default"].VIDEO, streamId);
                return isAtTop;
            }
            function getQualityFor(type) {
                if (type && streamProcessorDict[type]) {
                    var streamInfo = streamProcessorDict[type].getStreamInfo();
                    var id = streamInfo ? streamInfo.id : null;
                    var quality = undefined;
                    if (id) {
                        qualityDict[id] = qualityDict[id] || {};
                        if (!qualityDict[id].hasOwnProperty(type)) {
                            qualityDict[id][type] = QUALITY_DEFAULT;
                        }
                        quality = qualityDict[id][type];
                        return quality;
                    }
                }
                return QUALITY_DEFAULT;
            }
            function setQualityFor(type, id, value) {
                qualityDict[id] = qualityDict[id] || {};
                qualityDict[id][type] = value;
            }
            function setTopQualityIndex(type, id, value) {
                topQualities[id] = topQualities[id] || {};
                topQualities[id][type] = value;
            }
            function checkMaxBitrate(idx, type) {
                var newIdx = idx;
                if (!streamProcessorDict[type]) {
                    return newIdx;
                }
                var minIdx = getMinAllowedIndexFor(type);
                if (minIdx !== undefined) {
                    newIdx = Math.max(idx, minIdx);
                }
                var maxIdx = getMaxAllowedIndexFor(type);
                if (maxIdx !== undefined) {
                    newIdx = Math.min(newIdx, maxIdx);
                }
                return newIdx;
            }
            function checkMaxRepresentationRatio(idx, type, maxIdx) {
                var maxRepresentationRatio = getMaxAllowedRepresentationRatioFor(type);
                if (isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0) {
                    return idx;
                }
                return Math.min(idx, Math.round(maxIdx * maxRepresentationRatio));
            }
            function setWindowResizeEventCalled(value) {
                windowResizeEventCalled = value;
            }
            function setElementSize() {
                if (videoModel) {
                    var hasPixelRatio = settings.get().streaming.abr.usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty("devicePixelRatio");
                    var pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;
                    elementWidth = videoModel.getClientWidth() * pixelRatio;
                    elementHeight = videoModel.getClientHeight() * pixelRatio;
                }
            }
            function checkPortalSize(idx, type) {
                if (type !== _constantsConstants2["default"].VIDEO || !settings.get().streaming.abr.limitBitrateByPortal || !streamProcessorDict[type]) {
                    return idx;
                }
                if (!windowResizeEventCalled) {
                    setElementSize();
                }
                var representation = adapter.getAdaptationForType(0, type).Representation;
                var newIdx = idx;
                if (elementWidth > 0 && elementHeight > 0) {
                    while (newIdx > 0 && representation[newIdx] && elementWidth < representation[newIdx].width && Math.abs(elementWidth - representation[newIdx - 1].width) < Math.abs(representation[newIdx].width - elementWidth)) {
                        newIdx = newIdx - 1;
                    }
                }
                return newIdx;
            }
            function onFragmentLoadProgress(e) {
                var type = e.request.mediaType;
                if (getAutoSwitchBitrateFor(type)) {
                    var streamProcessor = streamProcessorDict[type];
                    if (!streamProcessor) return;
                    var rulesContext = (0, _rulesRulesContext2["default"])(context).create({
                        abrController: instance,
                        streamProcessor: streamProcessor,
                        currentRequest: e.request,
                        useBufferOccupancyABR: useBufferOccupancyABR(type)
                    });
                    var switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);
                    if (switchRequest.quality > _rulesSwitchRequest2["default"].NO_CHANGE) {
                        var fragmentModel = streamProcessor.getFragmentModel();
                        var request = fragmentModel.getRequests({
                            state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_LOADING,
                            index: e.request.index
                        })[0];
                        if (request) {
                            fragmentModel.abortRequests();
                            setAbandonmentStateFor(type, ABANDON_LOAD);
                            switchHistoryDict[type].reset();
                            switchHistoryDict[type].push({
                                oldValue: getQualityFor(type),
                                newValue: switchRequest.quality,
                                confidence: 1,
                                reason: switchRequest.reason
                            });
                            setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.quality, switchRequest.reason);
                            clearTimeout(abandonmentTimeout);
                            abandonmentTimeout = setTimeout(function() {
                                setAbandonmentStateFor(type, ALLOW_LOAD);
                                abandonmentTimeout = null;
                            }, settings.get().streaming.abandonLoadTimeout);
                        }
                    }
                }
            }
            instance = {
                isPlayingAtTopQuality: isPlayingAtTopQuality,
                updateTopQualityIndex: updateTopQualityIndex,
                getThroughputHistory: getThroughputHistory,
                getBitrateList: getBitrateList,
                getQualityForBitrate: getQualityForBitrate,
                getTopBitrateInfoFor: getTopBitrateInfoFor,
                getMaxAllowedIndexFor: getMaxAllowedIndexFor,
                getMinAllowedIndexFor: getMinAllowedIndexFor,
                getInitialBitrateFor: getInitialBitrateFor,
                getQualityFor: getQualityFor,
                getAbandonmentStateFor: getAbandonmentStateFor,
                setPlaybackQuality: setPlaybackQuality,
                checkPlaybackQuality: checkPlaybackQuality,
                getTopQualityIndexFor: getTopQualityIndexFor,
                setElementSize: setElementSize,
                setWindowResizeEventCalled: setWindowResizeEventCalled,
                createAbrRulesCollection: createAbrRulesCollection,
                registerStreamType: registerStreamType,
                unRegisterStreamType: unRegisterStreamType,
                setConfig: setConfig,
                reset: reset
            };
            setup();
            return instance;
        }
        AbrController.__dashjs_factory_name = "AbrController";
        var factory = _coreFactoryMaker2["default"].getSingletonFactory(AbrController);
        factory.ABANDON_LOAD = ABANDON_LOAD;
        factory.QUALITY_DEFAULT = QUALITY_DEFAULT;
        _coreFactoryMaker2["default"].updateSingletonFactory(AbrController.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        107: 107,
        108: 108,
        147: 147,
        180: 180,
        181: 181,
        182: 182,
        183: 183,
        184: 184,
        185: 185,
        214: 214,
        220: 220,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    111: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _modelsBaseURLTreeModel = _dereq_(146);
        var _modelsBaseURLTreeModel2 = _interopRequireDefault(_modelsBaseURLTreeModel);
        var _utilsBaseURLSelector = _dereq_(202);
        var _utilsBaseURLSelector2 = _interopRequireDefault(_utilsBaseURLSelector);
        var _utilsURLUtils = _dereq_(216);
        var _utilsURLUtils2 = _interopRequireDefault(_utilsURLUtils);
        var _dashVoBaseURL = _dereq_(84);
        var _dashVoBaseURL2 = _interopRequireDefault(_dashVoBaseURL);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        function BaseURLController() {
            var instance = undefined, adapter = undefined;
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var urlUtils = (0, _utilsURLUtils2["default"])(context).getInstance();
            var baseURLTreeModel = undefined, baseURLSelector = undefined;
            function onBlackListChanged(e) {
                baseURLTreeModel.invalidateSelectedIndexes(e.entry);
            }
            function setup() {
                baseURLTreeModel = (0, _modelsBaseURLTreeModel2["default"])(context).create();
                baseURLSelector = (0, _utilsBaseURLSelector2["default"])(context).create();
                eventBus.on(_coreEventsEvents2["default"].SERVICE_LOCATION_BLACKLIST_CHANGED, onBlackListChanged, instance);
            }
            function setConfig(config) {
                if (config.baseURLTreeModel) {
                    baseURLTreeModel = config.baseURLTreeModel;
                }
                if (config.baseURLSelector) {
                    baseURLSelector = config.baseURLSelector;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
            }
            function update(manifest) {
                baseURLTreeModel.update(manifest);
                baseURLSelector.chooseSelector(adapter.getIsDVB(manifest));
            }
            function resolve(path) {
                var baseUrls = baseURLTreeModel.getForPath(path);
                var baseUrl = baseUrls.reduce(function(p, c) {
                    var b = baseURLSelector.select(c);
                    if (b) {
                        if (!urlUtils.isRelative(b.url)) {
                            p.url = b.url;
                            p.serviceLocation = b.serviceLocation;
                        } else {
                            p.url = urlUtils.resolve(b.url, p.url);
                        }
                        p.availabilityTimeOffset = b.availabilityTimeOffset;
                        p.availabilityTimeComplete = b.availabilityTimeComplete;
                    } else {
                        return new _dashVoBaseURL2["default"]();
                    }
                    return p;
                }, new _dashVoBaseURL2["default"]());
                if (!urlUtils.isRelative(baseUrl.url)) {
                    return baseUrl;
                }
            }
            function reset() {
                baseURLTreeModel.reset();
                baseURLSelector.reset();
            }
            function initialize(data) {
                baseURLTreeModel.setConfig({
                    adapter: adapter
                });
                update(data);
            }
            instance = {
                reset: reset,
                initialize: initialize,
                resolve: resolve,
                setConfig: setConfig
            };
            setup();
            return instance;
        }
        BaseURLController.__dashjs_factory_name = "BaseURLController";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(BaseURLController);
        module.exports = exports["default"];
    }, {
        146: 146,
        202: 202,
        216: 216,
        47: 47,
        48: 48,
        55: 55,
        84: 84
    } ],
    112: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        function BlackListController(config) {
            config = config || {};
            var blacklist = [];
            var eventBus = (0, _coreEventBus2["default"])(this.context).getInstance();
            var updateEventName = config.updateEventName;
            var addBlacklistEventName = config.addBlacklistEventName;
            function contains(query) {
                if (!blacklist.length || !query || !query.length) {
                    return false;
                }
                return blacklist.indexOf(query) !== -1;
            }
            function add(entry) {
                if (blacklist.indexOf(entry) !== -1) {
                    return;
                }
                blacklist.push(entry);
                eventBus.trigger(updateEventName, {
                    entry: entry
                });
            }
            function onAddBlackList(e) {
                add(e.entry);
            }
            function setup() {
                if (addBlacklistEventName) {
                    eventBus.on(addBlacklistEventName, onAddBlackList, this);
                }
            }
            function reset() {
                blacklist = [];
            }
            setup();
            return {
                add: add,
                contains: contains,
                reset: reset
            };
        }
        BlackListController.__dashjs_factory_name = "BlackListController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(BlackListController);
        module.exports = exports["default"];
    }, {
        47: 47,
        48: 48
    } ],
    113: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _modelsFragmentModel = _dereq_(147);
        var _modelsFragmentModel2 = _interopRequireDefault(_modelsFragmentModel);
        var _SourceBufferSink = _dereq_(103);
        var _SourceBufferSink2 = _interopRequireDefault(_SourceBufferSink);
        var _PreBufferSink = _dereq_(102);
        var _PreBufferSink2 = _interopRequireDefault(_PreBufferSink);
        var _AbrController = _dereq_(110);
        var _AbrController2 = _interopRequireDefault(_AbrController);
        var _MediaController = _dereq_(116);
        var _MediaController2 = _interopRequireDefault(_MediaController);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _utilsBoxParser = _dereq_(203);
        var _utilsBoxParser2 = _interopRequireDefault(_utilsBoxParser);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _utilsInitCache = _dereq_(209);
        var _utilsInitCache2 = _interopRequireDefault(_utilsInitCache);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _voMetricsHTTPRequest = _dereq_(237);
        var BUFFER_LOADED = "bufferLoaded";
        var BUFFER_EMPTY = "bufferStalled";
        var STALL_THRESHOLD = .5;
        var BUFFER_END_THRESHOLD = .5;
        var BUFFER_RANGE_CALCULATION_THRESHOLD = .01;
        var QUOTA_EXCEEDED_ERROR_CODE = 22;
        var BUFFER_CONTROLLER_TYPE = "BufferController";
        function BufferController(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var dashMetrics = config.dashMetrics;
            var errHandler = config.errHandler;
            var streamController = config.streamController;
            var mediaController = config.mediaController;
            var adapter = config.adapter;
            var textController = config.textController;
            var abrController = config.abrController;
            var playbackController = config.playbackController;
            var type = config.type;
            var streamProcessor = config.streamProcessor;
            var settings = config.settings;
            var instance = undefined, logger = undefined, requiredQuality = undefined, isBufferingCompleted = undefined, bufferLevel = undefined, criticalBufferLevel = undefined, mediaSource = undefined, maxAppendedIndex = undefined, lastIndex = undefined, buffer = undefined, dischargeBuffer = undefined, bufferState = undefined, appendedBytesInfo = undefined, wallclockTicked = undefined, isPruningInProgress = undefined, initCache = undefined, seekStartTime = undefined, seekClearedBufferingCompleted = undefined, pendingPruningRanges = undefined, bufferResetInProgress = undefined, mediaChunk = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                initCache = (0, _utilsInitCache2["default"])(context).getInstance();
                resetInitialSettings();
            }
            function getBufferControllerType() {
                return BUFFER_CONTROLLER_TYPE;
            }
            function initialize(Source) {
                setMediaSource(Source);
                requiredQuality = abrController.getQualityFor(type);
                eventBus.on(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);
                eventBus.on(_coreEventsEvents2["default"].MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this);
                eventBus.on(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
                eventBus.on(_coreEventsEvents2["default"].STREAM_COMPLETED, onStreamCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_PLAYING, onPlaybackPlaying, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_PROGRESS, onPlaybackProgression, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_SEEKED, onPlaybackSeeked, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_STALLED, onPlaybackStalled, this);
                eventBus.on(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
                eventBus.on(_coreEventsEvents2["default"].CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this, _coreEventBus2["default"].EVENT_PRIORITY_HIGH);
                eventBus.on(_coreEventsEvents2["default"].SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);
            }
            function createBuffer(mediaInfo, oldBuffers) {
                if (!initCache || !mediaInfo || !streamProcessor) return null;
                if (mediaSource) {
                    try {
                        if (oldBuffers && oldBuffers[type]) {
                            buffer = (0, _SourceBufferSink2["default"])(context).create(mediaSource, mediaInfo, onAppended.bind(this), oldBuffers[type]);
                        } else {
                            buffer = (0, _SourceBufferSink2["default"])(context).create(mediaSource, mediaInfo, onAppended.bind(this));
                        }
                        if (typeof buffer.getBuffer().initialize === "function") {
                            buffer.getBuffer().initialize(type, streamProcessor);
                        }
                    } catch (e) {
                        logger.fatal("Caught error on create SourceBuffer: " + e);
                        errHandler.mediaSourceError("Error creating " + type + " source buffer.");
                        errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].MEDIASOURCE_TYPE_UNSUPPORTED_CODE, _coreErrorsErrors2["default"].MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));
                    }
                } else {
                    buffer = (0, _PreBufferSink2["default"])(context).create(onAppended.bind(this));
                }
                updateBufferTimestampOffset(streamProcessor.getRepresentationInfo(requiredQuality).MSETimeOffset);
                return buffer;
            }
            function dischargePreBuffer() {
                if (buffer && dischargeBuffer && typeof dischargeBuffer.discharge === "function") {
                    var ranges = dischargeBuffer.getAllBufferRanges();
                    if (ranges.length > 0) {
                        var rangeStr = "Beginning " + type + "PreBuffer discharge, adding buffer for:";
                        for (var i = 0; i < ranges.length; i++) {
                            rangeStr += " start: " + ranges.start(i) + ", end: " + ranges.end(i) + ";";
                        }
                        logger.debug(rangeStr);
                    } else {
                        logger.debug("PreBuffer discharge requested, but there were no media segments in the PreBuffer.");
                    }
                    var chunks = dischargeBuffer.discharge();
                    var lastInit = null;
                    for (var j = 0; j < chunks.length; j++) {
                        var chunk = chunks[j];
                        var initChunk = initCache.extract(chunk.streamId, chunk.representationId);
                        if (initChunk) {
                            if (lastInit !== initChunk) {
                                buffer.append(initChunk);
                                lastInit = initChunk;
                            }
                            buffer.append(chunk);
                        }
                    }
                    dischargeBuffer.reset();
                    dischargeBuffer = null;
                }
            }
            function isActive() {
                return streamProcessor && streamController && streamProcessor.getStreamInfo();
            }
            function onInitFragmentLoaded(e) {
                if (e.fragmentModel !== streamProcessor.getFragmentModel()) return;
                logger.info("Init fragment finished loading saving to", type + "'s init cache");
                initCache.save(e.chunk);
                logger.debug("Append Init fragment", type, " with representationId:", e.chunk.representationId, " and quality:", e.chunk.quality, ", data size:", e.chunk.bytes.byteLength);
                appendToBuffer(e.chunk);
            }
            function switchInitData(streamId, representationId, bufferResetEnabled) {
                var chunk = initCache.extract(streamId, representationId);
                bufferResetInProgress = bufferResetEnabled === true ? bufferResetEnabled : false;
                if (chunk) {
                    logger.info("Append Init fragment", type, " with representationId:", chunk.representationId, " and quality:", chunk.quality, ", data size:", chunk.bytes.byteLength);
                    appendToBuffer(chunk);
                } else {
                    eventBus.trigger(_coreEventsEvents2["default"].INIT_REQUESTED, {
                        sender: instance
                    });
                }
            }
            function onMediaFragmentLoaded(e) {
                if (e.fragmentModel !== streamProcessor.getFragmentModel()) return;
                var chunk = e.chunk;
                var bytes = chunk.bytes;
                var quality = chunk.quality;
                var currentRepresentation = streamProcessor.getRepresentationInfo(quality);
                var representationController = streamProcessor.getRepresentationController();
                var voRepresentation = representationController && currentRepresentation ? representationController.getRepresentationForQuality(currentRepresentation.quality) : null;
                var eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo);
                var eventStreamTrack = adapter.getEventsFor(currentRepresentation, voRepresentation);
                if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {
                    var request = streamProcessor.getFragmentModel().getRequests({
                        state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                        quality: quality,
                        index: chunk.index
                    })[0];
                    var events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);
                    streamProcessor.addInbandEvents(events);
                }
                if (bufferResetInProgress) {
                    mediaChunk = chunk;
                    var ranges = buffer && buffer.getAllBufferRanges();
                    if (ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > STALL_THRESHOLD) {
                        logger.debug("Clearing buffer because track changed - " + (ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD));
                        clearBuffers([ {
                            start: 0,
                            end: ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD,
                            force: true
                        } ]);
                    }
                } else {
                    appendToBuffer(chunk);
                }
            }
            function appendToBuffer(chunk) {
                buffer.append(chunk);
                if (chunk.mediaInfo.type === _constantsConstants2["default"].VIDEO) {
                    eventBus.trigger(_coreEventsEvents2["default"].VIDEO_CHUNK_RECEIVED, {
                        chunk: chunk
                    });
                }
            }
            function showBufferRanges(ranges) {
                if (ranges && ranges.length > 0) {
                    for (var i = 0, len = ranges.length; i < len; i++) {
                        logger.debug("Buffered Range for type:", type, ":", ranges.start(i), " - ", ranges.end(i), " currentTime = ", playbackController.getTime());
                    }
                }
            }
            function onAppended(e) {
                if (e.error) {
                    if (e.error.code === QUOTA_EXCEEDED_ERROR_CODE) {
                        criticalBufferLevel = getTotalBufferedTime() * .8;
                        logger.warn("Quota exceeded for type: " + type + ", Critical Buffer: " + criticalBufferLevel);
                        if (criticalBufferLevel > 0) {
                            var bufferToKeep = Math.max(.2 * criticalBufferLevel, 1);
                            var bufferAhead = criticalBufferLevel - bufferToKeep;
                            var s = {
                                streaming: {
                                    bufferToKeep: parseFloat(bufferToKeep.toFixed(5)),
                                    bufferAheadToKeep: parseFloat(bufferAhead.toFixed(5))
                                }
                            };
                            settings.update(s);
                        }
                    }
                    if (e.error.code === QUOTA_EXCEEDED_ERROR_CODE || !hasEnoughSpaceToAppend()) {
                        logger.warn("Clearing playback buffer to overcome quota exceed situation for type: " + type);
                        eventBus.trigger(_coreEventsEvents2["default"].QUOTA_EXCEEDED, {
                            sender: instance,
                            criticalBufferLevel: criticalBufferLevel
                        });
                        pruneAllSafely();
                    }
                    return;
                }
                appendedBytesInfo = e.chunk;
                if (appendedBytesInfo && !isNaN(appendedBytesInfo.index)) {
                    maxAppendedIndex = Math.max(appendedBytesInfo.index, maxAppendedIndex);
                    checkIfBufferingCompleted();
                }
                var ranges = buffer.getAllBufferRanges();
                if (appendedBytesInfo.segmentType === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {
                    showBufferRanges(ranges);
                    onPlaybackProgression();
                } else {
                    if (bufferResetInProgress) {
                        var currentTime = playbackController.getTime();
                        logger.debug("AppendToBuffer seek target should be " + currentTime);
                        streamProcessor.getScheduleController().setSeekTarget(currentTime);
                        streamProcessor.setIndexHandlerTime(currentTime);
                    }
                }
                var dataEvent = {
                    sender: instance,
                    quality: appendedBytesInfo.quality,
                    startTime: appendedBytesInfo.start,
                    index: appendedBytesInfo.index,
                    bufferedRanges: ranges
                };
                if (appendedBytesInfo && !appendedBytesInfo.endFragment) {
                    eventBus.trigger(_coreEventsEvents2["default"].BYTES_APPENDED, dataEvent);
                } else if (appendedBytesInfo) {
                    eventBus.trigger(_coreEventsEvents2["default"].BYTES_APPENDED_END_FRAGMENT, dataEvent);
                }
            }
            function onQualityChanged(e) {
                if (requiredQuality === e.newQuality || type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;
                updateBufferTimestampOffset(streamProcessor.getRepresentationInfo(e.newQuality).MSETimeOffset);
                requiredQuality = e.newQuality;
            }
            function onPlaybackSeeking() {
                if (isBufferingCompleted) {
                    seekClearedBufferingCompleted = true;
                    isBufferingCompleted = false;
                    lastIndex = Number.POSITIVE_INFINITY;
                }
                if (type !== _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    pruneAllSafely();
                } else {
                    onPlaybackProgression();
                }
            }
            function onPlaybackSeeked() {
                seekStartTime = undefined;
            }
            function pruneAllSafely() {
                var ranges = getAllRangesWithSafetyFactor();
                if (!ranges || ranges.length === 0) {
                    onPlaybackProgression();
                }
                clearBuffers(ranges);
            }
            function getAllRangesWithSafetyFactor() {
                var clearRanges = [];
                var ranges = buffer.getAllBufferRanges();
                if (!ranges || ranges.length === 0) {
                    return clearRanges;
                }
                var currentTime = playbackController.getTime();
                var endOfBuffer = ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD;
                var currentTimeRequest = streamProcessor.getFragmentModel().getRequests({
                    state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                    time: currentTime,
                    threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
                })[0];
                if (!currentTimeRequest) {
                    logger.debug("getAllRangesWithSafetyFactor for", type, "- No request found in current time position, removing full buffer 0 -", endOfBuffer);
                    clearRanges.push({
                        start: 0,
                        end: endOfBuffer
                    });
                } else {
                    var behindRange = {
                        start: 0,
                        end: currentTimeRequest.startTime - STALL_THRESHOLD
                    };
                    var prevReq = streamProcessor.getFragmentModel().getRequests({
                        state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                        time: currentTimeRequest.startTime - currentTimeRequest.duration / 2,
                        threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
                    })[0];
                    if (prevReq && prevReq.startTime != currentTimeRequest.startTime) {
                        behindRange.end = prevReq.startTime;
                    }
                    if (behindRange.start < behindRange.end && behindRange.end > ranges.start(0)) {
                        clearRanges.push(behindRange);
                    }
                    var aheadRange = {
                        start: currentTimeRequest.startTime + currentTimeRequest.duration + STALL_THRESHOLD,
                        end: endOfBuffer
                    };
                    var nextReq = streamProcessor.getFragmentModel().getRequests({
                        state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                        time: currentTimeRequest.startTime + currentTimeRequest.duration + STALL_THRESHOLD,
                        threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
                    })[0];
                    if (nextReq && nextReq.startTime !== currentTimeRequest.startTime) {
                        aheadRange.start = nextReq.startTime + nextReq.duration + STALL_THRESHOLD;
                    }
                    if (aheadRange.start < aheadRange.end && aheadRange.start < endOfBuffer) {
                        clearRanges.push(aheadRange);
                    }
                }
                return clearRanges;
            }
            function getWorkingTime() {
                var ret = playbackController.getTime();
                if (seekStartTime) {
                    var ranges = buffer.getAllBufferRanges();
                    if (ranges && ranges.length) {
                        ret = Math.max(ranges.start(0), seekStartTime);
                    }
                }
                return ret;
            }
            function onPlaybackProgression() {
                if (!bufferResetInProgress || type === _constantsConstants2["default"].FRAGMENTED_TEXT && textController.isTextEnabled()) {
                    updateBufferLevel();
                    addBufferMetrics();
                }
            }
            function onPlaybackStalled() {
                checkIfSufficientBuffer();
            }
            function onPlaybackPlaying() {
                checkIfSufficientBuffer();
            }
            function getRangeAt(time, tolerance) {//err4
                var ranges = buffer.getAllBufferRanges();
                var start = 0;
                var end = 0;
                var firstStart = null;
                var lastEnd = null;
                var gap = 0;
                var len = undefined, i = undefined;
                var toler = tolerance || .15;
                if (ranges !== null && ranges !== undefined) {
                    for (i = 0, len = ranges.length; i < len; i++) {
                        start = ranges.start(i);
                        end = ranges.end(i);
                        if (firstStart === null) {
                            gap = Math.abs(start - time);
                            if (time >= start && time < end) {
                                firstStart = start;
                                lastEnd = end;
                            } else if (gap <= toler) {
                                firstStart = start;
                                lastEnd = end;
                            }
                        } else {
                            gap = start - lastEnd;
                            if (gap <= toler) {
                                lastEnd = end;
                            } else {
                                break;
                            }
                        }
                    }
                    if (firstStart !== null) {
                        return {
                            start: firstStart,
                            end: lastEnd
                        };
                    }
                }
                return null;
            }
            function getBufferLength(time, tolerance) {
                var range = undefined, length = undefined;
                range = getRangeAt(time, tolerance);
                if (range === null) {
                    length = 0;
                } else {
                    length = range.end - time;
                }
                return length;
            }
            function updateBufferLevel() {
                if (playbackController) {
                    bufferLevel = getBufferLength(getWorkingTime() || 0);
                    eventBus.trigger(_coreEventsEvents2["default"].BUFFER_LEVEL_UPDATED, {
                        sender: instance,
                        bufferLevel: bufferLevel
                    });
                    checkIfSufficientBuffer();
                }
            }
            function addBufferMetrics() {
                if (!isActive()) return;
                dashMetrics.addBufferState(type, bufferState, streamProcessor.getScheduleController().getBufferTarget());
                dashMetrics.addBufferLevel(type, new Date(), bufferLevel * 1e3);
            }
            function checkIfBufferingCompleted() {
                var isLastIdxAppended = maxAppendedIndex >= lastIndex - 1;
                if (isLastIdxAppended && !isBufferingCompleted && buffer.discharge === undefined) {
                    isBufferingCompleted = true;
                    logger.debug("checkIfBufferingCompleted trigger BUFFERING_COMPLETED");
                    eventBus.trigger(_coreEventsEvents2["default"].BUFFERING_COMPLETED, {
                        sender: instance,
                        streamInfo: streamProcessor.getStreamInfo()
                    });
                }
            }
            function checkIfSufficientBuffer() {
                if (type !== "audio" && type !== "video") return;
                if (seekClearedBufferingCompleted && !isBufferingCompleted && playbackController && playbackController.getTimeToStreamEnd() - bufferLevel < STALL_THRESHOLD) {
                    seekClearedBufferingCompleted = false;
                    isBufferingCompleted = true;
                    logger.debug("checkIfSufficientBuffer trigger BUFFERING_COMPLETED");
                    eventBus.trigger(_coreEventsEvents2["default"].BUFFERING_COMPLETED, {
                        sender: instance,
                        streamInfo: streamProcessor.getStreamInfo()
                    });
                }
                if ((!settings.get().streaming.lowLatencyEnabled && bufferLevel < STALL_THRESHOLD || bufferLevel === 0) && !isBufferingCompleted) {
                    notifyBufferStateChanged(BUFFER_EMPTY);
                } else {
                    if (isBufferingCompleted || bufferLevel >= streamProcessor.getStreamInfo().manifestInfo.minBufferTime) {
                        notifyBufferStateChanged(BUFFER_LOADED);
                    }
                }
            }
            function notifyBufferStateChanged(state) {
                if (bufferState === state || state === BUFFER_EMPTY && playbackController.getTime() === 0 || type === _constantsConstants2["default"].FRAGMENTED_TEXT && !textController.isTextEnabled()) {
                    return;
                }
                bufferState = state;
                addBufferMetrics();
                eventBus.trigger(_coreEventsEvents2["default"].BUFFER_LEVEL_STATE_CHANGED, {
                    sender: instance,
                    state: state,
                    mediaType: type,
                    streamInfo: streamProcessor.getStreamInfo()
                });
                eventBus.trigger(state === BUFFER_LOADED ? _coreEventsEvents2["default"].BUFFER_LOADED : _coreEventsEvents2["default"].BUFFER_EMPTY, {
                    mediaType: type
                });
                logger.debug(state === BUFFER_LOADED ? "Got enough buffer to start for " + type : "Waiting for more buffer before starting playback for " + type);
            }
            function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {
                var fragmentStartTime = Math.max(!request || isNaN(request.startTime) ? 0 : request.startTime, 0);
                var eventStreams = [];
                var events = [];
                var inbandEvents = mediaInbandEvents.concat(trackInbandEvents);
                for (var i = 0, ln = inbandEvents.length; i < ln; i++) {
                    eventStreams[inbandEvents[i].schemeIdUri + "/" + inbandEvents[i].value] = inbandEvents[i];
                }
                var isoFile = (0, _utilsBoxParser2["default"])(context).getInstance().parse(data);
                var eventBoxes = isoFile.getBoxes("emsg");
                for (var i = 0, ln = eventBoxes.length; i < ln; i++) {
                    var _event = adapter.getEvent(eventBoxes[i], eventStreams, fragmentStartTime);
                    if (_event) {
                        events.push(_event);
                    }
                }
                return events;
            }
            function pruneBuffer() {
                if (!buffer || type === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    return;
                }
                if (!isBufferingCompleted) {
                    clearBuffers(getClearRanges());
                }
            }
            function getClearRanges() {
                var clearRanges = [];
                var ranges = buffer.getAllBufferRanges();
                if (!ranges || ranges.length === 0) {
                    return clearRanges;
                }
                var currentTime = playbackController.getTime();
                var rangeToKeep = {
                    start: Math.max(0, currentTime - settings.get().streaming.bufferToKeep),
                    end: currentTime + settings.get().streaming.bufferAheadToKeep
                };
                var currentTimeRequest = streamProcessor.getFragmentModel().getRequests({
                    state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                    time: currentTime,
                    threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
                })[0];
                if (currentTimeRequest) {
                    rangeToKeep.start = Math.min(currentTimeRequest.startTime, rangeToKeep.start);
                    rangeToKeep.end = Math.max(currentTimeRequest.startTime + currentTimeRequest.duration, rangeToKeep.end);
                } else if (currentTime === 0 && playbackController.getIsDynamic()) {
                    return [];
                }
                if (ranges.start(0) <= rangeToKeep.start) {
                    var behindRange = {
                        start: 0,
                        end: rangeToKeep.start
                    };
                    for (var i = 0; i < ranges.length && ranges.end(i) <= rangeToKeep.start; i++) {
                        behindRange.end = ranges.end(i);
                    }
                    if (behindRange.start < behindRange.end) {
                        clearRanges.push(behindRange);
                    }
                }
                if (ranges.end(ranges.length - 1) >= rangeToKeep.end) {
                    var aheadRange = {
                        start: rangeToKeep.end,
                        end: ranges.end(ranges.length - 1) + BUFFER_RANGE_CALCULATION_THRESHOLD
                    };
                    if (aheadRange.start < aheadRange.end) {
                        clearRanges.push(aheadRange);
                    }
                }
                return clearRanges;
            }
            function clearBuffers(ranges) {
                if (!ranges || !buffer || ranges.length === 0) return;
                pendingPruningRanges.push.apply(pendingPruningRanges, ranges);
                if (isPruningInProgress) {
                    return;
                }
                clearNextRange();
            }
            function clearNextRange() {
                if (pendingPruningRanges.length === 0 || !buffer) {
                    logger.debug("Nothing to prune, halt pruning");
                    pendingPruningRanges = [];
                    isPruningInProgress = false;
                    return;
                }
                var sourceBuffer = buffer.getBuffer();
                if (!sourceBuffer || !sourceBuffer.buffered || sourceBuffer.buffered.length === 0) {
                    logger.debug("SourceBuffer is empty (or does not exist), halt pruning");
                    pendingPruningRanges = [];
                    isPruningInProgress = false;
                    return;
                }
                var range = pendingPruningRanges.shift();
                logger.debug("Removing", type, "buffer from:", range.start, "to", range.end);
                isPruningInProgress = true;
                var currentTime = playbackController.getTime();
                if (currentTime < range.end) {
                    isBufferingCompleted = false;
                    maxAppendedIndex = 0;
                    if (!bufferResetInProgress) {
                        streamProcessor.getScheduleController().setSeekTarget(currentTime);
                        streamProcessor.setIndexHandlerTime(currentTime);
                    }
                }
                buffer.remove(range.start, range.end, range.force);
            }
            function onRemoved(e) {
                if (buffer !== e.buffer) return;
                logger.debug("onRemoved buffer from:", e.from, "to", e.to);
                var ranges = buffer.getAllBufferRanges();
                showBufferRanges(ranges);
                if (pendingPruningRanges.length === 0) {
                    isPruningInProgress = false;
                }
                if (e.unintended) {
                    logger.warn("Detected unintended removal from:", e.from, "to", e.to, "setting index handler time to", e.from);
                    streamProcessor.setIndexHandlerTime(e.from);
                }
                if (isPruningInProgress) {
                    clearNextRange();
                } else {
                    if (!bufferResetInProgress) {
                        logger.debug("onRemoved : call updateBufferLevel");
                        updateBufferLevel();
                    } else {
                        bufferResetInProgress = false;
                        if (mediaChunk) {
                            appendToBuffer(mediaChunk);
                        }
                    }
                    eventBus.trigger(_coreEventsEvents2["default"].BUFFER_CLEARED, {
                        sender: instance,
                        from: e.from,
                        to: e.to,
                        unintended: e.unintended,
                        hasEnoughSpaceToAppend: hasEnoughSpaceToAppend()
                    });
                }
            }
            function updateBufferTimestampOffset(MSETimeOffset) {
                if (buffer && buffer.updateTimestampOffset) {
                    buffer.updateTimestampOffset(MSETimeOffset);
                }
            }
            function onDataUpdateCompleted(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor || e.error) return;
                updateBufferTimestampOffset(e.currentRepresentation.MSETimeOffset);
            }
            function onStreamCompleted(e) {
                if (e.fragmentModel !== streamProcessor.getFragmentModel()) return;
                lastIndex = e.request.index;
                checkIfBufferingCompleted();
            }
            function onCurrentTrackChanged(e) {
                var ranges = buffer && buffer.getAllBufferRanges();
                if (!ranges || e.newMediaInfo.type !== type || e.newMediaInfo.streamInfo.id !== streamProcessor.getStreamInfo().id) return;
                logger.info("Track change asked");
                if (mediaController.getSwitchMode(type) === _MediaController2["default"].TRACK_SWITCH_MODE_ALWAYS_REPLACE) {
                    if (ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > STALL_THRESHOLD) {
                        isBufferingCompleted = false;
                        lastIndex = Number.POSITIVE_INFINITY;
                    }
                }
            }
            function onWallclockTimeUpdated() {
                wallclockTicked++;
                var secondsElapsed = wallclockTicked * (settings.get().streaming.wallclockTimeUpdateInterval / 1e3);
                if (secondsElapsed >= settings.get().streaming.bufferPruningInterval) {
                    wallclockTicked = 0;
                    pruneBuffer();
                }
            }
            function onPlaybackRateChanged() {
                checkIfSufficientBuffer();
            }
            function getType() {
                return type;
            }
            function getStreamProcessor() {
                return streamProcessor;
            }
            function setSeekStartTime(value) {
                seekStartTime = value;
            }
            function getBuffer() {
                return buffer;
            }
            function setBuffer(newBuffer) {
                buffer = newBuffer;
            }
            function getBufferLevel() {
                return bufferLevel;
            }
            function setMediaSource(value, mediaInfo) {
                mediaSource = value;
                console.debug("setMediaSource mediaSource = ", mediaSource);
                if (buffer && mediaInfo) {
                    if (typeof buffer.discharge === "function") {
                        dischargeBuffer = buffer;
                        createBuffer(mediaInfo);
                    }
                }
            }
            function getMediaSource() {
                return mediaSource;
            }
            function getIsBufferingCompleted() {
                return isBufferingCompleted;
            }
            function getIsPruningInProgress() {
                return isPruningInProgress;
            }
            function getTotalBufferedTime() {
                var ranges = buffer.getAllBufferRanges();
                var totalBufferedTime = 0;
                var ln = undefined, i = undefined;
                if (!ranges) return totalBufferedTime;
                for (i = 0, ln = ranges.length; i < ln; i++) {
                    totalBufferedTime += ranges.end(i) - ranges.start(i);
                }
                return totalBufferedTime;
            }
            function hasEnoughSpaceToAppend() {
                var totalBufferedTime = getTotalBufferedTime();
                return totalBufferedTime < criticalBufferLevel;
            }
            function resetInitialSettings(errored, keepBuffers) {
                criticalBufferLevel = Number.POSITIVE_INFINITY;
                bufferState = undefined;
                requiredQuality = _AbrController2["default"].QUALITY_DEFAULT;
                lastIndex = Number.POSITIVE_INFINITY;
                maxAppendedIndex = 0;
                appendedBytesInfo = null;
                isBufferingCompleted = false;
                isPruningInProgress = false;
                seekClearedBufferingCompleted = false;
                bufferLevel = 0;
                wallclockTicked = 0;
                pendingPruningRanges = [];
                if (buffer) {
                    if (!errored) {
                        buffer.abort();
                    }
                    buffer.reset(keepBuffers);
                    buffer = null;
                }
                bufferResetInProgress = false;
            }
            function reset(errored, keepBuffers) {
                eventBus.off(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
                eventBus.off(_coreEventsEvents2["default"].INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);
                eventBus.off(_coreEventsEvents2["default"].MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this);
                eventBus.off(_coreEventsEvents2["default"].STREAM_COMPLETED, onStreamCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_PLAYING, onPlaybackPlaying, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_PROGRESS, onPlaybackProgression, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_SEEKED, onPlaybackSeeked, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_STALLED, onPlaybackStalled, this);
                eventBus.off(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
                eventBus.off(_coreEventsEvents2["default"].SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);
                resetInitialSettings(errored, keepBuffers);
            }
            instance = {
                getBufferControllerType: getBufferControllerType,
                initialize: initialize,
                createBuffer: createBuffer,
                dischargePreBuffer: dischargePreBuffer,
                getType: getType,
                getStreamProcessor: getStreamProcessor,
                setSeekStartTime: setSeekStartTime,
                getBuffer: getBuffer,
                setBuffer: setBuffer,
                getBufferLevel: getBufferLevel,
                getRangeAt: getRangeAt,
                setMediaSource: setMediaSource,
                getMediaSource: getMediaSource,
                getIsBufferingCompleted: getIsBufferingCompleted,
                switchInitData: switchInitData,
                getIsPruningInProgress: getIsPruningInProgress,
                reset: reset
            };
            setup();
            return instance;
        }
        BufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;
        var factory = _coreFactoryMaker2["default"].getClassFactory(BufferController);
        factory.BUFFER_LOADED = BUFFER_LOADED;
        factory.BUFFER_EMPTY = BUFFER_EMPTY;
        _coreFactoryMaker2["default"].updateClassFactory(BufferController.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        102: 102,
        103: 103,
        107: 107,
        110: 110,
        116: 116,
        147: 147,
        203: 203,
        209: 209,
        221: 221,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    114: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _netXHRLoader = _dereq_(155);
        var _netXHRLoader2 = _interopRequireDefault(_netXHRLoader);
        function EventController() {
            var MPD_RELOAD_SCHEME = "urn:mpeg:dash:event:2012";
            var MPD_RELOAD_VALUE = 1;
            var MPD_CALLBACK_SCHEME = "urn:mpeg:dash:event:callback:2015";
            var MPD_CALLBACK_VALUE = 1;
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, inlineEvents = undefined, inbandEvents = undefined, activeEvents = undefined, eventInterval = undefined, refreshDelay = undefined, lastEventTimerCall = undefined, manifestUpdater = undefined, playbackController = undefined, isStarted = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
            }
            function resetInitialSettings() {
                isStarted = false;
                inlineEvents = {};
                inbandEvents = {};
                activeEvents = {};
                eventInterval = null;
                refreshDelay = 100;
                lastEventTimerCall = Date.now() / 1e3;
            }
            function checkConfig() {
                if (!manifestUpdater || !playbackController) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function stop() {
                if (eventInterval !== null && isStarted) {
                    clearInterval(eventInterval);
                    eventInterval = null;
                    isStarted = false;
                }
            }
            function start() {
                checkConfig();
                logger.debug("Start Event Controller");
                if (!isStarted && !isNaN(refreshDelay)) {
                    isStarted = true;
                    eventInterval = setInterval(onEventTimer, refreshDelay);
                }
            }
            function addInlineEvents(values) {
                checkConfig();
                inlineEvents = {};
                if (values) {
                    for (var i = 0; i < values.length; i++) {
                        var _event = values[i];
                        inlineEvents[_event.id] = _event;
                        logger.debug("Add inline event with id " + _event.id);
                    }
                }
                logger.debug("Added " + values.length + " inline events");
            }
            function addInbandEvents(values) {
                checkConfig();
                for (var i = 0; i < values.length; i++) {
                    var _event2 = values[i];
                    if (!(_event2.id in inbandEvents)) {
                        if (_event2.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[_event2.id] === undefined) {
                            handleManifestReloadEvent(_event2);
                        }
                        inbandEvents[_event2.id] = _event2;
                        logger.debug("Add inband event with id " + _event2.id);
                    } else {
                        logger.debug("Repeated event with id " + _event2.id);
                    }
                }
            }
            function handleManifestReloadEvent(event) {
                if (event.eventStream.value == MPD_RELOAD_VALUE) {
                    var timescale = event.eventStream.timescale || 1;
                    var validUntil = event.presentationTime / timescale;
                    var newDuration = undefined;
                    if (event.presentationTime == 4294967295) {
                        newDuration = NaN;
                    } else {
                        newDuration = (event.presentationTime + event.duration) / timescale;
                    }
                    logger.info("Manifest validity changed: Valid until: " + validUntil + "; remaining duration: " + newDuration);
                    eventBus.trigger(_coreEventsEvents2["default"].MANIFEST_VALIDITY_CHANGED, {
                        id: event.id,
                        validUntil: validUntil,
                        newDuration: newDuration,
                        newManifestValidAfter: NaN
                    });
                }
            }
            function removeEvents() {
                if (activeEvents) {
                    var currentVideoTime = playbackController.getTime();
                    var eventIds = Object.keys(activeEvents);
                    for (var i = 0; i < eventIds.length; i++) {
                        var eventId = eventIds[i];
                        var curr = activeEvents[eventId];
                        if (curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime) {
                            logger.debug("Remove Event " + eventId + " at time " + currentVideoTime);
                            curr = null;
                            delete activeEvents[eventId];
                        }
                    }
                }
            }
            function onEventTimer() {
                var currentVideoTime = playbackController.getTime();
                var presentationTimeThreshold = currentVideoTime - lastEventTimerCall;
                lastEventTimerCall = currentVideoTime;
                triggerEvents(inbandEvents, presentationTimeThreshold, currentVideoTime);
                triggerEvents(inlineEvents, presentationTimeThreshold, currentVideoTime);
                removeEvents();
            }
            function refreshManifest() {
                checkConfig();
                manifestUpdater.refreshManifest();
            }
            function sendCallbackRequest(url) {
                var loader = (0, _netXHRLoader2["default"])(context).create({});
                loader.load({
                    method: "get",
                    url: url,
                    request: {
                        responseType: "arraybuffer"
                    }
                });
            }
            function triggerEvents(events, presentationTimeThreshold, currentVideoTime) {
                var presentationTime;
                if (events) {
                    var eventIds = Object.keys(events);
                    for (var i = 0; i < eventIds.length; i++) {
                        var eventId = eventIds[i];
                        var curr = events[eventId];
                        if (curr !== undefined) {
                            presentationTime = curr.presentationTime / curr.eventStream.timescale;
                            if (presentationTime === 0 || presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime) {
                                logger.debug("Start Event " + eventId + " at " + currentVideoTime);
                                if (curr.duration > 0) {
                                    activeEvents[eventId] = curr;
                                }
                                if (curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE) {
                                    if (curr.duration !== 0 || curr.presentationTimeDelta !== 0) {
                                        refreshManifest();
                                    }
                                } else if (curr.eventStream.schemeIdUri == MPD_CALLBACK_SCHEME && curr.eventStream.value == MPD_CALLBACK_VALUE) {
                                    sendCallbackRequest(curr.messageData);
                                } else {
                                    eventBus.trigger(curr.eventStream.schemeIdUri, {
                                        event: curr
                                    });
                                }
                                delete events[eventId];
                            }
                        }
                    }
                }
            }
            function setConfig(config) {
                if (!config) return;
                if (config.manifestUpdater) {
                    manifestUpdater = config.manifestUpdater;
                }
                if (config.playbackController) {
                    playbackController = config.playbackController;
                }
            }
            function reset() {
                stop();
                resetInitialSettings();
            }
            instance = {
                addInlineEvents: addInlineEvents,
                addInbandEvents: addInbandEvents,
                stop: stop,
                start: start,
                setConfig: setConfig,
                reset: reset
            };
            setup();
            return instance;
        }
        EventController.__dashjs_factory_name = "EventController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(EventController);
        module.exports = exports["default"];
    }, {
        155: 155,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    115: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _voDataChunk = _dereq_(222);
        var _voDataChunk2 = _interopRequireDefault(_voDataChunk);
        var _modelsFragmentModel = _dereq_(147);
        var _modelsFragmentModel2 = _interopRequireDefault(_modelsFragmentModel);
        var _FragmentLoader = _dereq_(96);
        var _FragmentLoader2 = _interopRequireDefault(_FragmentLoader);
        var _utilsRequestModifier = _dereq_(213);
        var _utilsRequestModifier2 = _interopRequireDefault(_utilsRequestModifier);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        function FragmentController(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var errHandler = config.errHandler;
            var mediaPlayerModel = config.mediaPlayerModel;
            var dashMetrics = config.dashMetrics;
            var instance = undefined, logger = undefined, fragmentModels = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);
                eventBus.on(_coreEventsEvents2["default"].FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);
            }
            function getModel(type) {
                var model = fragmentModels[type];
                if (!model) {
                    model = (0, _modelsFragmentModel2["default"])(context).create({
                        dashMetrics: dashMetrics,
                        fragmentLoader: (0, _FragmentLoader2["default"])(context).create({
                            dashMetrics: dashMetrics,
                            mediaPlayerModel: mediaPlayerModel,
                            errHandler: errHandler,
                            requestModifier: (0, _utilsRequestModifier2["default"])(context).getInstance(),
                            settings: config.settings
                        })
                    });
                    fragmentModels[type] = model;
                }
                return model;
            }
            function isInitializationRequest(request) {
                return request && request.type && request.type === _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;
            }
            function resetInitialSettings() {
                for (var model in fragmentModels) {
                    fragmentModels[model].reset();
                }
                fragmentModels = {};
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);
                resetInitialSettings();
            }
            function createDataChunk(bytes, request, streamId, endFragment) {
                var chunk = new _voDataChunk2["default"]();
                chunk.streamId = streamId;
                chunk.mediaInfo = request.mediaInfo;
                chunk.segmentType = request.type;
                chunk.start = request.startTime;
                chunk.duration = request.duration;
                chunk.end = chunk.start + chunk.duration;
                chunk.bytes = bytes;
                chunk.index = request.index;
                chunk.quality = request.quality;
                chunk.representationId = request.representationId;
                chunk.endFragment = endFragment;
                return chunk;
            }
            function onFragmentLoadingCompleted(e) {
                if (fragmentModels[e.request.mediaType] !== e.sender) {
                    return;
                }
                var request = e.request;
                var bytes = e.response;
                var isInit = isInitializationRequest(request);
                var streamInfo = request.mediaInfo.streamInfo;
                if (e.error) {
                    if (e.request.mediaType === _constantsConstants2["default"].AUDIO || e.request.mediaType === _constantsConstants2["default"].VIDEO || e.request.mediaType === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                        eventBus.trigger(_coreEventsEvents2["default"].SERVICE_LOCATION_BLACKLIST_ADD, {
                            entry: e.request.serviceLocation
                        });
                    }
                }
                if (!bytes || !streamInfo) {
                    logger.warn("No " + request.mediaType + " bytes to push or stream is inactive.");
                    return;
                }
                var chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== _coreEventsEvents2["default"].FRAGMENT_LOADING_PROGRESS);
                eventBus.trigger(isInit ? _coreEventsEvents2["default"].INIT_FRAGMENT_LOADED : _coreEventsEvents2["default"].MEDIA_FRAGMENT_LOADED, {
                    chunk: chunk,
                    fragmentModel: e.sender
                });
            }
            instance = {
                getModel: getModel,
                isInitializationRequest: isInitializationRequest,
                reset: reset
            };
            setup();
            return instance;
        }
        FragmentController.__dashjs_factory_name = "FragmentController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(FragmentController);
        module.exports = exports["default"];
    }, {
        107: 107,
        147: 147,
        213: 213,
        222: 222,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        55: 55,
        96: 96
    } ],
    116: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var TRACK_SWITCH_MODE_NEVER_REPLACE = "neverReplace";
        var TRACK_SWITCH_MODE_ALWAYS_REPLACE = "alwaysReplace";
        var TRACK_SELECTION_MODE_HIGHEST_BITRATE = "highestBitrate";
        var TRACK_SELECTION_MODE_WIDEST_RANGE = "widestRange";
        var DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;
        function MediaController() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, tracks = undefined, initialSettings = undefined, selectionMode = undefined, switchMode = undefined, domStorage = undefined;
            var validTrackSwitchModes = [ TRACK_SWITCH_MODE_ALWAYS_REPLACE, TRACK_SWITCH_MODE_NEVER_REPLACE ];
            var validTrackSelectionModes = [ TRACK_SELECTION_MODE_HIGHEST_BITRATE, TRACK_SELECTION_MODE_WIDEST_RANGE ];
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                reset();
            }
            function checkInitialMediaSettingsForType(type, streamInfo) {
                var settings = getInitialSettings(type);
                var tracksForType = getTracksFor(type, streamInfo);
                var tracks = [];
                if (type === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    setTrack(tracksForType[0]);
                    return;
                }
                if (!settings) {
                    settings = domStorage.getSavedMediaSettings(type);
                    setInitialSettings(type, settings);
                }
                if (!tracksForType || tracksForType.length === 0) return;
                if (settings) {
                    tracksForType.forEach(function(track) {
                        if (matchSettings(settings, track)) {
                            tracks.push(track);
                        }
                    });
                }
                if (tracks.length === 0) {
                    setTrack(selectInitialTrack(tracksForType));
                } else {
                    if (tracks.length > 1) {
                        setTrack(selectInitialTrack(tracks));
                    } else {
                        setTrack(tracks[0]);
                    }
                }
            }
            function addTrack(track) {
                if (!track) return;
                var mediaType = track.type;
                if (!isMultiTrackSupportedByType(mediaType)) return;
                var streamId = track.streamInfo.id;
                if (!tracks[streamId]) {
                    tracks[streamId] = createTrackInfo();
                }
                var mediaTracks = tracks[streamId][mediaType].list;
                for (var i = 0, len = mediaTracks.length; i < len; ++i) {
                    if (isTracksEqual(mediaTracks[i], track)) {
                        return;
                    }
                }
                mediaTracks.push(track);
                var initSettings = getInitialSettings(mediaType);
                if (initSettings && matchSettings(initSettings, track) && !getCurrentTrackFor(mediaType, track.streamInfo)) {
                    setTrack(track);
                }
            }
            function getTracksFor(type, streamInfo) {
                if (!type || !streamInfo) return [];
                var id = streamInfo.id;
                if (!tracks[id] || !tracks[id][type]) return [];
                return tracks[id][type].list;
            }
            function getCurrentTrackFor(type, streamInfo) {
                if (!type || !streamInfo || streamInfo && !tracks[streamInfo.id]) return null;
                return tracks[streamInfo.id][type].current;
            }
            function isCurrentTrack(track) {
                if (!track) {
                    return false;
                }
                var type = track.type;
                var id = track.streamInfo.id;
                return tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track);
            }
            function setTrack(track) {
                if (!track || !track.streamInfo) return;
                var type = track.type;
                var streamInfo = track.streamInfo;
                var id = streamInfo.id;
                var current = getCurrentTrackFor(type, streamInfo);
                if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;
                tracks[id][type].current = track;
                if (tracks[id][type].current) {
                    eventBus.trigger(_coreEventsEvents2["default"].CURRENT_TRACK_CHANGED, {
                        oldMediaInfo: current,
                        newMediaInfo: track,
                        switchMode: switchMode[type]
                    });
                }
                var settings = extractSettings(track);
                if (!settings || !tracks[id][type].storeLastSettings) return;
                if (settings.roles) {
                    settings.role = settings.roles[0];
                    delete settings.roles;
                }
                if (settings.accessibility) {
                    settings.accessibility = settings.accessibility[0];
                }
                if (settings.audioChannelConfiguration) {
                    settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];
                }
                domStorage.setSavedMediaSettings(type, settings);
            }
            function setInitialSettings(type, value) {
                if (!type || !value) return;
                initialSettings[type] = value;
            }
            function getInitialSettings(type) {
                if (!type) return null;
                return initialSettings[type];
            }
            function setSwitchMode(type, mode) {
                var isModeSupported = validTrackSwitchModes.indexOf(mode) !== -1;
                if (!isModeSupported) {
                    logger.warn("Track switch mode is not supported: " + mode);
                    return;
                }
                switchMode[type] = mode;
            }
            function getSwitchMode(type) {
                return switchMode[type];
            }
            function setSelectionModeForInitialTrack(mode) {
                var isModeSupported = validTrackSelectionModes.indexOf(mode) !== -1;
                if (!isModeSupported) {
                    logger.warn("Track selection mode is not supported: " + mode);
                    return;
                }
                selectionMode = mode;
            }
            function getSelectionModeForInitialTrack() {
                return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;
            }
            function isMultiTrackSupportedByType(type) {
                return type === _constantsConstants2["default"].AUDIO || type === _constantsConstants2["default"].VIDEO || type === _constantsConstants2["default"].TEXT || type === _constantsConstants2["default"].FRAGMENTED_TEXT || type === _constantsConstants2["default"].IMAGE;
            }
            function isTracksEqual(t1, t2) {
                if (!t1 && !t2) {
                    return true;
                }
                if (!t1 || !t2) {
                    return false;
                }
                var sameId = t1.id === t2.id;
                var sameViewpoint = t1.viewpoint === t2.viewpoint;
                var sameLang = t1.lang === t2.lang;
                var sameRoles = t1.roles.toString() === t2.roles.toString();
                var sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();
                var sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();
                return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration;
            }
            function setConfig(config) {
                if (!config) return;
                if (config.domStorage) {
                    domStorage = config.domStorage;
                }
            }
            function reset() {
                tracks = {};
                resetInitialSettings();
                resetSwitchMode();
            }
            function extractSettings(mediaInfo) {
                var settings = {
                    lang: mediaInfo.lang,
                    viewpoint: mediaInfo.viewpoint,
                    roles: mediaInfo.roles,
                    accessibility: mediaInfo.accessibility,
                    audioChannelConfiguration: mediaInfo.audioChannelConfiguration
                };
                var notEmpty = settings.lang || settings.viewpoint || settings.role && settings.role.length > 0 || settings.accessibility && settings.accessibility.length > 0 || settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0;
                return notEmpty ? settings : null;
            }
            function matchSettings(settings, track) {
                var matchLang = !settings.lang || settings.lang === track.lang;
                var matchViewPoint = !settings.viewpoint || settings.viewpoint === track.viewpoint;
                var matchRole = !settings.role || !!track.roles.filter(function(item) {
                    return item === settings.role;
                })[0];
                var matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function(item) {
                    return item === settings.accessibility;
                })[0];
                var matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function(item) {
                    return item === settings.audioChannelConfiguration;
                })[0];
                return matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration;
            }
            function resetSwitchMode() {
                switchMode = {
                    audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,
                    video: TRACK_SWITCH_MODE_NEVER_REPLACE
                };
            }
            function resetInitialSettings() {
                initialSettings = {
                    audio: null,
                    video: null
                };
            }
            function selectInitialTrack(tracks) {
                var mode = getSelectionModeForInitialTrack();
                var tmpArr = [];
                var getTracksWithHighestBitrate = function getTracksWithHighestBitrate(trackArr) {
                    var max = 0;
                    var result = [];
                    var tmp = undefined;
                    trackArr.forEach(function(track) {
                        tmp = Math.max.apply(Math, track.bitrateList.map(function(obj) {
                            return obj.bandwidth;
                        }));
                        if (tmp > max) {
                            max = tmp;
                            result = [ track ];
                        } else if (tmp === max) {
                            result.push(track);
                        }
                    });
                    return result;
                };
                var getTracksWithWidestRange = function getTracksWithWidestRange(trackArr) {
                    var max = 0;
                    var result = [];
                    var tmp = undefined;
                    trackArr.forEach(function(track) {
                        tmp = track.representationCount;
                        if (tmp > max) {
                            max = tmp;
                            result = [ track ];
                        } else if (tmp === max) {
                            result.push(track);
                        }
                    });
                    return result;
                };
                switch (mode) {
                  case TRACK_SELECTION_MODE_HIGHEST_BITRATE:
                    tmpArr = getTracksWithHighestBitrate(tracks);
                    if (tmpArr.length > 1) {
                        tmpArr = getTracksWithWidestRange(tmpArr);
                    }
                    break;

                  case TRACK_SELECTION_MODE_WIDEST_RANGE:
                    tmpArr = getTracksWithWidestRange(tracks);
                    if (tmpArr.length > 1) {
                        tmpArr = getTracksWithHighestBitrate(tracks);
                    }
                    break;

                  default:
                    logger.warn("Track selection mode is not supported: " + mode);
                    break;
                }
                return tmpArr[0];
            }
            function createTrackInfo() {
                return {
                    audio: {
                        list: [],
                        storeLastSettings: true,
                        current: null
                    },
                    video: {
                        list: [],
                        storeLastSettings: true,
                        current: null
                    },
                    text: {
                        list: [],
                        storeLastSettings: true,
                        current: null
                    },
                    fragmentedText: {
                        list: [],
                        storeLastSettings: true,
                        current: null
                    },
                    image: {
                        list: [],
                        storeLastSettings: true,
                        current: null
                    }
                };
            }
            instance = {
                checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,
                addTrack: addTrack,
                getTracksFor: getTracksFor,
                getCurrentTrackFor: getCurrentTrackFor,
                isCurrentTrack: isCurrentTrack,
                setTrack: setTrack,
                setInitialSettings: setInitialSettings,
                getInitialSettings: getInitialSettings,
                setSwitchMode: setSwitchMode,
                getSwitchMode: getSwitchMode,
                setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
                getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
                isMultiTrackSupportedByType: isMultiTrackSupportedByType,
                isTracksEqual: isTracksEqual,
                setConfig: setConfig,
                reset: reset
            };
            setup();
            return instance;
        }
        MediaController.__dashjs_factory_name = "MediaController";
        var factory = _coreFactoryMaker2["default"].getSingletonFactory(MediaController);
        factory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;
        factory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;
        factory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;
        factory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;
        factory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;
        _coreFactoryMaker2["default"].updateSingletonFactory(MediaController.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        107: 107,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    117: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        function MediaSourceController() {
            var instance = undefined, logger = undefined;
            var context = this.context;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function createMediaSource() {
                var hasWebKit = "WebKitMediaSource" in window;
                var hasMediaSource = "MediaSource" in window;
                if (hasMediaSource) {
                    return new MediaSource();
                } else if (hasWebKit) {
                    return new WebKitMediaSource();
                }
                return null;
            }
            function attachMediaSource(source, videoModel) {
                var objectURL = window.URL.createObjectURL(source);
                videoModel.setSource(objectURL);
                return objectURL;
            }
            function detachMediaSource(videoModel) {
                videoModel.setSource(null);
            }
            function setDuration(source, value) {
                if (source.duration != value) source.duration = value;
                return source.duration;
            }
            function setSeekable(source, start, end) {
                if (source && typeof source.setLiveSeekableRange === "function" && typeof source.clearLiveSeekableRange === "function" && source.readyState === "open" && start >= 0 && start < end) {
                    source.clearLiveSeekableRange();
                    source.setLiveSeekableRange(start, end);
                }
            }
            function signalEndOfStream(source) {
                var buffers = source.sourceBuffers;
                var ln = buffers.length;
                if (source.readyState !== "open") {
                    return;
                }
                for (var i = 0; i < ln; i++) {
                    if (buffers[i].updating) {
                        return;
                    }
                    if (buffers[i].buffered.length === 0) {
                        return;
                    }
                }
                logger.info("call to mediaSource endOfStream");
                source.endOfStream();
            }
            instance = {
                createMediaSource: createMediaSource,
                attachMediaSource: attachMediaSource,
                detachMediaSource: detachMediaSource,
                setDuration: setDuration,
                setSeekable: setSeekable,
                signalEndOfStream: signalEndOfStream
            };
            setup();
            return instance;
        }
        MediaSourceController.__dashjs_factory_name = "MediaSourceController";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(MediaSourceController);
        module.exports = exports["default"];
    }, {
        46: 46,
        48: 48
    } ],
    118: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _BufferController = _dereq_(113);
        var _BufferController2 = _interopRequireDefault(_BufferController);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS = 500;
        function PlaybackController() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, streamController = undefined, dashMetrics = undefined, adapter = undefined, videoModel = undefined, timelineConverter = undefined, liveStartTime = undefined, wallclockTimeIntervalId = undefined, commonEarliestTime = undefined, liveDelay = undefined, bufferedRange = undefined, streamInfo = undefined, isDynamic = undefined, mediaPlayerModel = undefined, playOnceInitialized = undefined, lastLivePlaybackTime = undefined, availabilityStartTime = undefined, compatibleWithPreviousStream = undefined, isLowLatencySeekingInProgress = undefined, playbackStalled = undefined, minPlaybackRateChange = undefined, uriFragmentModel = undefined, settings = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                reset();
            }
            function initialize(StreamInfo, compatible) {
                streamInfo = StreamInfo;
                addAllListeners();
                isDynamic = streamInfo.manifestInfo.isDynamic;
                isLowLatencySeekingInProgress = false;
                playbackStalled = false;
                liveStartTime = streamInfo.start;
                compatibleWithPreviousStream = compatible;
                var ua = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase() : "";
                var isSafari = /safari/.test(ua) && !/chrome/.test(ua);
                minPlaybackRateChange = isSafari ? .25 : .02;
                eventBus.on(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
                eventBus.on(_coreEventsEvents2["default"].LOADING_PROGRESS, onFragmentLoadProgress, this);
                eventBus.on(_coreEventsEvents2["default"].BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
                eventBus.on(_coreEventsEvents2["default"].PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_PROGRESS, onPlaybackProgression, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_ENDED, onPlaybackEnded, this);
                if (playOnceInitialized) {
                    playOnceInitialized = false;
                    play();
                }
            }
            function onPeriodSwitchStarted(e) {
                if (!isDynamic && e.fromStreamInfo && commonEarliestTime[e.fromStreamInfo.id] !== undefined) {
                    delete bufferedRange[e.fromStreamInfo.id];
                    delete commonEarliestTime[e.fromStreamInfo.id];
                }
            }
            function getTimeToStreamEnd() {
                return parseFloat((getStreamEndTime() - getTime()).toFixed(5));
            }
            function getStreamEndTime() {
                var startTime = getStreamStartTime(true);
                var offset = isDynamic && streamInfo ? startTime - streamInfo.start : 0;
                return startTime + (streamInfo ? streamInfo.duration - offset : offset);
            }
            function play() {
                if (streamInfo && videoModel && videoModel.getElement()) {
                    videoModel.play();
                } else {
                    playOnceInitialized = true;
                }
            }
            function isPaused() {
                return streamInfo && videoModel ? videoModel.isPaused() : null;
            }
            function pause() {
                if (streamInfo && videoModel) {
                    videoModel.pause();
                }
            }
            function isSeeking() {
                return streamInfo && videoModel ? videoModel.isSeeking() : null;
            }
            function seek(time, stickToBuffered, internalSeek) {
                if (streamInfo && videoModel) {
                    if (internalSeek === true) {
                        if (time !== videoModel.getTime()) {
                            videoModel.removeEventListener("seeking", onPlaybackSeeking);
                            logger.info("Requesting seek to time: " + time);
                            videoModel.setCurrentTime(time, stickToBuffered);
                        }
                    } else {
                        eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_SEEK_ASKED);
                        logger.info("Requesting seek to time: " + time);
                        videoModel.setCurrentTime(time, stickToBuffered);
                    }
                }
            }
            function seekToLive() {
                var DVRMetrics = dashMetrics.getCurrentDVRInfo();
                var DVRWindow = DVRMetrics ? DVRMetrics.range : null;
                seek(DVRWindow.end - mediaPlayerModel.getLiveDelay(), true, false);
            }
            function getTime() {
                return streamInfo && videoModel ? videoModel.getTime() : null;
            }
            function getNormalizedTime() {
                var t = getTime();
                if (isDynamic && !isNaN(availabilityStartTime)) {
                    var timeOffset = availabilityStartTime / 1e3;
                    if (t > timeOffset) {
                        t -= timeOffset;
                    }
                }
                return t;
            }
            function getPlaybackRate() {
                return streamInfo && videoModel ? videoModel.getPlaybackRate() : null;
            }
            function getPlayedRanges() {
                return streamInfo && videoModel ? videoModel.getPlayedRanges() : null;
            }
            function getEnded() {
                return streamInfo && videoModel ? videoModel.getEnded() : null;
            }
            function getIsDynamic() {
                return isDynamic;
            }
            function getStreamController() {
                return streamController;
            }
            function setLiveStartTime(value) {
                liveStartTime = value;
            }
            function getLiveStartTime() {
                return liveStartTime;
            }
            function computeLiveDelay(fragmentDuration, dvrWindowSize) {
                var delay = undefined, ret = undefined, startTime = undefined;
                var END_OF_PLAYLIST_PADDING = 10;
                var suggestedPresentationDelay = adapter.getSuggestedPresentationDelay();
                if (settings.get().streaming.useSuggestedPresentationDelay && suggestedPresentationDelay !== null) {
                    delay = suggestedPresentationDelay;
                } else if (settings.get().streaming.lowLatencyEnabled) {
                    delay = 0;
                } else if (mediaPlayerModel.getLiveDelay()) {
                    delay = mediaPlayerModel.getLiveDelay();
                } else if (!isNaN(fragmentDuration)) {
                    delay = fragmentDuration * settings.get().streaming.liveDelayFragmentCount;
                } else {
                    delay = streamInfo.manifestInfo.minBufferTime * 2;
                }
                startTime = adapter.getAvailabilityStartTime();
                if (startTime !== null) {
                    availabilityStartTime = startTime;
                }
                if (dvrWindowSize > 0) {
                    var targetDelayCapping = Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING, dvrWindowSize / 2);
                    ret = Math.min(delay, targetDelayCapping);
                } else {
                    ret = delay;
                }
                liveDelay = ret;
                return ret;
            }
            function getLiveDelay() {
                return liveDelay;
            }
            function getCurrentLiveLatency() {
                if (!isDynamic || isNaN(availabilityStartTime)) {
                    return NaN;
                }
                var currentTime = getNormalizedTime();
                if (isNaN(currentTime) || currentTime === 0) {
                    return 0;
                }
                var now = new Date().getTime() + timelineConverter.getClientTimeOffset() * 1e3;
                return Math.max(((now - availabilityStartTime - currentTime * 1e3) / 1e3).toFixed(3), 0);
            }
            function reset() {
                liveStartTime = NaN;
                playOnceInitialized = false;
                commonEarliestTime = {};
                liveDelay = 0;
                availabilityStartTime = 0;
                bufferedRange = {};
                if (videoModel) {
                    eventBus.off(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
                    eventBus.off(_coreEventsEvents2["default"].BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
                    eventBus.off(_coreEventsEvents2["default"].BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
                    eventBus.off(_coreEventsEvents2["default"].LOADING_PROGRESS, onFragmentLoadProgress, this);
                    eventBus.off(_coreEventsEvents2["default"].PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);
                    eventBus.off(_coreEventsEvents2["default"].PLAYBACK_PROGRESS, onPlaybackProgression, this);
                    eventBus.off(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
                    eventBus.off(_coreEventsEvents2["default"].PLAYBACK_ENDED, onPlaybackEnded, this);
                    stopUpdatingWallclockTime();
                    removeAllListeners();
                }
                wallclockTimeIntervalId = null;
                videoModel = null;
                streamInfo = null;
                isDynamic = null;
            }
            function setConfig(config) {
                if (!config) return;
                if (config.streamController) {
                    streamController = config.streamController;
                }
                if (config.dashMetrics) {
                    dashMetrics = config.dashMetrics;
                }
                if (config.mediaPlayerModel) {
                    mediaPlayerModel = config.mediaPlayerModel;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
                if (config.videoModel) {
                    videoModel = config.videoModel;
                }
                if (config.timelineConverter) {
                    timelineConverter = config.timelineConverter;
                }
                if (config.uriFragmentModel) {
                    uriFragmentModel = config.uriFragmentModel;
                }
                if (config.settings) {
                    settings = config.settings;
                }
            }
            function getStartTimeFromUriParameters() {
                var fragData = uriFragmentModel.getURIFragmentData();
                var uriParameters = undefined;
                if (fragData) {
                    uriParameters = {};
                    var r = parseInt(fragData.r, 10);
                    if (r >= 0 && streamInfo && r < streamInfo.manifestInfo.DVRWindowSize && fragData.t === null) {
                        fragData.t = Math.max(Math.floor(Date.now() / 1e3) - streamInfo.manifestInfo.DVRWindowSize, streamInfo.manifestInfo.availableFrom.getTime() / 1e3 + streamInfo.start) + r;
                    }
                    uriParameters.fragS = parseFloat(fragData.s);
                    uriParameters.fragT = parseFloat(fragData.t);
                }
                return uriParameters;
            }
            function getStreamStartTime(ignoreStartOffset, liveEdge) {
                var presentationStartTime = undefined;
                var startTimeOffset = NaN;
                if (!ignoreStartOffset) {
                    var uriParameters = getStartTimeFromUriParameters();
                    if (uriParameters) {
                        startTimeOffset = !isNaN(uriParameters.fragS) ? uriParameters.fragS : uriParameters.fragT;
                    } else {
                        startTimeOffset = 0;
                    }
                } else {
                    startTimeOffset = streamInfo ? streamInfo.start : startTimeOffset;
                }
                if (isDynamic) {
                    if (!isNaN(startTimeOffset) && streamInfo) {
                        presentationStartTime = startTimeOffset - streamInfo.manifestInfo.availableFrom.getTime() / 1e3;
                        if (presentationStartTime > liveStartTime || presentationStartTime < (!isNaN(liveEdge) ? liveEdge - streamInfo.manifestInfo.DVRWindowSize : NaN)) {
                            presentationStartTime = null;
                        }
                    }
                    presentationStartTime = presentationStartTime || liveStartTime;
                } else {
                    if (streamInfo) {
                        if (!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration, streamInfo.duration) && startTimeOffset >= 0) {
                            presentationStartTime = startTimeOffset;
                        } else {
                            var earliestTime = commonEarliestTime[streamInfo.id];
                            presentationStartTime = earliestTime !== undefined ? Math.max(earliestTime.audio !== undefined ? earliestTime.audio : 0, earliestTime.video !== undefined ? earliestTime.video : 0, streamInfo.start) : streamInfo.start;
                        }
                    }
                }
                return presentationStartTime;
            }
            function getActualPresentationTime(currentTime) {
                var DVRMetrics = dashMetrics.getCurrentDVRInfo();
                var DVRWindow = DVRMetrics ? DVRMetrics.range : null;
                var actualTime = undefined;
                if (!DVRWindow) return NaN;
                if (currentTime > DVRWindow.end) {
                    actualTime = Math.max(DVRWindow.end - streamInfo.manifestInfo.minBufferTime * 2, DVRWindow.start);
                } else if (currentTime + .25 < DVRWindow.start) {
                    actualTime = DVRWindow.start;
                } else {
                    return currentTime;
                }
                return actualTime;
            }
            function startUpdatingWallclockTime() {
                if (wallclockTimeIntervalId !== null) return;
                var tick = function tick() {
                    onWallclockTime();
                };
                wallclockTimeIntervalId = setInterval(tick, settings.get().streaming.wallclockTimeUpdateInterval);
            }
            function stopUpdatingWallclockTime() {
                clearInterval(wallclockTimeIntervalId);
                wallclockTimeIntervalId = null;
            }
            function updateCurrentTime() {
                if (isPaused() || !isDynamic || videoModel.getReadyState() === 0) return;
                var currentTime = getNormalizedTime();
                var actualTime = getActualPresentationTime(currentTime);
                var timeChanged = !isNaN(actualTime) && actualTime !== currentTime;
                if (timeChanged) {
                    seek(actualTime);
                }
            }
            function onDataUpdateCompleted(e) {
                if (e.error) return;
                var representationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);
                var info = representationInfo.mediaInfo.streamInfo;
                if (streamInfo.id !== info.id) return;
                streamInfo = info;
                updateCurrentTime();
            }
            function onCanPlay() {
                eventBus.trigger(_coreEventsEvents2["default"].CAN_PLAY);
            }
            function onPlaybackStart() {
                logger.info("Native video element event: play");
                updateCurrentTime();
                startUpdatingWallclockTime();
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_STARTED, {
                    startTime: getTime()
                });
            }
            function onPlaybackWaiting() {
                logger.info("Native video element event: waiting");
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_WAITING, {
                    playingTime: getTime()
                });
            }
            function onPlaybackPlaying() {
                logger.info("Native video element event: playing");
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_PLAYING, {
                    playingTime: getTime()
                });
            }
            function onPlaybackPaused() {
                logger.info("Native video element event: pause");
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_PAUSED, {
                    ended: getEnded()
                });
            }
            function onPlaybackSeeking() {
                var seekTime = getTime();
                logger.info("Seeking to: " + seekTime);
                startUpdatingWallclockTime();
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_SEEKING, {
                    seekTime: seekTime
                });
            }
            function onPlaybackSeeked() {
                logger.info("Native video element event: seeked");
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_SEEKED);
                videoModel.addEventListener("seeking", onPlaybackSeeking);
            }
            function onPlaybackTimeUpdated() {
                if (streamInfo) {
                    eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, {
                        timeToEnd: getTimeToStreamEnd(),
                        time: getTime()
                    });
                }
            }
            function updateLivePlaybackTime() {
                var now = Date.now();
                if (!lastLivePlaybackTime || now > lastLivePlaybackTime + LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS) {
                    lastLivePlaybackTime = now;
                    onPlaybackTimeUpdated();
                }
            }
            function onPlaybackProgress() {
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_PROGRESS);
            }
            function onPlaybackRateChanged() {
                var rate = getPlaybackRate();
                logger.info("Native video element event: ratechange: ", rate);
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_RATE_CHANGED, {
                    playbackRate: rate
                });
            }
            function onPlaybackMetaDataLoaded() {
                logger.info("Native video element event: loadedmetadata");
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_METADATA_LOADED);
                startUpdatingWallclockTime();
            }
            function onNativePlaybackEnded() {
                logger.info("Native video element event: ended");
                pause();
                stopUpdatingWallclockTime();
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_ENDED, {
                    isLast: streamController.getActiveStreamInfo().isLast
                });
            }
            function onPlaybackEnded(e) {
                if (wallclockTimeIntervalId && e.isLast) {
                    logger.info("onPlaybackEnded -- PLAYBACK_ENDED but native video element didn't fire ended");
                    videoModel.setCurrentTime(getStreamEndTime());
                    pause();
                    stopUpdatingWallclockTime();
                }
            }
            function onPlaybackError(event) {
                var target = event.target || event.srcElement;
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_ERROR, {
                    error: target.error
                });
            }
            function onWallclockTime() {
                eventBus.trigger(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, {
                    isDynamic: isDynamic,
                    time: new Date()
                });
                if (getIsDynamic() && isPaused()) {
                    updateLivePlaybackTime();
                }
            }
            function checkTimeInRanges(time, ranges) {
                if (ranges && ranges.length > 0) {
                    for (var i = 0, len = ranges.length; i < len; i++) {
                        if (time >= ranges.start(i) && time < ranges.end(i)) {
                            return true;
                        }
                    }
                }
                return false;
            }
            function onPlaybackProgression() {
                if (isDynamic && settings.get().streaming.lowLatencyEnabled && settings.get().streaming.lowLatencyEnabled > 0 && !isPaused() && !isSeeking()) {
                    if (needToCatchUp()) {
                        startPlaybackCatchUp();
                    } else {
                        stopPlaybackCatchUp();
                    }
                }
            }
            function getBufferLevel() {
                var bufferLevel = null;
                streamController.getActiveStreamProcessors().forEach(function(p) {
                    var bl = p.getBufferLevel();
                    if (bufferLevel === null) {
                        bufferLevel = bl;
                    } else {
                        bufferLevel = Math.min(bufferLevel, bl);
                    }
                });
                return bufferLevel;
            }
            function needToCatchUp() {
                return settings.get().streaming.liveCatchUpPlaybackRate > 0 && getTime() > 0 && Math.abs(getCurrentLiveLatency() - mediaPlayerModel.getLiveDelay()) > settings.get().streaming.liveCatchUpMinDrift;
            }
            function startPlaybackCatchUp() {
                if (videoModel) {
                    var cpr = settings.get().streaming.liveCatchUpPlaybackRate;
                    var _liveDelay = mediaPlayerModel.getLiveDelay();
                    var deltaLatency = getCurrentLiveLatency() - _liveDelay;
                    var d = deltaLatency * 5;
                    var s = cpr * 2 / (1 + Math.pow(Math.E, -d));
                    var newRate = 1 - cpr + s;
                    if (playbackStalled) {
                        var bufferLevel = getBufferLevel();
                        if (bufferLevel > _liveDelay / 2) {
                            playbackStalled = false;
                        } else if (deltaLatency > 0) {
                            newRate = 1;
                        }
                    }
                    if (Math.abs(videoModel.getPlaybackRate() - newRate) > minPlaybackRateChange) {
                        videoModel.setPlaybackRate(newRate);
                    }
                    if (settings.get().streaming.liveCatchUpMaxDrift > 0 && !isLowLatencySeekingInProgress && deltaLatency > settings.get().streaming.liveCatchUpMaxDrift) {
                        logger.info("Low Latency catchup mechanism. Latency too high, doing a seek to live point");
                        isLowLatencySeekingInProgress = true;
                        seekToLive();
                    } else {
                        isLowLatencySeekingInProgress = false;
                    }
                }
            }
            function stopPlaybackCatchUp() {
                if (videoModel) {
                    videoModel.setPlaybackRate(1);
                }
            }
            function onBytesAppended(e) {
                var earliestTime = undefined, initialStartTime = undefined;
                var ranges = e.bufferedRanges;
                if (!ranges || !ranges.length) return;
                if (commonEarliestTime[streamInfo.id] && commonEarliestTime[streamInfo.id].started === true) {
                    return;
                }
                var type = e.sender.getType();
                if (bufferedRange[streamInfo.id] === undefined) {
                    bufferedRange[streamInfo.id] = [];
                }
                bufferedRange[streamInfo.id][type] = ranges;
                if (commonEarliestTime[streamInfo.id] === undefined) {
                    commonEarliestTime[streamInfo.id] = [];
                    commonEarliestTime[streamInfo.id].started = false;
                }
                if (commonEarliestTime[streamInfo.id][type] === undefined) {
                    commonEarliestTime[streamInfo.id][type] = Math.max(ranges.start(0), streamInfo.start);
                }
                var hasVideoTrack = streamController.isTrackTypePresent(_constantsConstants2["default"].VIDEO);
                var hasAudioTrack = streamController.isTrackTypePresent(_constantsConstants2["default"].AUDIO);
                initialStartTime = getStreamStartTime(false);
                if (hasAudioTrack && hasVideoTrack) {
                    if (!isNaN(commonEarliestTime[streamInfo.id].audio) && !isNaN(commonEarliestTime[streamInfo.id].video)) {
                        if (commonEarliestTime[streamInfo.id].audio < commonEarliestTime[streamInfo.id].video) {
                            earliestTime = commonEarliestTime[streamInfo.id].video > initialStartTime ? commonEarliestTime[streamInfo.id].video : initialStartTime;
                            ranges = bufferedRange[streamInfo.id].audio;
                        } else {
                            earliestTime = commonEarliestTime[streamInfo.id].audio > initialStartTime ? commonEarliestTime[streamInfo.id].audio : initialStartTime;
                            ranges = bufferedRange[streamInfo.id].video;
                        }
                        if (checkTimeInRanges(earliestTime, ranges)) {
                            if (!isSeeking() && !compatibleWithPreviousStream && earliestTime !== 0) {
                                seek(earliestTime, true, true);
                            }
                            commonEarliestTime[streamInfo.id].started = true;
                        }
                    }
                } else {
                    if (commonEarliestTime[streamInfo.id][type]) {
                        earliestTime = commonEarliestTime[streamInfo.id][type] > initialStartTime ? commonEarliestTime[streamInfo.id][type] : initialStartTime;
                        if (!isSeeking() && !compatibleWithPreviousStream) {
                            seek(earliestTime, false, true);
                        }
                        commonEarliestTime[streamInfo.id].started = true;
                    }
                }
            }
            function onFragmentLoadProgress(e) {
                if (e.stream === false && settings.get().streaming.lowLatencyEnabled && !isNaN(e.request.duration)) {
                    var minDelay = 1.2 * e.request.duration;
                    if (minDelay > mediaPlayerModel.getLiveDelay()) {
                        logger.warn("Browser does not support fetch API with StreamReader. Increasing live delay to be 20% higher than segment duration:", minDelay.toFixed(2));
                        var s = {
                            streaming: {
                                liveDelay: minDelay
                            }
                        };
                        settings.update(s);
                    }
                }
            }
            function onBufferLevelStateChanged(e) {
                if (e.streamInfo.id !== streamInfo.id) return;
                if (settings.get().streaming.lowLatencyEnabled) {
                    if (e.state === _BufferController2["default"].BUFFER_EMPTY && !isSeeking()) {
                        if (!playbackStalled) {
                            playbackStalled = true;
                            stopPlaybackCatchUp();
                        }
                    }
                } else {
                    videoModel.setStallState(e.mediaType, e.state === _BufferController2["default"].BUFFER_EMPTY);
                }
            }
            function onPlaybackStalled(e) {
                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_STALLED, {
                    e: e
                });
            }
            function addAllListeners() {
                videoModel.addEventListener("canplay", onCanPlay);
                videoModel.addEventListener("play", onPlaybackStart);
                videoModel.addEventListener("waiting", onPlaybackWaiting);
                videoModel.addEventListener("playing", onPlaybackPlaying);
                videoModel.addEventListener("pause", onPlaybackPaused);
                videoModel.addEventListener("error", onPlaybackError);
                videoModel.addEventListener("seeking", onPlaybackSeeking);
                videoModel.addEventListener("seeked", onPlaybackSeeked);
                videoModel.addEventListener("timeupdate", onPlaybackTimeUpdated);
                videoModel.addEventListener("progress", onPlaybackProgress);
                videoModel.addEventListener("ratechange", onPlaybackRateChanged);
                videoModel.addEventListener("loadedmetadata", onPlaybackMetaDataLoaded);
                videoModel.addEventListener("stalled", onPlaybackStalled);
                videoModel.addEventListener("ended", onNativePlaybackEnded);
            }
            function removeAllListeners() {
                videoModel.removeEventListener("canplay", onCanPlay);
                videoModel.removeEventListener("play", onPlaybackStart);
                videoModel.removeEventListener("waiting", onPlaybackWaiting);
                videoModel.removeEventListener("playing", onPlaybackPlaying);
                videoModel.removeEventListener("pause", onPlaybackPaused);
                videoModel.removeEventListener("error", onPlaybackError);
                videoModel.removeEventListener("seeking", onPlaybackSeeking);
                videoModel.removeEventListener("seeked", onPlaybackSeeked);
                videoModel.removeEventListener("timeupdate", onPlaybackTimeUpdated);
                videoModel.removeEventListener("progress", onPlaybackProgress);
                videoModel.removeEventListener("ratechange", onPlaybackRateChanged);
                videoModel.removeEventListener("loadedmetadata", onPlaybackMetaDataLoaded);
                videoModel.removeEventListener("stalled", onPlaybackStalled);
                videoModel.removeEventListener("ended", onNativePlaybackEnded);
            }
            instance = {
                initialize: initialize,
                setConfig: setConfig,
                getStartTimeFromUriParameters: getStartTimeFromUriParameters,
                getStreamStartTime: getStreamStartTime,
                getTimeToStreamEnd: getTimeToStreamEnd,
                getTime: getTime,
                getNormalizedTime: getNormalizedTime,
                getPlaybackRate: getPlaybackRate,
                getPlayedRanges: getPlayedRanges,
                getEnded: getEnded,
                getIsDynamic: getIsDynamic,
                getStreamController: getStreamController,
                setLiveStartTime: setLiveStartTime,
                getLiveStartTime: getLiveStartTime,
                computeLiveDelay: computeLiveDelay,
                getLiveDelay: getLiveDelay,
                getCurrentLiveLatency: getCurrentLiveLatency,
                play: play,
                isPaused: isPaused,
                pause: pause,
                isSeeking: isSeeking,
                seek: seek,
                reset: reset
            };
            setup();
            return instance;
        }
        PlaybackController.__dashjs_factory_name = "PlaybackController";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(PlaybackController);
        module.exports = exports["default"];
    }, {
        107: 107,
        113: 113,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    119: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _voMetricsPlayList = _dereq_(239);
        var _AbrController = _dereq_(110);
        var _AbrController2 = _interopRequireDefault(_AbrController);
        var _BufferController = _dereq_(113);
        var _BufferController2 = _interopRequireDefault(_BufferController);
        var _rulesSchedulingBufferLevelRule = _dereq_(192);
        var _rulesSchedulingBufferLevelRule2 = _interopRequireDefault(_rulesSchedulingBufferLevelRule);
        var _rulesSchedulingNextFragmentRequestRule = _dereq_(193);
        var _rulesSchedulingNextFragmentRequestRule2 = _interopRequireDefault(_rulesSchedulingNextFragmentRequestRule);
        var _modelsFragmentModel = _dereq_(147);
        var _modelsFragmentModel2 = _interopRequireDefault(_modelsFragmentModel);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _MediaController = _dereq_(116);
        var _MediaController2 = _interopRequireDefault(_MediaController);
        function ScheduleController(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var adapter = config.adapter;
            var dashMetrics = config.dashMetrics;
            var timelineConverter = config.timelineConverter;
            var mediaPlayerModel = config.mediaPlayerModel;
            var abrController = config.abrController;
            var playbackController = config.playbackController;
            var streamController = config.streamController;
            var textController = config.textController;
            var type = config.type;
            var streamProcessor = config.streamProcessor;
            var mediaController = config.mediaController;
            var settings = config.settings;
            var instance = undefined, logger = undefined, fragmentModel = undefined, currentRepresentationInfo = undefined, initialRequest = undefined, isStopped = undefined, isFragmentProcessingInProgress = undefined, timeToLoadDelay = undefined, scheduleTimeout = undefined, seekTarget = undefined, bufferLevelRule = undefined, nextFragmentRequestRule = undefined, lastFragmentRequest = undefined, topQualityIndex = undefined, lastInitQuality = undefined, replaceRequestArray = undefined, switchTrack = undefined, bufferResetInProgress = undefined, mediaRequest = undefined, isReplacementRequest = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
            }
            function initialize() {
                fragmentModel = streamProcessor.getFragmentModel();
                bufferLevelRule = (0, _rulesSchedulingBufferLevelRule2["default"])(context).create({
                    abrController: abrController,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    textController: textController,
                    settings: settings
                });
                nextFragmentRequestRule = (0, _rulesSchedulingNextFragmentRequestRule2["default"])(context).create({
                    textController: textController,
                    playbackController: playbackController
                });
                if (adapter.getIsTextTrack(config.mimeType)) {
                    eventBus.on(_coreEventsEvents2["default"].TIMED_TEXT_REQUESTED, onTimedTextRequested, this);
                }
                eventBus.on(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
                eventBus.on(_coreEventsEvents2["default"].DATA_UPDATE_STARTED, onDataUpdateStarted, this);
                eventBus.on(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].STREAM_COMPLETED, onStreamCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].STREAM_INITIALIZED, onStreamInitialized, this);
                eventBus.on(_coreEventsEvents2["default"].BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
                eventBus.on(_coreEventsEvents2["default"].BUFFER_CLEARED, onBufferCleared, this);
                eventBus.on(_coreEventsEvents2["default"].BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
                eventBus.on(_coreEventsEvents2["default"].INIT_REQUESTED, onInitRequested, this);
                eventBus.on(_coreEventsEvents2["default"].QUOTA_EXCEEDED, onQuotaExceeded, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_STARTED, onPlaybackStarted, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
                eventBus.on(_coreEventsEvents2["default"].URL_RESOLUTION_FAILED, onURLResolutionFailed, this);
                eventBus.on(_coreEventsEvents2["default"].FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);
            }
            function isStarted() {
                return isStopped === false;
            }
            function start() {
                if (!currentRepresentationInfo || streamProcessor.isBufferingCompleted()) {
                    logger.warn("Start denied to Schedule Controller");
                    return;
                }
                logger.debug("Schedule Controller starts");
                createPlaylistTraceMetrics();
                isStopped = false;
                if (initialRequest) {
                    initialRequest = false;
                }
                startScheduleTimer(0);
            }
            function stop() {
                if (isStopped) {
                    return;
                }
                logger.debug("Schedule Controller stops");
                isStopped = true;
                clearTimeout(scheduleTimeout);
            }
            function hasTopQualityChanged(type, id) {
                topQualityIndex[id] = topQualityIndex[id] || {};
                var newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);
                if (topQualityIndex[id][type] != newTopQualityIndex) {
                    logger.info("Top quality " + type + " index has changed from " + topQualityIndex[id][type] + " to " + newTopQualityIndex);
                    topQualityIndex[id][type] = newTopQualityIndex;
                    return true;
                }
                return false;
            }
            function schedule() {
                var bufferController = streamProcessor.getBufferController();
                if (isStopped || isFragmentProcessingInProgress || !bufferController || playbackController.isPaused() && !settings.get().streaming.scheduleWhilePaused || (type === _constantsConstants2["default"].FRAGMENTED_TEXT || type === _constantsConstants2["default"].TEXT) && !textController.isTextEnabled()) {
                    logger.debug("Schedule stop!");
                    return;
                }
                if (bufferController.getIsBufferingCompleted()) {
                    logger.debug("Schedule stop because buffering is completed!");
                    return;
                }
                validateExecutedFragmentRequest();
                var isReplacement = replaceRequestArray.length > 0;
                var streamInfo = streamProcessor.getStreamInfo();
                if (bufferResetInProgress || isNaN(lastInitQuality) || switchTrack || isReplacement || hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamInfo.id) || bufferLevelRule.execute(streamProcessor, streamController.isTrackTypePresent(_constantsConstants2["default"].VIDEO))) {
                    var getNextFragment = function getNextFragment() {
                        var fragmentController = streamProcessor.getFragmentController();
                        if ((currentRepresentationInfo.quality !== lastInitQuality || switchTrack) && !bufferResetInProgress) {
                            logger.debug("Quality has changed, get init request for representationid = " + currentRepresentationInfo.id);
                            if (switchTrack) {
                                bufferResetInProgress = mediaController.getSwitchMode(type) === _MediaController2["default"].TRACK_SWITCH_MODE_ALWAYS_REPLACE ? true : false;
                                logger.debug("Switch track has been asked, get init request for " + type + " with representationid = " + currentRepresentationInfo.id + "bufferResetInProgress = " + bufferResetInProgress);
                                streamProcessor.switchInitData(currentRepresentationInfo.id, bufferResetInProgress);
                                switchTrack = false;
                            } else {
                                streamProcessor.switchInitData(currentRepresentationInfo.id);
                            }
                            lastInitQuality = currentRepresentationInfo.quality;
                        } else {
                            var replacement = replaceRequestArray.shift();
                            if (fragmentController.isInitializationRequest(replacement)) {
                                streamProcessor.switchInitData(replacement.representationId);
                            } else {
                                var request = undefined;
                                if (!streamProcessor.getBufferController().getIsPruningInProgress()) {
                                    request = nextFragmentRequestRule.execute(streamProcessor, seekTarget, replacement);//err2 - getNextFragment
                                    setSeekTarget(NaN);
                                    if (request && !replacement) {
                                        if (!isNaN(request.startTime + request.duration)) {
                                            streamProcessor.setIndexHandlerTime(request.startTime + request.duration);
                                        }
                                        request.delayLoadingTime = new Date().getTime() + timeToLoadDelay;
                                        setTimeToLoadDelay(0);
                                    }
                                    if (!request && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic) {
                                        logger.debug("Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.");
                                    }
                                }
                                if (request) {
                                    logger.debug("Next fragment request url is " + request.url);
                                    fragmentModel.executeRequest(request);
                                } else {
                                    setFragmentProcessState(false);
                                    startScheduleTimer(settings.get().streaming.lowLatencyEnabled ? 100 : 500);
                                }
                            }
                        }
                    };
                    setFragmentProcessState(true);
                    if (!isReplacement && !switchTrack) {
                        abrController.checkPlaybackQuality(type);
                    }
                    getNextFragment();//err1
                } else {
                    startScheduleTimer(500);
                }
            }
            function validateExecutedFragmentRequest() {
                var time = playbackController.getTime();
                var safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;
                var request = fragmentModel.getRequests({
                    state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                    time: time + safeBufferLevel,
                    threshold: 0
                })[0];
                if (request && replaceRequestArray.indexOf(request) === -1 && !adapter.getIsTextTrack(type)) {
                    var fastSwitchModeEnabled = settings.get().streaming.fastSwitchEnabled;
                    var bufferLevel = streamProcessor.getBufferLevel();
                    var abandonmentState = abrController.getAbandonmentStateFor(type);
                    var trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === _MediaController2["default"].TRACK_SWITCH_MODE_NEVER_REPLACE;
                    var qualityChanged = request.quality < currentRepresentationInfo.quality;
                    if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== _AbrController2["default"].ABANDON_LOAD) {
                        replaceRequest(request);
                        isReplacementRequest = true;
                        logger.debug("Reloading outdated fragment at index: ", request.index);
                    } else if (request.quality > currentRepresentationInfo.quality && !bufferResetInProgress) {
                        setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());
                    }
                }
            }
            function startScheduleTimer(value) {
                clearTimeout(scheduleTimeout);
                scheduleTimeout = setTimeout(schedule, value);
            }
            function onInitRequested(e) {
                if (!e.sender || e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                getInitRequest(currentRepresentationInfo.quality);
            }
            function setFragmentProcessState(state) {
                if (isFragmentProcessingInProgress !== state) {
                    isFragmentProcessingInProgress = state;
                } else {
                    logger.debug("isFragmentProcessingInProgress is already equal to", state);
                }
            }
            function getInitRequest(quality) {
                var request = streamProcessor.getInitRequest(quality);
                if (request) {
                    setFragmentProcessState(true);
                    fragmentModel.executeRequest(request);
                }
            }
            function switchTrackAsked() {
                switchTrack = true;
            }
            function replaceRequest(request) {
                replaceRequestArray.push(request);
            }
            function onQualityChanged(e) {
                if (type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {
                    return;
                }
                currentRepresentationInfo = streamProcessor.getRepresentationInfo(e.newQuality);
                if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {
                    throw new Error("Unexpected error! - currentRepresentationInfo is null or undefined");
                }
                clearPlayListTraceMetrics(new Date(), _voMetricsPlayList.PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);
                createPlaylistTraceMetrics();
            }
            function completeQualityChange(trigger) {
                if (playbackController && fragmentModel) {
                    var item = fragmentModel.getRequests({
                        state: _modelsFragmentModel2["default"].FRAGMENT_MODEL_EXECUTED,
                        time: playbackController.getTime(),
                        threshold: 0
                    })[0];
                    if (item && playbackController.getTime() >= item.startTime) {
                        if ((!lastFragmentRequest.mediaInfo || item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id) && trigger) {
                            eventBus.trigger(_coreEventsEvents2["default"].TRACK_CHANGE_RENDERED, {
                                mediaType: type,
                                oldMediaInfo: lastFragmentRequest.mediaInfo,
                                newMediaInfo: item.mediaInfo
                            });
                        }
                        if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {
                            eventBus.trigger(_coreEventsEvents2["default"].QUALITY_CHANGE_RENDERED, {
                                mediaType: type,
                                oldQuality: lastFragmentRequest.quality,
                                newQuality: item.quality
                            });
                        }
                        lastFragmentRequest = {
                            mediaInfo: item.mediaInfo,
                            quality: item.quality,
                            adaptationIndex: item.adaptationIndex
                        };
                    }
                }
            }
            function onDataUpdateCompleted(e) {
                if (e.error || e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);
            }
            function onStreamInitialized(e) {
                if (streamProcessor.getStreamInfo().id !== e.streamInfo.id) {
                    return;
                }
                currentRepresentationInfo = streamProcessor.getRepresentationInfo();
                if (initialRequest) {
                    if (playbackController.getIsDynamic()) {
                        timelineConverter.setTimeSyncCompleted(true);
                        setLiveEdgeSeekTarget();
                    } else {
                        seekTarget = playbackController.getStreamStartTime(false);
                        streamProcessor.getBufferController().setSeekStartTime(seekTarget);
                    }
                }
                if (isStopped) {
                    start();
                }
            }
            function setLiveEdgeSeekTarget() {
                var liveEdgeFinder = streamProcessor.getLiveEdgeFinder();
                if (liveEdgeFinder) {
                    var liveEdge = liveEdgeFinder.getLiveEdge();
                    var dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2;
                    var startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize);
                    var request = streamProcessor.getFragmentRequest(currentRepresentationInfo, startTime, {
                        ignoreIsFinished: true
                    });
                    if (request) {
                        if (settings.get().streaming.lowLatencyEnabled) {
                            var liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();
                            playbackController.setLiveStartTime(liveStartTime);
                        } else {
                            playbackController.setLiveStartTime(request.startTime);
                        }
                    } else {
                        logger.debug("setLiveEdgeSeekTarget : getFragmentRequest returned undefined request object");
                    }
                    seekTarget = playbackController.getStreamStartTime(false, liveEdge);
                    streamProcessor.getBufferController().setSeekStartTime(seekTarget);
                    if (seekTarget > currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration) {
                        playbackController.seek(seekTarget);
                    }
                    dashMetrics.updateManifestUpdateInfo({
                        currentTime: seekTarget,
                        presentationStartTime: liveEdge,
                        latency: liveEdge - seekTarget,
                        clientTimeOffset: timelineConverter.getClientTimeOffset()
                    });
                }
            }
            function onStreamCompleted(e) {
                if (e.fragmentModel !== fragmentModel) {
                    return;
                }
                stop();
                setFragmentProcessState(false);
                logger.info("Stream is complete");
            }
            function onFragmentLoadingCompleted(e) {
                if (e.sender !== fragmentModel) {
                    return;
                }
                logger.info("OnFragmentLoadingCompleted - Url:", e.request ? e.request.url : "undefined", ", Range:", e.request.range ? e.request.range : "undefined");
                if (adapter.getIsTextTrack(type)) {
                    setFragmentProcessState(false);
                }
                if (e.error && e.request.serviceLocation && !isStopped) {
                    replaceRequest(e.request);
                    setFragmentProcessState(false);
                    startScheduleTimer(0);
                }
                if (bufferResetInProgress) {
                    mediaRequest = e.request;
                }
            }
            function onPlaybackTimeUpdated() {
                completeQualityChange(true);
            }
            function onBytesAppended(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                if (bufferResetInProgress && !isNaN(e.startTime)) {
                    bufferResetInProgress = false;
                    fragmentModel.addExecutedRequest(mediaRequest);
                }
                setFragmentProcessState(false);
                if (isReplacementRequest && !isNaN(e.startTime)) {
                    var currentTime = playbackController.getTime();
                    var fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;
                    var safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;
                    if (currentTime + safeBufferLevel >= fragEndTime) {
                        startScheduleTimer(0);
                    } else {
                        startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1e3);
                    }
                    isReplacementRequest = false;
                } else {
                    startScheduleTimer(0);
                }
            }
            function onFragmentLoadingAbandoned(e) {
                if (e.streamProcessor !== streamProcessor) {
                    return;
                }
                logger.info("onFragmentLoadingAbandoned for " + type + ", request: " + e.request.url + " has been aborted");
                if (!playbackController.isSeeking() && !switchTrack) {
                    logger.info("onFragmentLoadingAbandoned for " + type + ", request: " + e.request.url + " has to be downloaded again, origin is not seeking process or switch track call");
                    replaceRequest(e.request);
                }
                setFragmentProcessState(false);
                startScheduleTimer(0);
            }
            function onDataUpdateStarted(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                stop();
            }
            function onBufferCleared(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                var streamInfo = streamProcessor.getStreamInfo();
                if (streamInfo) {
                    if (e.unintended) {
                        fragmentModel.removeExecutedRequestsAfterTime(e.from);
                    } else {
                        fragmentModel.syncExecutedRequestsWithBufferedRange(streamProcessor.getBufferController().getBuffer().getAllBufferRanges(), streamInfo.duration);
                    }
                }
                if (e.hasEnoughSpaceToAppend && isStopped) {
                    start();
                }
            }
            function onBufferLevelStateChanged(e) {
                if (e.sender.getStreamProcessor() === streamProcessor && e.state === _BufferController2["default"].BUFFER_EMPTY && !playbackController.isSeeking()) {
                    logger.info("Buffer is empty! Stalling!");
                    clearPlayListTraceMetrics(new Date(), _voMetricsPlayList.PlayListTrace.REBUFFERING_REASON);
                }
            }
            function onQuotaExceeded(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                stop();
                setFragmentProcessState(false);
            }
            function onURLResolutionFailed() {
                fragmentModel.abortRequests();
                stop();
            }
            function onTimedTextRequested(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor) {
                    return;
                }
                if (textController.isTextEnabled()) {
                    getInitRequest(e.index);
                }
            }
            function onPlaybackStarted() {
                if (isStopped || !settings.get().streaming.scheduleWhilePaused) {
                    start();
                }
            }
            function onPlaybackSeeking(e) {
                seekTarget = e.seekTime;
                setTimeToLoadDelay(0);
                if (isStopped) {
                    start();
                }
                var latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;
                dashMetrics.updateManifestUpdateInfo({
                    latency: latency
                });
                if (!isFragmentProcessingInProgress) {
                    startScheduleTimer(0);
                } else {
                    logger.debug("onPlaybackSeeking for " + type + ", call fragmentModel.abortRequests in order to seek quicker");
                    fragmentModel.abortRequests();
                }
            }
            function onPlaybackRateChanged(e) {
                dashMetrics.updatePlayListTraceMetrics({
                    playbackspeed: e.playbackRate.toString()
                });
            }
            function setSeekTarget(value) {
                seekTarget = value;
            }
            function setTimeToLoadDelay(value) {
                timeToLoadDelay = value;
            }
            function getBufferTarget() {
                return bufferLevelRule.getBufferTarget(streamProcessor, streamController.isTrackTypePresent(_constantsConstants2["default"].VIDEO));
            }
            function getType() {
                return type;
            }
            function finalisePlayList(time, reason) {
                clearPlayListTraceMetrics(time, reason);
            }
            function clearPlayListTraceMetrics(endTime, stopreason) {
                dashMetrics.pushPlayListTraceMetrics(endTime, stopreason);
            }
            function createPlaylistTraceMetrics() {
                if (currentRepresentationInfo) {
                    var playbackRate = playbackController.getPlaybackRate();
                    dashMetrics.createPlaylistTraceMetrics(currentRepresentationInfo.id, playbackController.getTime() * 1e3, playbackRate !== null ? playbackRate.toString() : null);
                }
            }
            function resetInitialSettings() {
                isFragmentProcessingInProgress = false;
                timeToLoadDelay = 0;
                seekTarget = NaN;
                initialRequest = true;
                lastInitQuality = NaN;
                lastFragmentRequest = {
                    mediaInfo: undefined,
                    quality: NaN,
                    adaptationIndex: NaN
                };
                topQualityIndex = {};
                replaceRequestArray = [];
                isStopped = true;
                switchTrack = false;
                bufferResetInProgress = false;
                mediaRequest = null;
                isReplacementRequest = false;
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].DATA_UPDATE_STARTED, onDataUpdateStarted, this);
                eventBus.off(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
                eventBus.off(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
                eventBus.off(_coreEventsEvents2["default"].FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].STREAM_COMPLETED, onStreamCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].STREAM_INITIALIZED, onStreamInitialized, this);
                eventBus.off(_coreEventsEvents2["default"].QUOTA_EXCEEDED, onQuotaExceeded, this);
                eventBus.off(_coreEventsEvents2["default"].BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
                eventBus.off(_coreEventsEvents2["default"].BUFFER_CLEARED, onBufferCleared, this);
                eventBus.off(_coreEventsEvents2["default"].INIT_REQUESTED, onInitRequested, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_STARTED, onPlaybackStarted, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
                eventBus.off(_coreEventsEvents2["default"].URL_RESOLUTION_FAILED, onURLResolutionFailed, this);
                eventBus.off(_coreEventsEvents2["default"].FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);
                if (adapter.getIsTextTrack(type)) {
                    eventBus.off(_coreEventsEvents2["default"].TIMED_TEXT_REQUESTED, onTimedTextRequested, this);
                }
                stop();
                completeQualityChange(false);
                resetInitialSettings();
            }
            instance = {
                initialize: initialize,
                getType: getType,
                setSeekTarget: setSeekTarget,
                setTimeToLoadDelay: setTimeToLoadDelay,
                replaceRequest: replaceRequest,
                switchTrackAsked: switchTrackAsked,
                isStarted: isStarted,
                start: start,
                stop: stop,
                reset: reset,
                getBufferTarget: getBufferTarget,
                finalisePlayList: finalisePlayList
            };
            setup();
            return instance;
        }
        ScheduleController.__dashjs_factory_name = "ScheduleController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(ScheduleController);
        module.exports = exports["default"];
    }, {
        107: 107,
        110: 110,
        113: 113,
        116: 116,
        147: 147,
        192: 192,
        193: 193,
        239: 239,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    120: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        var _Stream = _dereq_(104);
        var _Stream2 = _interopRequireDefault(_Stream);
        var _ManifestUpdater = _dereq_(98);
        var _ManifestUpdater2 = _interopRequireDefault(_ManifestUpdater);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voMetricsPlayList = _dereq_(239);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _utilsInitCache = _dereq_(209);
        var _utilsInitCache2 = _interopRequireDefault(_utilsInitCache);
        var _utilsURLUtils = _dereq_(216);
        var _utilsURLUtils2 = _interopRequireDefault(_utilsURLUtils);
        var _MediaPlayerEvents = _dereq_(100);
        var _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);
        var _TimeSyncController = _dereq_(121);
        var _TimeSyncController2 = _interopRequireDefault(_TimeSyncController);
        var _BaseURLController = _dereq_(111);
        var _BaseURLController2 = _interopRequireDefault(_BaseURLController);
        var _MediaSourceController = _dereq_(117);
        var _MediaSourceController2 = _interopRequireDefault(_MediaSourceController);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        function StreamController() {
            var STALL_THRESHOLD_TO_CHECK_GAPS = 40;
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, capabilities = undefined, manifestUpdater = undefined, manifestLoader = undefined, manifestModel = undefined, adapter = undefined, dashMetrics = undefined, mediaSourceController = undefined, timeSyncController = undefined, baseURLController = undefined, abrController = undefined, mediaController = undefined, textController = undefined, initCache = undefined, urlUtils = undefined, errHandler = undefined, timelineConverter = undefined, streams = undefined, activeStream = undefined, protectionController = undefined, protectionData = undefined, autoPlay = undefined, isStreamSwitchingInProgress = undefined, hasMediaError = undefined, hasInitialisationError = undefined, mediaSource = undefined, videoModel = undefined, playbackController = undefined, mediaPlayerModel = undefined, isPaused = undefined, initialPlayback = undefined, videoTrackDetected = undefined, audioTrackDetected = undefined, isPeriodSwitchInProgress = undefined, playbackEndedTimerId = undefined, preloadTimerId = undefined, wallclockTicked = undefined, buffers = undefined, useSmoothPeriodTransition = undefined, preloading = undefined, lastPlaybackTime = undefined, supportsChangeType = undefined, settings = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                timeSyncController = (0, _TimeSyncController2["default"])(context).getInstance();
                baseURLController = (0, _BaseURLController2["default"])(context).getInstance();
                mediaSourceController = (0, _MediaSourceController2["default"])(context).getInstance();
                initCache = (0, _utilsInitCache2["default"])(context).getInstance();
                urlUtils = (0, _utilsURLUtils2["default"])(context).getInstance();
                resetInitialSettings();
            }
            function initialize(autoPl, protData) {
                checkConfig();
                autoPlay = autoPl;
                protectionData = protData;
                timelineConverter.initialize();
                manifestUpdater = (0, _ManifestUpdater2["default"])(context).create();
                manifestUpdater.setConfig({
                    manifestModel: manifestModel,
                    adapter: adapter,
                    mediaPlayerModel: mediaPlayerModel,
                    manifestLoader: manifestLoader,
                    errHandler: errHandler,
                    settings: settings
                });
                manifestUpdater.initialize();
                baseURLController.setConfig({
                    adapter: adapter
                });
                registerEvents();
            }
            function registerEvents() {
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_ERROR, onPlaybackError, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_STARTED, onPlaybackStarted, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_PAUSED, onPlaybackPaused, this);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_ENDED, onEnded, this);
                eventBus.on(_coreEventsEvents2["default"].MANIFEST_UPDATED, onManifestUpdated, this);
                eventBus.on(_coreEventsEvents2["default"].BUFFERING_COMPLETED, onTrackBufferingCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, this);
                eventBus.on(_coreEventsEvents2["default"].TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, this);
                eventBus.on(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
                eventBus.on(_MediaPlayerEvents2["default"].METRIC_ADDED, onMetricAdded, this);
            }
            function unRegisterEvents() {
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_ERROR, onPlaybackError, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_STARTED, onPlaybackStarted, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_PAUSED, onPlaybackPaused, this);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_ENDED, onEnded, this);
                eventBus.off(_coreEventsEvents2["default"].MANIFEST_UPDATED, onManifestUpdated, this);
                eventBus.off(_coreEventsEvents2["default"].BUFFERING_COMPLETED, onTrackBufferingCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, this);
                eventBus.off(_coreEventsEvents2["default"].TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
                eventBus.off(_MediaPlayerEvents2["default"].METRIC_ADDED, onMetricAdded, this);
            }
            function onPlaybackTimeUpdated() {
                if (isTrackTypePresent(_constantsConstants2["default"].VIDEO)) {
                    var playbackQuality = videoModel.getPlaybackQuality();
                    if (playbackQuality) {
                        dashMetrics.addDroppedFrames(playbackQuality);
                    }
                }
            }
            function onWallclockTimeUpdated() {
                if (!settings.get().streaming.jumpGaps || getActiveStreamProcessors() === 0 || playbackController.isSeeking() || isPaused || isStreamSwitchingInProgress || hasMediaError || hasInitialisationError) {
                    return;
                }
                wallclockTicked++;
                if (wallclockTicked >= STALL_THRESHOLD_TO_CHECK_GAPS) {
                    var currentTime = playbackController.getTime();
                    if (lastPlaybackTime === currentTime) {
                        jumpGap(currentTime);
                    } else {
                        lastPlaybackTime = currentTime;
                    }
                    wallclockTicked = 0;
                }
            }
            function jumpGap(time) {
                var streamProcessors = getActiveStreamProcessors();
                var smallGapLimit = settings.get().streaming.smallGapLimit;
                var seekToPosition = undefined;
                for (var i = 0; i < streamProcessors.length; i++) {
                    var mediaBuffer = streamProcessors[i].getBuffer();
                    var ranges = mediaBuffer.getAllBufferRanges();
                    var nextRangeStartTime = undefined;
                    if (!ranges || ranges.length <= 1) continue;
                    for (var j = 0; j < ranges.length; j++) {
                        if (time < ranges.start(j)) {
                            nextRangeStartTime = ranges.start(j);
                            break;
                        }
                    }
                    if (nextRangeStartTime > 0) {
                        var gap = nextRangeStartTime - time;
                        if (gap > 0 && gap <= smallGapLimit) {
                            if (seekToPosition === undefined || nextRangeStartTime > seekToPosition) {
                                seekToPosition = nextRangeStartTime;
                            }
                        }
                    }
                }
                var timeToStreamEnd = playbackController.getTimeToStreamEnd();
                if (seekToPosition === undefined && !isNaN(timeToStreamEnd) && timeToStreamEnd < smallGapLimit) {
                    seekToPosition = time + timeToStreamEnd;
                }
                if (seekToPosition > 0) {
                    if (!isNaN(timeToStreamEnd) && seekToPosition >= time + timeToStreamEnd) {
                        logger.info("Jumping media gap (discontinuity) at time ", time, ". Jumping to end of the stream");
                        eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_ENDED, {
                            isLast: getActiveStreamInfo().isLast
                        });
                    } else {
                        logger.info("Jumping media gap (discontinuity) at time ", time, ". Jumping to time position", seekToPosition);
                        playbackController.seek(seekToPosition, true, true);
                    }
                }
            }
            function onPlaybackSeeking(e) {
                var seekingStream = getStreamForTime(e.seekTime);
                if (playbackEndedTimerId) {
                    stopEndPeriodTimer();
                    isPeriodSwitchInProgress = false;
                }
                if (preloadTimerId) {
                    stopPreloadTimer();
                }
                if (seekingStream === activeStream && preloading) {
                    preloading.deactivate(true);
                }
                if (seekingStream && (seekingStream !== activeStream || preloading && !activeStream.isActive())) {
                    flushPlaylistMetrics(_voMetricsPlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON);
                    switchStream(activeStream, seekingStream, e.seekTime);
                } else {
                    flushPlaylistMetrics(_voMetricsPlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
                }
                createPlaylistMetrics(_voMetricsPlayList.PlayList.SEEK_START_REASON);
            }
            function onPlaybackStarted() {
                logger.debug("[onPlaybackStarted]");
                if (initialPlayback) {
                    initialPlayback = false;
                    createPlaylistMetrics(_voMetricsPlayList.PlayList.INITIAL_PLAYOUT_START_REASON);
                } else {
                    if (isPaused) {
                        isPaused = false;
                        createPlaylistMetrics(_voMetricsPlayList.PlayList.RESUME_FROM_PAUSE_START_REASON);
                        toggleEndPeriodTimer();
                    }
                }
            }
            function onPlaybackPaused(e) {
                logger.debug("[onPlaybackPaused]");
                if (!e.ended) {
                    isPaused = true;
                    flushPlaylistMetrics(_voMetricsPlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
                    toggleEndPeriodTimer();
                }
            }
            function stopEndPeriodTimer() {
                logger.debug("[toggleEndPeriodTimer] stop end period timer.");
                clearTimeout(playbackEndedTimerId);
                playbackEndedTimerId = undefined;
            }
            function stopPreloadTimer() {
                logger.debug("[PreloadTimer] stop period preload timer.");
                clearTimeout(preloadTimerId);
                preloadTimerId = undefined;
            }
            function toggleEndPeriodTimer() {
                if (isPeriodSwitchInProgress) {
                    if (playbackEndedTimerId) {
                        stopEndPeriodTimer();
                    } else {
                        var timeToEnd = playbackController.getTimeToStreamEnd();
                        var delayPlaybackEnded = timeToEnd > 0 ? timeToEnd * 1e3 : 0;
                        var preloadDelay = delayPlaybackEnded < 2e3 ? delayPlaybackEnded / 4 : delayPlaybackEnded - 2e3;
                        logger.debug("[toggleEndPeriodTimer] Going to fire preload in", preloadDelay, "milliseconds");
                        preloadTimerId = setTimeout(onStreamCanLoadNext, preloadDelay);
                        logger.debug("[toggleEndPeriodTimer] start-up of timer to notify PLAYBACK_ENDED event. It will be triggered in", delayPlaybackEnded, "milliseconds");
                        playbackEndedTimerId = setTimeout(function() {
                            eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_ENDED, {
                                isLast: getActiveStreamInfo().isLast
                            });
                        }, delayPlaybackEnded);
                    }
                }
            }
            function onTrackBufferingCompleted(e) {
                if (!e.sender) {
                    return;
                }
                if (e.sender.getType() !== _constantsConstants2["default"].AUDIO && e.sender.getType() !== _constantsConstants2["default"].VIDEO) {
                    return;
                }
                var isLast = getActiveStreamInfo().isLast;
                if (mediaSource && !isLast && playbackEndedTimerId === undefined) {
                    logger.info("[onTrackBufferingCompleted] end of period detected. Track", e.sender.getType(), "has finished");
                    isPeriodSwitchInProgress = true;
                    if (isPaused === false) {
                        toggleEndPeriodTimer();
                    }
                }
            }
            function onStreamBufferingCompleted() {
                var isLast = getActiveStreamInfo().isLast;
                if (mediaSource && isLast) {
                    logger.info("[onStreamBufferingCompleted] calls signalEndOfStream of mediaSourceController.");
                    mediaSourceController.signalEndOfStream(mediaSource);
                }
            }
            function onStreamCanLoadNext() {
                var isLast = getActiveStreamInfo().isLast;
                if (mediaSource && !isLast) {
                    (function() {
                        var newStream = getNextStream();
                        useSmoothPeriodTransition = activeStream.isProtectionCompatible(newStream) && (supportsChangeType || activeStream.isMediaCodecCompatible(newStream));
                        if (useSmoothPeriodTransition) {
                            logger.info("[onStreamCanLoadNext] Preloading next stream");
                            activeStream.stopEventController();
                            activeStream.deactivate(true);
                            newStream.preload(mediaSource, buffers);
                            preloading = newStream;
                            newStream.getProcessors().forEach(function(p) {
                                p.setIndexHandlerTime(newStream.getStartTime());
                            });
                        }
                    })();
                }
            }
            function getStreamForTime(time) {
                var duration = 0;
                var stream = null;
                var ln = streams.length;
                if (ln > 0) {
                    duration += streams[0].getStartTime();
                }
                for (var i = 0; i < ln; i++) {
                    stream = streams[i];
                    duration = parseFloat((duration + stream.getDuration()).toFixed(5));
                    if (time < duration) {
                        return stream;
                    }
                }
                return null;
            }
            function getTimeRelativeToStreamId(time, id) {
                var stream = null;
                var baseStart = 0;
                var streamStart = 0;
                var streamDur = null;
                var ln = streams.length;
                for (var i = 0; i < ln; i++) {
                    stream = streams[i];
                    streamStart = stream.getStartTime();
                    streamDur = stream.getDuration();
                    if (Number.isFinite(streamStart)) {
                        baseStart = streamStart;
                    }
                    if (stream.getId() === id) {
                        return time - baseStart;
                    } else {
                        if (Number.isFinite(streamDur)) {
                            baseStart += streamDur;
                        }
                    }
                }
                return null;
            }
            function getActiveStreamProcessors() {
                return activeStream ? activeStream.getProcessors() : [];
            }
            function onEnded() {
                var nextStream = getNextStream();
                if (nextStream) {
                    audioTrackDetected = undefined;
                    videoTrackDetected = undefined;
                    switchStream(activeStream, nextStream, NaN);
                } else {
                    logger.debug("StreamController no next stream found");
                }
                flushPlaylistMetrics(nextStream ? _voMetricsPlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON : _voMetricsPlayList.PlayListTrace.END_OF_CONTENT_STOP_REASON);
                playbackEndedTimerId = undefined;
                isPeriodSwitchInProgress = false;
            }
            function getNextStream() {
                if (activeStream) {
                    var _ret2 = function() {
                        var start = getActiveStreamInfo().start;
                        var duration = getActiveStreamInfo().duration;
                        return {
                            v: streams.filter(function(stream) {
                                return stream.getStreamInfo().start === parseFloat((start + duration).toFixed(5));
                            })[0]
                        };
                    }();
                    if (typeof _ret2 === "object") return _ret2.v;
                }
            }
            function switchStream(oldStream, newStream, seekTime) {
                if (isStreamSwitchingInProgress || !newStream || oldStream === newStream && newStream.isActive()) return;
                isStreamSwitchingInProgress = true;
                eventBus.trigger(_coreEventsEvents2["default"].PERIOD_SWITCH_STARTED, {
                    fromStreamInfo: oldStream ? oldStream.getStreamInfo() : null,
                    toStreamInfo: newStream.getStreamInfo()
                });
                useSmoothPeriodTransition = false;
                if (oldStream) {
                    oldStream.stopEventController();
                    useSmoothPeriodTransition = activeStream.isProtectionCompatible(newStream) && (supportsChangeType || activeStream.isMediaCodecCompatible(newStream)) && !seekTime || newStream.getPreloaded();
                    oldStream.deactivate(useSmoothPeriodTransition);
                }
                activeStream = newStream;
                preloading = false;
                playbackController.initialize(getActiveStreamInfo(), useSmoothPeriodTransition);
                if (videoModel.getElement()) {
                    openMediaSource(seekTime, oldStream, false, useSmoothPeriodTransition);
                } else {
                    preloadStream(seekTime);
                }
            }
            function preloadStream(seekTime) {
                activateStream(seekTime, useSmoothPeriodTransition);
            }
            function switchToVideoElement(seekTime) {
                if (activeStream) {
                    playbackController.initialize(getActiveStreamInfo());
                    openMediaSource(seekTime, null, true, false);
                }
            }
            function openMediaSource(seekTime, oldStream, streamActivated, keepBuffers) {
                var sourceUrl = undefined;
                function onMediaSourceOpen() {
                    if (!mediaSource) return;
                    logger.debug("MediaSource is open!");
                    window.URL.revokeObjectURL(sourceUrl);
                    mediaSource.removeEventListener("sourceopen", onMediaSourceOpen);
                    mediaSource.removeEventListener("webkitsourceopen", onMediaSourceOpen);
                    setMediaDuration();
                    if (!oldStream) {
                        eventBus.trigger(_coreEventsEvents2["default"].SOURCE_INITIALIZED);
                    }
                    if (streamActivated) {
                        activeStream.setMediaSource(mediaSource);
                    } else {
                        activateStream(seekTime, keepBuffers);
                    }
                }
                if (!mediaSource) {
                    mediaSource = mediaSourceController.createMediaSource();
                    mediaSource.addEventListener("sourceopen", onMediaSourceOpen, false);
                    mediaSource.addEventListener("webkitsourceopen", onMediaSourceOpen, false);
                    sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel);
                    logger.debug("MediaSource attached to element.  Waiting on open...");
                } else {
                    if (keepBuffers) {
                        activateStream(seekTime, keepBuffers);
                        if (!oldStream) {
                            eventBus.trigger(_coreEventsEvents2["default"].SOURCE_INITIALIZED);
                        }
                    } else {
                        mediaSourceController.detachMediaSource(videoModel);
                        mediaSource.addEventListener("sourceopen", onMediaSourceOpen, false);
                        mediaSource.addEventListener("webkitsourceopen", onMediaSourceOpen, false);
                        sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel);
                        logger.debug("MediaSource attached to element.  Waiting on open...");
                    }
                }
            }
            function activateStream(seekTime, keepBuffers) {
                buffers = activeStream.activate(mediaSource, keepBuffers ? buffers : undefined);
                audioTrackDetected = checkTrackPresence(_constantsConstants2["default"].AUDIO);
                videoTrackDetected = checkTrackPresence(_constantsConstants2["default"].VIDEO);
                if (buffers) {
                    var keys = Object.keys(buffers);
                    if (keys.length > 0 && buffers[keys[0]].changeType) {
                        logger.debug("SourceBuffer changeType method supported. Use it to switch codecs in periods transitions");
                        supportsChangeType = true;
                    }
                }
                if (!initialPlayback) {
                    if (!isNaN(seekTime)) {
                        playbackController.seek(seekTime);
                    } else {
                        (function() {
                            var startTime = playbackController.getStreamStartTime(true);
                            if (!keepBuffers) {
                                getActiveStreamProcessors().forEach(function(p) {
                                    adapter.setIndexHandlerTime(p, startTime);
                                });
                            }
                        })();
                    }
                }
                activeStream.startEventController();
                if (autoPlay || !initialPlayback) {
                    playbackController.play();
                }
                isStreamSwitchingInProgress = false;
                eventBus.trigger(_coreEventsEvents2["default"].PERIOD_SWITCH_COMPLETED, {
                    toStreamInfo: getActiveStreamInfo()
                });
            }
            function setMediaDuration(duration) {
                var manifestDuration = duration ? duration : getActiveStreamInfo().manifestInfo.duration;
                var mediaDuration = mediaSourceController.setDuration(mediaSource, manifestDuration);
                logger.debug("Duration successfully set to: " + mediaDuration);
            }
            function getComposedStream(streamInfo) {
                for (var i = 0, ln = streams.length; i < ln; i++) {
                    if (streams[i].getId() === streamInfo.id) {
                        return streams[i];
                    }
                }
                return null;
            }
            function composeStreams() {
                try {
                    var streamsInfo = adapter.getStreamsInfo();
                    if (streamsInfo.length === 0) {
                        throw new Error("There are no streams");
                    }
                    dashMetrics.updateManifestUpdateInfo({
                        currentTime: playbackController.getTime(),
                        buffered: videoModel.getBufferRange(),
                        presentationStartTime: streamsInfo[0].start,
                        clientTimeOffset: timelineConverter.getClientTimeOffset()
                    });
                    for (var i = 0, ln = streamsInfo.length; i < ln; i++) {
                        var streamInfo = streamsInfo[i];
                        var stream = getComposedStream(streamInfo);
                        if (!stream) {
                            stream = (0, _Stream2["default"])(context).create({
                                manifestModel: manifestModel,
                                mediaPlayerModel: mediaPlayerModel,
                                dashMetrics: dashMetrics,
                                manifestUpdater: manifestUpdater,
                                adapter: adapter,
                                timelineConverter: timelineConverter,
                                capabilities: capabilities,
                                errHandler: errHandler,
                                baseURLController: baseURLController,
                                abrController: abrController,
                                playbackController: playbackController,
                                mediaController: mediaController,
                                textController: textController,
                                videoModel: videoModel,
                                streamController: instance,
                                settings: settings
                            });
                            streams.push(stream);
                            stream.initialize(streamInfo, protectionController);
                        } else {
                            stream.updateData(streamInfo);
                        }
                        dashMetrics.addManifestUpdateStreamInfo(streamInfo);
                    }
                    if (!activeStream) {
                        var startTimeFormUriParameters = playbackController.getStartTimeFromUriParameters();
                        var initialStream = null;
                        if (startTimeFormUriParameters) {
                            var initialTime = !isNaN(startTimeFormUriParameters.fragS) ? startTimeFormUriParameters.fragS : startTimeFormUriParameters.fragT;
                            initialStream = getStreamForTime(initialTime);
                        }
                        switchStream(null, initialStream !== null ? initialStream : streams[0], NaN);
                    }
                    eventBus.trigger(_coreEventsEvents2["default"].STREAMS_COMPOSED);
                } catch (e) {
                    errHandler.manifestError(e.message, "nostreamscomposed", manifestModel.getValue());
                    errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].MANIFEST_ERROR_ID_NOSTREAMS_CODE, e.message + "nostreamscomposed", manifestModel.getValue()));
                    hasInitialisationError = true;
                    reset();
                }
            }
            function onTimeSyncCompleted() {
                var manifest = manifestModel.getValue();
                if (protectionController) {
                    eventBus.trigger(_coreEventsEvents2["default"].PROTECTION_CREATED, {
                        controller: protectionController,
                        manifest: manifest
                    });
                    protectionController.setMediaElement(videoModel.getElement());
                    if (protectionData) {
                        protectionController.setProtectionData(protectionData);
                    }
                }
                composeStreams();
            }
            function onManifestUpdated(e) {
                if (!e.error) {
                    (function() {
                        var manifest = e.manifest;
                        adapter.updatePeriods(manifest);
                        var streamInfo = adapter.getStreamsInfo(undefined, 1)[0];
                        var mediaInfo = adapter.getMediaInfoForType(streamInfo, _constantsConstants2["default"].VIDEO) || adapter.getMediaInfoForType(streamInfo, _constantsConstants2["default"].AUDIO);
                        var useCalculatedLiveEdgeTime = undefined;
                        if (mediaInfo) {
                            useCalculatedLiveEdgeTime = adapter.getUseCalculatedLiveEdgeTimeForMediaInfo(mediaInfo);
                            if (useCalculatedLiveEdgeTime) {
                                logger.debug("SegmentTimeline detected using calculated Live Edge Time");
                                var s = {
                                    streaming: {
                                        useManifestDateHeaderTimeSource: false
                                    }
                                };
                                settings.update(s);
                            }
                        }
                        var manifestUTCTimingSources = adapter.getUTCTimingSources();
                        var allUTCTimingSources = !adapter.getIsDynamic() || useCalculatedLiveEdgeTime ? manifestUTCTimingSources : manifestUTCTimingSources.concat(mediaPlayerModel.getUTCTimingSources());
                        var isHTTPS = urlUtils.isHTTPS(e.manifest.url);
                        allUTCTimingSources.forEach(function(item) {
                            if (item.value.replace(/.*?:\/\//g, "") === mediaPlayerModel.getDefaultUtcTimingSource().value.replace(/.*?:\/\//g, "")) {
                                item.value = item.value.replace(isHTTPS ? new RegExp(/^(http:)?\/\//i) : new RegExp(/^(https:)?\/\//i), isHTTPS ? "https://" : "http://");
                                logger.debug("Matching default timing source protocol to manifest protocol: ", item.value);
                            }
                        });
                        baseURLController.initialize(manifest);
                        timeSyncController.setConfig({
                            dashMetrics: dashMetrics,
                            baseURLController: baseURLController
                        });
                        timeSyncController.initialize(allUTCTimingSources, settings.get().streaming.useManifestDateHeaderTimeSource);
                    })();
                } else {
                    hasInitialisationError = true;
                    reset();
                }
            }
            function isTrackTypePresent(trackType) {
                var isTrackTypeDetected = undefined;
                if (!trackType) {
                    return isTrackTypeDetected;
                }
                switch (trackType) {
                  case _constantsConstants2["default"].VIDEO:
                    isTrackTypeDetected = videoTrackDetected;
                    break;

                  case _constantsConstants2["default"].AUDIO:
                    isTrackTypeDetected = audioTrackDetected;
                    break;
                }
                return isTrackTypeDetected;
            }
            function checkTrackPresence(type) {
                var isDetected = false;
                getActiveStreamProcessors().forEach(function(p) {
                    if (p.getMediaInfo().type === type) {
                        isDetected = true;
                    }
                });
                return isDetected;
            }
            function flushPlaylistMetrics(reason, time) {
                time = time || new Date();
                getActiveStreamProcessors().forEach(function(p) {
                    var ctrlr = p.getScheduleController();
                    if (ctrlr) {
                        ctrlr.finalisePlayList(time, reason);
                    }
                });
                dashMetrics.addPlayList();
            }
            function createPlaylistMetrics(startReason) {
                dashMetrics.createPlaylistMetrics(playbackController.getTime() * 1e3, startReason);
            }
            function onPlaybackError(e) {
                if (!e.error) return;
                var msg = "";
                switch (e.error.code) {
                  case 1:
                    msg = "MEDIA_ERR_ABORTED";
                    break;

                  case 2:
                    msg = "MEDIA_ERR_NETWORK";
                    break;

                  case 3:
                    msg = "MEDIA_ERR_DECODE";
                    break;

                  case 4:
                    msg = "MEDIA_ERR_SRC_NOT_SUPPORTED";
                    break;

                  case 5:
                    msg = "MEDIA_ERR_ENCRYPTED";
                    break;

                  default:
                    msg = "UNKNOWN";
                    break;
                }
                hasMediaError = true;
                if (e.error.message) {
                    msg += " (" + e.error.message + ")";
                }
                if (e.error.msExtendedCode) {
                    msg += " (0x" + (e.error.msExtendedCode >>> 0).toString(16).toUpperCase() + ")";
                }
                logger.fatal("Video Element Error: " + msg);
                if (e.error) {
                    logger.fatal(e.error);
                }
                errHandler.mediaSourceError(msg);
                errHandler.error(new _voDashJSError2["default"](e.error.code, msg));
                reset();
            }
            function getActiveStreamInfo() {
                return activeStream ? activeStream.getStreamInfo() : null;
            }
            function getStreamById(id) {
                return streams.filter(function(item) {
                    return item.getId() === id;
                })[0];
            }
            function checkConfig() {
                if (!manifestLoader || !manifestLoader.hasOwnProperty("load") || !timelineConverter || !timelineConverter.hasOwnProperty("initialize") || !timelineConverter.hasOwnProperty("reset") || !timelineConverter.hasOwnProperty("getClientTimeOffset") || !manifestModel || !errHandler || !dashMetrics || !playbackController) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function checkInitialize() {
                if (!manifestUpdater || !manifestUpdater.hasOwnProperty("setManifest")) {
                    throw new Error("initialize function has to be called previously");
                }
            }
            function load(url) {
                checkConfig();
                manifestLoader.load(url);
            }
            function loadWithManifest(manifest) { //DIFF5: load (parse?) a into the manifest if a[0] contains "http", otherwise set a as the new manifest.
                console.debug("loadWithManifest()");
                checkInitialize();
                if (manifest[0].indexOf("http") > -1) {
                    manifestLoader.load(manifest);
                } else {
                    manifestUpdater.setManifest(manifest);
                }
            }
            function onManifestValidityChanged(e) {
                if (!isNaN(e.newDuration)) {
                    setMediaDuration(e.newDuration);
                }
            }
            function setConfig(config) {
                if (!config) return;
                if (config.capabilities) {
                    capabilities = config.capabilities;
                }
                if (config.manifestLoader) {
                    manifestLoader = config.manifestLoader;
                }
                if (config.manifestModel) {
                    manifestModel = config.manifestModel;
                }
                if (config.mediaPlayerModel) {
                    mediaPlayerModel = config.mediaPlayerModel;
                }
                if (config.protectionController) {
                    protectionController = config.protectionController;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
                if (config.dashMetrics) {
                    dashMetrics = config.dashMetrics;
                }
                if (config.errHandler) {
                    errHandler = config.errHandler;
                }
                if (config.timelineConverter) {
                    timelineConverter = config.timelineConverter;
                }
                if (config.videoModel) {
                    videoModel = config.videoModel;
                }
                if (config.playbackController) {
                    playbackController = config.playbackController;
                }
                if (config.abrController) {
                    abrController = config.abrController;
                }
                if (config.mediaController) {
                    mediaController = config.mediaController;
                }
                if (config.textController) {
                    textController = config.textController;
                }
                if (config.settings) {
                    settings = config.settings;
                }
            }
            function setProtectionData(protData) {
                protectionData = protData;
            }
            function resetInitialSettings() {
                streams = [];
                protectionController = null;
                isStreamSwitchingInProgress = false;
                activeStream = null;
                hasMediaError = false;
                hasInitialisationError = false;
                videoTrackDetected = undefined;
                audioTrackDetected = undefined;
                initialPlayback = true;
                isPaused = false;
                autoPlay = true;
                playbackEndedTimerId = undefined;
                isPeriodSwitchInProgress = false;
                wallclockTicked = 0;
            }
            function reset() {
                checkConfig();
                timeSyncController.reset();
                flushPlaylistMetrics(hasMediaError || hasInitialisationError ? _voMetricsPlayList.PlayListTrace.FAILURE_STOP_REASON : _voMetricsPlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
                for (var i = 0, ln = streams ? streams.length : 0; i < ln; i++) {
                    var stream = streams[i];
                    stream.reset(hasMediaError);
                }
                unRegisterEvents();
                baseURLController.reset();
                manifestUpdater.reset();
                dashMetrics.clearAllCurrentMetrics();
                manifestModel.setValue(null);
                manifestLoader.reset();
                timelineConverter.reset();
                initCache.reset();
                if (mediaSource) {
                    mediaSourceController.detachMediaSource(videoModel);
                    mediaSource = null;
                }
                videoModel = null;
                if (protectionController) {
                    protectionController.setMediaElement(null);
                    protectionController = null;
                    protectionData = null;
                    if (manifestModel.getValue()) {
                        eventBus.trigger(_coreEventsEvents2["default"].PROTECTION_DESTROYED, {
                            data: manifestModel.getValue().url
                        });
                    }
                }
                eventBus.trigger(_coreEventsEvents2["default"].STREAM_TEARDOWN_COMPLETE);
                resetInitialSettings();
            }
            function onMetricAdded(e) {
                if (e.metric === _constantsMetricsConstants2["default"].DVR_INFO) {
                    if (e.mediaType === _constantsConstants2["default"].AUDIO) {
                        mediaSourceController.setSeekable(mediaSource, e.value.range.start, e.value.range.end);
                    }
                }
            }
            instance = {
                initialize: initialize,
                getActiveStreamInfo: getActiveStreamInfo,
                isTrackTypePresent: isTrackTypePresent,
                switchToVideoElement: switchToVideoElement,
                getStreamById: getStreamById,
                getStreamForTime: getStreamForTime,
                getTimeRelativeToStreamId: getTimeRelativeToStreamId,
                load: load,
                loadWithManifest: loadWithManifest,
                getActiveStreamProcessors: getActiveStreamProcessors,
                setConfig: setConfig,
                setProtectionData: setProtectionData,
                reset: reset
            };
            setup();
            return instance;
        }
        StreamController.__dashjs_factory_name = "StreamController";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(StreamController);
        module.exports = exports["default"];
    }, {
        100: 100,
        104: 104,
        107: 107,
        108: 108,
        111: 111,
        117: 117,
        121: 121,
        209: 209,
        216: 216,
        221: 221,
        239: 239,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55,
        98: 98
    } ],
    121: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _utilsURLUtils = _dereq_(216);
        var _utilsURLUtils2 = _interopRequireDefault(_utilsURLUtils);
        var HTTP_TIMEOUT_MS = 5e3;
        function TimeSyncController() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var urlUtils = (0, _utilsURLUtils2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, offsetToDeviceTimeMs = undefined, isSynchronizing = undefined, useManifestDateHeaderTimeSource = undefined, handlers = undefined, dashMetrics = undefined, baseURLController = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function initialize(timingSources, useManifestDateHeader) {
                useManifestDateHeaderTimeSource = useManifestDateHeader;
                offsetToDeviceTimeMs = 0;
                isSynchronizing = false;
                handlers = {
                    "urn:mpeg:dash:utc:http-head:2014": httpHeadHandler,
                    "urn:mpeg:dash:utc:http-xsdate:2014": httpHandler.bind(null, xsdatetimeDecoder),
                    "urn:mpeg:dash:utc:http-iso:2014": httpHandler.bind(null, iso8601Decoder),
                    "urn:mpeg:dash:utc:direct:2014": directHandler,
                    "urn:mpeg:dash:utc:http-head:2012": httpHeadHandler,
                    "urn:mpeg:dash:utc:http-xsdate:2012": httpHandler.bind(null, xsdatetimeDecoder),
                    "urn:mpeg:dash:utc:http-iso:2012": httpHandler.bind(null, iso8601Decoder),
                    "urn:mpeg:dash:utc:direct:2012": directHandler,
                    "urn:mpeg:dash:utc:http-ntp:2014": notSupportedHandler,
                    "urn:mpeg:dash:utc:ntp:2014": notSupportedHandler,
                    "urn:mpeg:dash:utc:sntp:2014": notSupportedHandler
                };
                if (!getIsSynchronizing()) {
                    attemptSync(timingSources);
                }
            }
            function setConfig(config) {
                if (!config) return;
                if (config.dashMetrics) {
                    dashMetrics = config.dashMetrics;
                }
                if (config.baseURLController) {
                    baseURLController = config.baseURLController;
                }
            }
            function getOffsetToDeviceTimeMs() {
                return getOffsetMs();
            }
            function setIsSynchronizing(value) {
                isSynchronizing = value;
            }
            function getIsSynchronizing() {
                return isSynchronizing;
            }
            function setOffsetMs(value) {
                offsetToDeviceTimeMs = value;
            }
            function getOffsetMs() {
                return offsetToDeviceTimeMs;
            }
            function alternateXsdatetimeDecoder(xsdatetimeStr) {
                var SECONDS_IN_MIN = 60;
                var MINUTES_IN_HOUR = 60;
                var MILLISECONDS_IN_SECONDS = 1e3;
                var datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+\-])([0-9]{2})([0-9]{2}))?/;
                var utcDate = undefined, timezoneOffset = undefined;
                var match = datetimeRegex.exec(xsdatetimeStr);
                utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && (parseInt(match[6], 10) || 0), match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0);
                if (match[9] && match[10]) {
                    timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);
                    utcDate += (match[8] === "+" ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;
                }
                return new Date(utcDate).getTime();
            }
            function xsdatetimeDecoder(xsdatetimeStr) {
                var parsedDate = Date.parse(xsdatetimeStr);
                if (isNaN(parsedDate)) {
                    parsedDate = alternateXsdatetimeDecoder(xsdatetimeStr);
                }
                return parsedDate;
            }
            function iso8601Decoder(isoStr) {
                return Date.parse(isoStr);
            }
            function rfc1123Decoder(dateStr) {
                return Date.parse(dateStr);
            }
            function notSupportedHandler(url, onSuccessCB, onFailureCB) {
                onFailureCB();
            }
            function directHandler(xsdatetimeStr, onSuccessCB, onFailureCB) {
                var time = xsdatetimeDecoder(xsdatetimeStr);
                if (!isNaN(time)) {
                    onSuccessCB(time);
                    return;
                }
                onFailureCB();
            }
            function httpHandler(decoder, url, onSuccessCB, onFailureCB, isHeadRequest) {
                var oncomplete = undefined, onload = undefined;
                var complete = false;
                var req = new XMLHttpRequest();
                var verb = isHeadRequest ? _voMetricsHTTPRequest.HTTPRequest.HEAD : _voMetricsHTTPRequest.HTTPRequest.GET;
                var urls = url.match(/\S+/g);
                url = urls.shift();
                oncomplete = function() {
                    if (complete) {
                        return;
                    }
                    complete = true;
                    if (urls.length) {
                        httpHandler(decoder, urls.join(" "), onSuccessCB, onFailureCB, isHeadRequest);
                    } else {
                        onFailureCB();
                    }
                };
                onload = function() {
                    var time = undefined, result = undefined;
                    if (req.status === 200) {
                        time = isHeadRequest ? req.getResponseHeader("Date") : req.response;
                        result = decoder(time);
                        if (!isNaN(result)) {
                            onSuccessCB(result);
                            complete = true;
                        }
                    }
                };
                if (urlUtils.isRelative(url)) {
                    var baseUrl = baseURLController.resolve();
                    if (baseUrl) {
                        url = urlUtils.resolve(url, baseUrl.url);
                    }
                }
                req.open(verb, url);
                req.timeout = HTTP_TIMEOUT_MS || 0;
                req.onload = onload;
                req.onloadend = oncomplete;
                req.send();
            }
            function httpHeadHandler(url, onSuccessCB, onFailureCB) {
                httpHandler(rfc1123Decoder, url, onSuccessCB, onFailureCB, true);
            }
            function checkForDateHeader() {
                var dateHeaderValue = dashMetrics.getLatestMPDRequestHeaderValueByID("Date");
                var dateHeaderTime = dateHeaderValue !== null ? new Date(dateHeaderValue).getTime() : Number.NaN;
                if (!isNaN(dateHeaderTime)) {
                    setOffsetMs(dateHeaderTime - new Date().getTime());
                    completeTimeSyncSequence(false, dateHeaderTime / 1e3, offsetToDeviceTimeMs);
                } else {
                    completeTimeSyncSequence(true);
                }
            }
            function completeTimeSyncSequence(failed, time, offset) {
                setIsSynchronizing(false);
                eventBus.trigger(_coreEventsEvents2["default"].TIME_SYNCHRONIZATION_COMPLETED, {
                    time: time,
                    offset: offset,
                    error: failed ? new _voDashJSError2["default"](_coreErrorsErrors2["default"].TIME_SYNC_FAILED_ERROR_CODE, _coreErrorsErrors2["default"].TIME_SYNC_FAILED_ERROR_MESSAGE) : null
                });
            }
            function calculateTimeOffset(serverTime, deviceTime) {
                return serverTime - deviceTime;
            }
            function attemptSync(sources, sourceIndex) {
                var index = sourceIndex || 0;
                var source = sources[index];
                var onComplete = function onComplete(time, offset) {
                    var failed = !time || !offset;
                    if (failed && useManifestDateHeaderTimeSource) {
                        checkForDateHeader();
                    } else {
                        completeTimeSyncSequence(failed, time, offset);
                    }
                };
                setIsSynchronizing(true);
                if (source) {
                    if (handlers.hasOwnProperty(source.schemeIdUri)) {
                        handlers[source.schemeIdUri](source.value, function(serverTime) {
                            var deviceTime = new Date().getTime();
                            var offset = calculateTimeOffset(serverTime, deviceTime);
                            setOffsetMs(offset);
                            logger.info("Local time: " + new Date(deviceTime));
                            logger.info("Server time: " + new Date(serverTime));
                            logger.info("Server Time - Local Time (ms): " + offset);
                            onComplete(serverTime, offset);
                        }, function() {
                            attemptSync(sources, index + 1);
                        });
                    } else {
                        attemptSync(sources, index + 1);
                    }
                } else {
                    setOffsetMs(0);
                    onComplete();
                }
            }
            function reset() {
                setIsSynchronizing(false);
            }
            instance = {
                initialize: initialize,
                getOffsetToDeviceTimeMs: getOffsetToDeviceTimeMs,
                setConfig: setConfig,
                reset: reset
            };
            setup();
            return instance;
        }
        TimeSyncController.__dashjs_factory_name = "TimeSyncController";
        var factory = _coreFactoryMaker2["default"].getSingletonFactory(TimeSyncController);
        factory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS;
        _coreFactoryMaker2["default"].updateSingletonFactory(TimeSyncController.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        216: 216,
        221: 221,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    122: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _XlinkLoader = _dereq_(106);
        var _XlinkLoader2 = _interopRequireDefault(_XlinkLoader);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _externalsXml2json = _dereq_(3);
        var _externalsXml2json2 = _interopRequireDefault(_externalsXml2json);
        var _utilsURLUtils = _dereq_(216);
        var _utilsURLUtils2 = _interopRequireDefault(_utilsURLUtils);
        var _dashConstantsDashConstants = _dereq_(62);
        var _dashConstantsDashConstants2 = _interopRequireDefault(_dashConstantsDashConstants);
        var RESOLVE_TYPE_ONLOAD = "onLoad";
        var RESOLVE_TYPE_ONACTUATE = "onActuate";
        var RESOLVE_TO_ZERO = "urn:mpeg:dash:resolve-to-zero:2013";
        function XlinkController(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var urlUtils = (0, _utilsURLUtils2["default"])(context).getInstance();
            var instance = undefined, matchers = undefined, iron = undefined, manifest = undefined, converter = undefined, xlinkLoader = undefined;
            function setup() {
                eventBus.on(_coreEventsEvents2["default"].XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);
                xlinkLoader = (0, _XlinkLoader2["default"])(context).create({
                    errHandler: config.errHandler,
                    dashMetrics: config.dashMetrics,
                    mediaPlayerModel: config.mediaPlayerModel,
                    requestModifier: config.requestModifier
                });
            }
            function setMatchers(value) {
                if (value) {
                    matchers = value;
                }
            }
            function setIron(value) {
                if (value) {
                    iron = value;
                }
            }
            function resolveManifestOnLoad(mpd) {
                var elements = undefined;
                converter = new _externalsXml2json2["default"]({
                    escapeMode: false,
                    attributePrefix: "",
                    arrayAccessForm: "property",
                    emptyNodeForm: "object",
                    stripWhitespaces: false,
                    enableToStringFunc: false,
                    ignoreRoot: true,
                    matchers: matchers
                });
                manifest = mpd;
                elements = getElementsToResolve(manifest.Period_asArray, manifest, _dashConstantsDashConstants2["default"].PERIOD, RESOLVE_TYPE_ONLOAD);
                resolve(elements, _dashConstantsDashConstants2["default"].PERIOD, RESOLVE_TYPE_ONLOAD);
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);
                if (xlinkLoader) {
                    xlinkLoader.reset();
                    xlinkLoader = null;
                }
            }
            function resolve(elements, type, resolveType) {
                var resolveObject = {};
                var element = undefined, url = undefined;
                resolveObject.elements = elements;
                resolveObject.type = type;
                resolveObject.resolveType = resolveType;
                if (resolveObject.elements.length === 0) {
                    onXlinkAllElementsLoaded(resolveObject);
                }
                for (var i = 0; i < resolveObject.elements.length; i++) {
                    element = resolveObject.elements[i];
                    if (urlUtils.isHTTPURL(element.url)) {
                        url = element.url;
                    } else {
                        url = element.originalContent.BaseURL + element.url;
                    }
                    xlinkLoader.load(url, element, resolveObject);
                }
            }
            function onXlinkElementLoaded(event) {
                var element = undefined, resolveObject = undefined;
                var openingTag = "<response>";
                var closingTag = "</response>";
                var mergedContent = "";
                element = event.element;
                resolveObject = event.resolveObject;
                if (element.resolvedContent) {
                    var index = 0;
                    if (element.resolvedContent.indexOf("<?xml") === 0) {
                        index = element.resolvedContent.indexOf("?>") + 2;
                    }
                    mergedContent = element.resolvedContent.substr(0, index) + openingTag + element.resolvedContent.substr(index) + closingTag;
                    element.resolvedContent = converter.xml_str2json(mergedContent);
                }
                if (isResolvingFinished(resolveObject)) {
                    onXlinkAllElementsLoaded(resolveObject);
                }
            }
            function onXlinkAllElementsLoaded(resolveObject) {
                var elements = [];
                var i = undefined, obj = undefined;
                mergeElementsBack(resolveObject);
                if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {
                    eventBus.trigger(_coreEventsEvents2["default"].XLINK_READY, {
                        manifest: manifest
                    });
                }
                if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {
                    switch (resolveObject.type) {
                      case _dashConstantsDashConstants2["default"].PERIOD:
                        for (i = 0; i < manifest[_dashConstantsDashConstants2["default"].PERIOD + "_asArray"].length; i++) {
                            obj = manifest[_dashConstantsDashConstants2["default"].PERIOD + "_asArray"][i];
                            if (obj.hasOwnProperty(_dashConstantsDashConstants2["default"].ADAPTATION_SET + "_asArray")) {
                                elements = elements.concat(getElementsToResolve(obj[_dashConstantsDashConstants2["default"].ADAPTATION_SET + "_asArray"], obj, _dashConstantsDashConstants2["default"].ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));
                            }
                            if (obj.hasOwnProperty(_dashConstantsDashConstants2["default"].EVENT_STREAM + "_asArray")) {
                                elements = elements.concat(getElementsToResolve(obj[_dashConstantsDashConstants2["default"].EVENT_STREAM + "_asArray"], obj, _dashConstantsDashConstants2["default"].EVENT_STREAM, RESOLVE_TYPE_ONLOAD));
                            }
                        }
                        resolve(elements, _dashConstantsDashConstants2["default"].ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);
                        break;

                      case _dashConstantsDashConstants2["default"].ADAPTATION_SET:
                        eventBus.trigger(_coreEventsEvents2["default"].XLINK_READY, {
                            manifest: manifest
                        });
                        break;
                    }
                }
            }
            function getElementsToResolve(elements, parentElement, type, resolveType) {
                var toResolve = [];
                var element = undefined, i = undefined, xlinkObject = undefined;
                for (i = elements.length - 1; i >= 0; i--) {
                    element = elements[i];
                    if (element.hasOwnProperty("xlink:href") && element["xlink:href"] === RESOLVE_TO_ZERO) {
                        elements.splice(i, 1);
                    }
                }
                for (i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if (element.hasOwnProperty("xlink:href") && element.hasOwnProperty("xlink:actuate") && element["xlink:actuate"] === resolveType) {
                        xlinkObject = createXlinkObject(element["xlink:href"], parentElement, type, i, resolveType, element);
                        toResolve.push(xlinkObject);
                    }
                }
                return toResolve;
            }
            function mergeElementsBack(resolveObject) {
                var resolvedElements = [];
                var element = undefined, type = undefined, obj = undefined, i = undefined, j = undefined, k = undefined;
                for (i = resolveObject.elements.length - 1; i >= 0; i--) {
                    element = resolveObject.elements[i];
                    type = element.type + "_asArray";
                    if (!element.resolvedContent || isInappropriateTarget()) {
                        delete element.originalContent["xlink:actuate"];
                        delete element.originalContent["xlink:href"];
                        resolvedElements.push(element.originalContent);
                    } else if (element.resolvedContent) {
                        for (j = 0; j < element.resolvedContent[type].length; j++) {
                            obj = element.resolvedContent[type][j];
                            resolvedElements.push(obj);
                        }
                    }
                    element.parentElement[type].splice(element.index, 1);
                    for (k = 0; k < resolvedElements.length; k++) {
                        element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);
                    }
                    resolvedElements = [];
                }
                if (resolveObject.elements.length > 0) {
                    iron.run(manifest);
                }
            }
            function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {
                return {
                    url: url,
                    parentElement: parentElement,
                    type: type,
                    index: index,
                    resolveType: resolveType,
                    originalContent: originalContent,
                    resolvedContent: null,
                    resolved: false
                };
            }
            function isResolvingFinished(elementsToResolve) {
                var i = undefined, obj = undefined;
                for (i = 0; i < elementsToResolve.elements.length; i++) {
                    obj = elementsToResolve.elements[i];
                    if (obj.resolved === false) {
                        return false;
                    }
                }
                return true;
            }
            function isInappropriateTarget() {
                return false;
            }
            instance = {
                resolveManifestOnLoad: resolveManifestOnLoad,
                setMatchers: setMatchers,
                setIron: setIron,
                reset: reset
            };
            setup();
            return instance;
        }
        XlinkController.__dashjs_factory_name = "XlinkController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(XlinkController);
        module.exports = exports["default"];
    }, {
        106: 106,
        216: 216,
        3: 3,
        47: 47,
        48: 48,
        55: 55,
        62: 62
    } ],
    123: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _utilsDVBErrorsTranslator = _dereq_(137);
        var _utilsDVBErrorsTranslator2 = _interopRequireDefault(_utilsDVBErrorsTranslator);
        var _MetricsReportingEvents = _dereq_(124);
        var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
        var _controllersMetricsCollectionController = _dereq_(125);
        var _controllersMetricsCollectionController2 = _interopRequireDefault(_controllersMetricsCollectionController);
        var _metricsMetricsHandlerFactory = _dereq_(130);
        var _metricsMetricsHandlerFactory2 = _interopRequireDefault(_metricsMetricsHandlerFactory);
        var _reportingReportingFactory = _dereq_(135);
        var _reportingReportingFactory2 = _interopRequireDefault(_reportingReportingFactory);
        function MetricsReporting() {
            var context = this.context;
            var instance = undefined, dvbErrorsTranslator = undefined;
            function createMetricsReporting(config) {
                dvbErrorsTranslator = (0, _utilsDVBErrorsTranslator2["default"])(context).getInstance({
                    eventBus: config.eventBus,
                    dashMetrics: config.dashMetrics,
                    metricsConstants: config.metricsConstants,
                    events: config.events
                });
                return (0, _controllersMetricsCollectionController2["default"])(context).create(config);
            }
            function getReportingFactory() {
                return (0, _reportingReportingFactory2["default"])(context).getInstance();
            }
            function getMetricsHandlerFactory() {
                return (0, _metricsMetricsHandlerFactory2["default"])(context).getInstance();
            }
            instance = {
                createMetricsReporting: createMetricsReporting,
                getReportingFactory: getReportingFactory,
                getMetricsHandlerFactory: getMetricsHandlerFactory
            };
            return instance;
        }
        MetricsReporting.__dashjs_factory_name = "MetricsReporting";
        var factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting);
        factory.events = _MetricsReportingEvents2["default"];
        dashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        124: 124,
        125: 125,
        130: 130,
        135: 135,
        137: 137
    } ],
    124: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _coreEventsEventsBase = _dereq_(56);
        var _coreEventsEventsBase2 = _interopRequireDefault(_coreEventsEventsBase);
        var MetricsReportingEvents = function(_EventsBase) {
            _inherits(MetricsReportingEvents, _EventsBase);
            function MetricsReportingEvents() {
                _classCallCheck(this, MetricsReportingEvents);
                _get(Object.getPrototypeOf(MetricsReportingEvents.prototype), "constructor", this).call(this);
                this.METRICS_INITIALISATION_COMPLETE = "internal_metricsReportingInitialized";
                this.BECAME_REPORTING_PLAYER = "internal_becameReportingPlayer";
            }
            return MetricsReportingEvents;
        }(_coreEventsEventsBase2["default"]);
        var metricsReportingEvents = new MetricsReportingEvents();
        exports["default"] = metricsReportingEvents;
        module.exports = exports["default"];
    }, {
        56: 56
    } ],
    125: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _MetricsController = _dereq_(126);
        var _MetricsController2 = _interopRequireDefault(_MetricsController);
        var _utilsManifestParsing = _dereq_(139);
        var _utilsManifestParsing2 = _interopRequireDefault(_utilsManifestParsing);
        var _MetricsReportingEvents = _dereq_(124);
        var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
        function MetricsCollectionController(config) {
            config = config || {};
            var metricsControllers = {};
            var context = this.context;
            var eventBus = config.eventBus;
            var events = config.events;
            function update(e) {
                if (e.error) {
                    return;
                }
                var controllersToRemove = Object.keys(metricsControllers);
                var metrics = (0, _utilsManifestParsing2["default"])(context).getInstance({
                    adapter: config.adapter,
                    constants: config.constants
                }).getMetrics(e.manifest);
                metrics.forEach(function(m) {
                    var key = JSON.stringify(m);
                    if (!metricsControllers.hasOwnProperty(key)) {
                        try {
                            var controller = (0, _MetricsController2["default"])(context).create(config);
                            controller.initialize(m);
                            metricsControllers[key] = controller;
                        } catch (e) {}
                    } else {
                        controllersToRemove.splice(key, 1);
                    }
                });
                controllersToRemove.forEach(function(c) {
                    metricsControllers[c].reset();
                    delete metricsControllers[c];
                });
                eventBus.trigger(_MetricsReportingEvents2["default"].METRICS_INITIALISATION_COMPLETE);
            }
            function resetMetricsControllers() {
                Object.keys(metricsControllers).forEach(function(key) {
                    metricsControllers[key].reset();
                });
                metricsControllers = {};
            }
            function setup() {
                eventBus.on(events.MANIFEST_UPDATED, update);
                eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);
            }
            function reset() {
                eventBus.off(events.MANIFEST_UPDATED, update);
                eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);
            }
            setup();
            return {
                reset: reset
            };
        }
        MetricsCollectionController.__dashjs_factory_name = "MetricsCollectionController";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(MetricsCollectionController);
        module.exports = exports["default"];
    }, {
        124: 124,
        126: 126,
        139: 139
    } ],
    126: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _RangeController = _dereq_(128);
        var _RangeController2 = _interopRequireDefault(_RangeController);
        var _ReportingController = _dereq_(129);
        var _ReportingController2 = _interopRequireDefault(_ReportingController);
        var _MetricsHandlersController = _dereq_(127);
        var _MetricsHandlersController2 = _interopRequireDefault(_MetricsHandlersController);
        function MetricsController(config) {
            config = config || {};
            var metricsHandlersController = undefined, reportingController = undefined, rangeController = undefined, instance = undefined;
            var context = this.context;
            function initialize(metricsEntry) {
                try {
                    rangeController = (0, _RangeController2["default"])(context).create({
                        mediaElement: config.mediaElement
                    });
                    rangeController.initialize(metricsEntry.Range);
                    reportingController = (0, _ReportingController2["default"])(context).create({
                        debug: config.debug,
                        metricsConstants: config.metricsConstants
                    });
                    reportingController.initialize(metricsEntry.Reporting, rangeController);
                    metricsHandlersController = (0, _MetricsHandlersController2["default"])(context).create({
                        debug: config.debug,
                        eventBus: config.eventBus,
                        metricsConstants: config.metricsConstants,
                        events: config.events
                    });
                    metricsHandlersController.initialize(metricsEntry.metrics, reportingController);
                } catch (e) {
                    reset();
                    throw e;
                }
            }
            function reset() {
                if (metricsHandlersController) {
                    metricsHandlersController.reset();
                }
                if (reportingController) {
                    reportingController.reset();
                }
                if (rangeController) {
                    rangeController.reset();
                }
            }
            instance = {
                initialize: initialize,
                reset: reset
            };
            return instance;
        }
        MetricsController.__dashjs_factory_name = "MetricsController";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(MetricsController);
        module.exports = exports["default"];
    }, {
        127: 127,
        128: 128,
        129: 129
    } ],
    127: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _metricsMetricsHandlerFactory = _dereq_(130);
        var _metricsMetricsHandlerFactory2 = _interopRequireDefault(_metricsMetricsHandlerFactory);
        function MetricsHandlersController(config) {
            config = config || {};
            var handlers = [];
            var instance = undefined;
            var context = this.context;
            var eventBus = config.eventBus;
            var Events = config.events;
            var metricsHandlerFactory = (0, _metricsMetricsHandlerFactory2["default"])(context).getInstance({
                debug: config.debug,
                eventBus: config.eventBus,
                metricsConstants: config.metricsConstants
            });
            function handle(e) {
                handlers.forEach(function(handler) {
                    handler.handleNewMetric(e.metric, e.value, e.mediaType);
                });
            }
            function initialize(metrics, reportingController) {
                metrics.split(",").forEach(function(m, midx, ms) {
                    var handler = undefined;
                    if (m.indexOf("(") !== -1 && m.indexOf(")") === -1) {
                        var nextm = ms[midx + 1];
                        if (nextm && nextm.indexOf("(") === -1 && nextm.indexOf(")") !== -1) {
                            m += "," + nextm;
                            delete ms[midx + 1];
                        }
                    }
                    handler = metricsHandlerFactory.create(m, reportingController);
                    if (handler) {
                        handlers.push(handler);
                    }
                });
                eventBus.on(Events.METRIC_ADDED, handle, instance);
                eventBus.on(Events.METRIC_UPDATED, handle, instance);
            }
            function reset() {
                eventBus.off(Events.METRIC_ADDED, handle, instance);
                eventBus.off(Events.METRIC_UPDATED, handle, instance);
                handlers.forEach(function(handler) {
                    return handler.reset();
                });
                handlers = [];
            }
            instance = {
                initialize: initialize,
                reset: reset
            };
            return instance;
        }
        MetricsHandlersController.__dashjs_factory_name = "MetricsHandlersController";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(MetricsHandlersController);
        module.exports = exports["default"];
    }, {
        130: 130
    } ],
    128: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _utilsCustomTimeRanges = _dereq_(205);
        var _utilsCustomTimeRanges2 = _interopRequireDefault(_utilsCustomTimeRanges);
        function RangeController(config) {
            config = config || {};
            var useWallClockTime = false;
            var context = this.context;
            var instance = undefined, ranges = undefined;
            var mediaElement = config.mediaElement;
            function initialize(rs) {
                if (rs && rs.length) {
                    rs.forEach(function(r) {
                        var start = r.starttime;
                        var end = start + r.duration;
                        ranges.add(start, end);
                    });
                    useWallClockTime = !!rs[0]._useWallClockTime;
                }
            }
            function reset() {
                ranges.clear();
            }
            function setup() {
                ranges = (0, _utilsCustomTimeRanges2["default"])(context).create();
            }
            function isEnabled() {
                var numRanges = ranges.length;
                var time = undefined;
                if (!numRanges) {
                    return true;
                }
                time = useWallClockTime ? new Date().getTime() / 1e3 : mediaElement.currentTime;
                for (var i = 0; i < numRanges; i += 1) {
                    var start = ranges.start(i);
                    var end = ranges.end(i);
                    if (start <= time && time < end) {
                        return true;
                    }
                }
                return false;
            }
            instance = {
                initialize: initialize,
                reset: reset,
                isEnabled: isEnabled
            };
            setup();
            return instance;
        }
        RangeController.__dashjs_factory_name = "RangeController";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(RangeController);
        module.exports = exports["default"];
    }, {
        205: 205
    } ],
    129: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _reportingReportingFactory = _dereq_(135);
        var _reportingReportingFactory2 = _interopRequireDefault(_reportingReportingFactory);
        function ReportingController(config) {
            var reporters = [];
            var instance = undefined;
            var reportingFactory = (0, _reportingReportingFactory2["default"])(this.context).getInstance(config);
            function initialize(reporting, rangeController) {
                reporting.some(function(r) {
                    var reporter = reportingFactory.create(r, rangeController);
                    if (reporter) {
                        reporters.push(reporter);
                        return true;
                    }
                });
            }
            function reset() {
                reporters.forEach(function(r) {
                    return r.reset();
                });
                reporters = [];
            }
            function report(type, vos) {
                reporters.forEach(function(r) {
                    return r.report(type, vos);
                });
            }
            instance = {
                initialize: initialize,
                reset: reset,
                report: report
            };
            return instance;
        }
        ReportingController.__dashjs_factory_name = "ReportingController";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(ReportingController);
        module.exports = exports["default"];
    }, {
        135: 135
    } ],
    130: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _handlersBufferLevelHandler = _dereq_(131);
        var _handlersBufferLevelHandler2 = _interopRequireDefault(_handlersBufferLevelHandler);
        var _handlersDVBErrorsHandler = _dereq_(132);
        var _handlersDVBErrorsHandler2 = _interopRequireDefault(_handlersDVBErrorsHandler);
        var _handlersHttpListHandler = _dereq_(134);
        var _handlersHttpListHandler2 = _interopRequireDefault(_handlersHttpListHandler);
        var _handlersGenericMetricHandler = _dereq_(133);
        var _handlersGenericMetricHandler2 = _interopRequireDefault(_handlersGenericMetricHandler);
        function MetricsHandlerFactory(config) {
            config = config || {};
            var instance = undefined;
            var debug = config.debug;
            var keyRegex = /([a-zA-Z]*)(\(([0-9]*)(\,\s*([a-zA-Z]*))?\))?/;
            var context = this.context;
            var knownFactoryProducts = {
                BufferLevel: _handlersBufferLevelHandler2["default"],
                DVBErrors: _handlersDVBErrorsHandler2["default"],
                HttpList: _handlersHttpListHandler2["default"],
                PlayList: _handlersGenericMetricHandler2["default"],
                RepSwitchList: _handlersGenericMetricHandler2["default"],
                TcpList: _handlersGenericMetricHandler2["default"]
            };
            function create(listType, reportingController) {
                var matches = listType.match(keyRegex);
                var handler;
                if (!matches) {
                    return;
                }
                try {
                    handler = knownFactoryProducts[matches[1]](context).create({
                        eventBus: config.eventBus,
                        metricsConstants: config.metricsConstants
                    });
                    handler.initialize(matches[1], reportingController, matches[3], matches[5]);
                } catch (e) {
                    handler = null;
                    debug.error("MetricsHandlerFactory: Could not create handler for type " + matches[1] + " with args " + matches[3] + ", " + matches[5] + " (" + e.message + ")");
                }
                return handler;
            }
            function register(key, handler) {
                knownFactoryProducts[key] = handler;
            }
            function unregister(key) {
                delete knownFactoryProducts[key];
            }
            instance = {
                create: create,
                register: register,
                unregister: unregister
            };
            return instance;
        }
        MetricsHandlerFactory.__dashjs_factory_name = "MetricsHandlerFactory";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory);
        module.exports = exports["default"];
    }, {
        131: 131,
        132: 132,
        133: 133,
        134: 134
    } ],
    131: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _utilsHandlerHelpers = _dereq_(138);
        var _utilsHandlerHelpers2 = _interopRequireDefault(_utilsHandlerHelpers);
        function BufferLevelHandler(config) {
            config = config || {};
            var instance = undefined, reportingController = undefined, n = undefined, name = undefined, interval = undefined, lastReportedTime = undefined;
            var context = this.context;
            var handlerHelpers = (0, _utilsHandlerHelpers2["default"])(context).getInstance();
            var storedVOs = [];
            var metricsConstants = config.metricsConstants;
            function getLowestBufferLevelVO() {
                try {
                    return Object.keys(storedVOs).map(function(key) {
                        return storedVOs[key];
                    }).reduce(function(a, b) {
                        return a.level < b.level ? a : b;
                    });
                } catch (e) {
                    return;
                }
            }
            function intervalCallback() {
                var vo = getLowestBufferLevelVO();
                if (vo) {
                    if (lastReportedTime !== vo.t) {
                        lastReportedTime = vo.t;
                        reportingController.report(name, vo);
                    }
                }
            }
            function initialize(basename, rc, n_ms) {
                if (rc) {
                    n = handlerHelpers.validateN(n_ms);
                    reportingController = rc;
                    name = handlerHelpers.reconstructFullMetricName(basename, n_ms);
                    interval = setInterval(intervalCallback, n);
                }
            }
            function reset() {
                clearInterval(interval);
                interval = null;
                n = 0;
                reportingController = null;
                lastReportedTime = null;
            }
            function handleNewMetric(metric, vo, type) {
                if (metric === metricsConstants.BUFFER_LEVEL) {
                    storedVOs[type] = vo;
                }
            }
            instance = {
                initialize: initialize,
                reset: reset,
                handleNewMetric: handleNewMetric
            };
            return instance;
        }
        BufferLevelHandler.__dashjs_factory_name = "BufferLevelHandler";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(BufferLevelHandler);
        module.exports = exports["default"];
    }, {
        138: 138
    } ],
    132: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _MetricsReportingEvents = _dereq_(124);
        var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
        function DVBErrorsHandler(config) {
            config = config || {};
            var instance = undefined, reportingController = undefined;
            var eventBus = config.eventBus;
            var metricsConstants = config.metricsConstants;
            function onInitialisationComplete() {
                eventBus.off(_MetricsReportingEvents2["default"].METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this);
                eventBus.trigger(_MetricsReportingEvents2["default"].BECAME_REPORTING_PLAYER);
            }
            function initialize(unused, rc) {
                if (rc) {
                    reportingController = rc;
                    eventBus.on(_MetricsReportingEvents2["default"].METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this);
                }
            }
            function reset() {
                reportingController = null;
            }
            function handleNewMetric(metric, vo) {
                if (metric === metricsConstants.DVB_ERRORS) {
                    if (reportingController) {
                        reportingController.report(metric, vo);
                    }
                }
            }
            instance = {
                initialize: initialize,
                reset: reset,
                handleNewMetric: handleNewMetric
            };
            return instance;
        }
        exports["default"] = dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler);
        module.exports = exports["default"];
    }, {
        124: 124
    } ],
    133: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function GenericMetricHandler() {
            var instance = undefined, metricName = undefined, reportingController = undefined;
            function initialize(name, rc) {
                metricName = name;
                reportingController = rc;
            }
            function reset() {
                reportingController = null;
                metricName = undefined;
            }
            function handleNewMetric(metric, vo) {
                if (metric === metricName) {
                    if (reportingController) {
                        reportingController.report(metricName, vo);
                    }
                }
            }
            instance = {
                initialize: initialize,
                reset: reset,
                handleNewMetric: handleNewMetric
            };
            return instance;
        }
        GenericMetricHandler.__dashjs_factory_name = "GenericMetricHandler";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(GenericMetricHandler);
        module.exports = exports["default"];
    }, {} ],
    134: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _utilsHandlerHelpers = _dereq_(138);
        var _utilsHandlerHelpers2 = _interopRequireDefault(_utilsHandlerHelpers);
        function HttpListHandler(config) {
            config = config || {};
            var instance = undefined, reportingController = undefined, n = undefined, type = undefined, name = undefined, interval = undefined;
            var storedVos = [];
            var handlerHelpers = (0, _utilsHandlerHelpers2["default"])(this.context).getInstance();
            var metricsConstants = config.metricsConstants;
            function intervalCallback() {
                var vos = storedVos;
                if (vos.length) {
                    if (reportingController) {
                        reportingController.report(name, vos);
                    }
                }
                storedVos = [];
            }
            function initialize(basename, rc, n_ms, requestType) {
                if (rc) {
                    n = handlerHelpers.validateN(n_ms);
                    reportingController = rc;
                    if (requestType && requestType.length) {
                        type = requestType;
                    }
                    name = handlerHelpers.reconstructFullMetricName(basename, n_ms, requestType);
                    interval = setInterval(intervalCallback, n);
                }
            }
            function reset() {
                clearInterval(interval);
                interval = null;
                n = null;
                type = null;
                storedVos = [];
                reportingController = null;
            }
            function handleNewMetric(metric, vo) {
                if (metric === metricsConstants.HTTP_REQUEST) {
                    if (!type || type === vo.type) {
                        storedVos.push(vo);
                    }
                }
            }
            instance = {
                initialize: initialize,
                reset: reset,
                handleNewMetric: handleNewMetric
            };
            return instance;
        }
        HttpListHandler.__dashjs_factory_name = "HttpListHandler";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(HttpListHandler);
        module.exports = exports["default"];
    }, {
        138: 138
    } ],
    135: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _reportersDVBReporting = _dereq_(136);
        var _reportersDVBReporting2 = _interopRequireDefault(_reportersDVBReporting);
        function ReportingFactory(config) {
            config = config || {};
            var knownReportingSchemeIdUris = {
                "urn:dvb:dash:reporting:2014": _reportersDVBReporting2["default"]
            };
            var context = this.context;
            var debug = config.debug;
            var metricsConstants = config.metricsConstants;
            var instance = undefined;
            function create(entry, rangeController) {
                var reporting = undefined;
                try {
                    reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({
                        metricsConstants: metricsConstants
                    });
                    reporting.initialize(entry, rangeController);
                } catch (e) {
                    reporting = null;
                    debug.error("ReportingFactory: could not create Reporting with schemeIdUri " + entry.schemeIdUri + " (" + e.message + ")");
                }
                return reporting;
            }
            function register(schemeIdUri, moduleName) {
                knownReportingSchemeIdUris[schemeIdUri] = moduleName;
            }
            function unregister(schemeIdUri) {
                delete knownReportingSchemeIdUris[schemeIdUri];
            }
            instance = {
                create: create,
                register: register,
                unregister: unregister
            };
            return instance;
        }
        ReportingFactory.__dashjs_factory_name = "ReportingFactory";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(ReportingFactory);
        module.exports = exports["default"];
    }, {
        136: 136
    } ],
    136: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _utilsMetricSerialiser = _dereq_(140);
        var _utilsMetricSerialiser2 = _interopRequireDefault(_utilsMetricSerialiser);
        var _utilsRNG = _dereq_(141);
        var _utilsRNG2 = _interopRequireDefault(_utilsRNG);
        function DVBReporting(config) {
            config = config || {};
            var instance = undefined;
            var context = this.context;
            var metricSerialiser = undefined, randomNumberGenerator = undefined, reportingPlayerStatusDecided = undefined, isReportingPlayer = undefined, reportingUrl = undefined, rangeController = undefined;
            var USE_DRAFT_DVB_SPEC = true;
            var allowPendingRequestsToCompleteOnReset = true;
            var pendingRequests = [];
            var metricsConstants = config.metricsConstants;
            function setup() {
                metricSerialiser = (0, _utilsMetricSerialiser2["default"])(context).getInstance();
                randomNumberGenerator = (0, _utilsRNG2["default"])(context).getInstance();
                resetInitialSettings();
            }
            function doGetRequest(url, successCB, failureCB) {
                var req = new XMLHttpRequest();
                var oncomplete = function oncomplete() {
                    var reqIndex = pendingRequests.indexOf(req);
                    if (reqIndex === -1) {
                        return;
                    } else {
                        pendingRequests.splice(reqIndex, 1);
                    }
                    if (req.status >= 200 && req.status < 300) {
                        if (successCB) {
                            successCB();
                        }
                    } else {
                        if (failureCB) {
                            failureCB();
                        }
                    }
                };
                pendingRequests.push(req);
                try {
                    req.open("GET", url);
                    req.onloadend = oncomplete;
                    req.onerror = oncomplete;
                    req.send();
                } catch (e) {
                    req.onerror();
                }
            }
            function report(type, vos) {
                if (!Array.isArray(vos)) {
                    vos = [ vos ];
                }
                if (isReportingPlayer && rangeController.isEnabled()) {
                    vos.forEach(function(vo) {
                        var url = metricSerialiser.serialise(vo);
                        if (USE_DRAFT_DVB_SPEC && type !== metricsConstants.DVB_ERRORS) {
                            url = "metricname=" + type + "&" + url;
                        }
                        url = reportingUrl + "?" + url;
                        doGetRequest(url, null, function() {
                            isReportingPlayer = false;
                        });
                    });
                }
            }
            function initialize(entry, rc) {
                var probability = undefined;
                rangeController = rc;
                reportingUrl = entry["dvb:reportingUrl"];
                if (!reportingUrl) {
                    throw new Error("required parameter missing (dvb:reportingUrl)");
                }
                if (!reportingPlayerStatusDecided) {
                    probability = entry["dvb:probability"] || entry["dvb:priority"] || 0;
                    if (probability && (probability === 1e3 || probability / 1e3 >= randomNumberGenerator.random())) {
                        isReportingPlayer = true;
                    }
                    reportingPlayerStatusDecided = true;
                }
            }
            function resetInitialSettings() {
                reportingPlayerStatusDecided = false;
                isReportingPlayer = false;
                reportingUrl = null;
                rangeController = null;
            }
            function reset() {
                if (!allowPendingRequestsToCompleteOnReset) {
                    pendingRequests.forEach(function(req) {
                        return req.abort();
                    });
                    pendingRequests = [];
                }
                resetInitialSettings();
            }
            instance = {
                report: report,
                initialize: initialize,
                reset: reset
            };
            setup();
            return instance;
        }
        DVBReporting.__dashjs_factory_name = "DVBReporting";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(DVBReporting);
        module.exports = exports["default"];
    }, {
        140: 140,
        141: 141
    } ],
    137: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voDVBErrors = _dereq_(142);
        var _voDVBErrors2 = _interopRequireDefault(_voDVBErrors);
        var _MetricsReportingEvents = _dereq_(124);
        var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
        function DVBErrorsTranslator(config) {
            config = config || {};
            var instance = undefined, mpd = undefined;
            var eventBus = config.eventBus;
            var dashMetrics = config.dashMetrics;
            var metricsConstants = config.metricsConstants;
            var Events = config.events;
            function report(vo) {
                var o = new _voDVBErrors2["default"]();
                if (!mpd) {
                    return;
                }
                for (var key in vo) {
                    if (vo.hasOwnProperty(key)) {
                        o[key] = vo[key];
                    }
                }
                if (!o.mpdurl) {
                    o.mpdurl = mpd.originalUrl || mpd.url;
                }
                if (!o.terror) {
                    o.terror = new Date();
                }
                dashMetrics.addDVBErrors(o);
            }
            function onManifestUpdate(e) {
                if (e.error) {
                    return;
                }
                mpd = e.manifest;
            }
            function onServiceLocationChanged(e) {
                report({
                    errorcode: _voDVBErrors2["default"].BASE_URL_CHANGED,
                    servicelocation: e.entry
                });
            }
            function onBecameReporter() {
                report({
                    errorcode: _voDVBErrors2["default"].BECAME_REPORTER
                });
            }
            function handleHttpMetric(vo) {
                if (vo.responsecode === 0 || vo.responsecode >= 400 || vo.responsecode < 100 || vo.responsecode >= 600) {
                    report({
                        errorcode: vo.responsecode || _voDVBErrors2["default"].CONNECTION_ERROR,
                        url: vo.url,
                        terror: vo.tresponse,
                        servicelocation: vo._serviceLocation
                    });
                }
            }
            function onMetricEvent(e) {
                switch (e.metric) {
                  case metricsConstants.HTTP_REQUEST:
                    handleHttpMetric(e.value);
                    break;

                  default:
                    break;
                }
            }
            function onPlaybackError(e) {
                var reason = e.error ? e.error.code : 0;
                var errorcode = undefined;
                switch (reason) {
                  case MediaError.MEDIA_ERR_NETWORK:
                    errorcode = _voDVBErrors2["default"].CONNECTION_ERROR;
                    break;

                  case MediaError.MEDIA_ERR_DECODE:
                    errorcode = _voDVBErrors2["default"].CORRUPT_MEDIA_OTHER;
                    break;

                  default:
                    return;
                }
                report({
                    errorcode: errorcode
                });
            }
            function initialise() {
                eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);
                eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);
                eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);
                eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);
                eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);
                eventBus.on(_MetricsReportingEvents2["default"].BECAME_REPORTING_PLAYER, onBecameReporter, instance);
            }
            function reset() {
                eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);
                eventBus.off(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);
                eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);
                eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);
                eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);
                eventBus.off(_MetricsReportingEvents2["default"].BECAME_REPORTING_PLAYER, onBecameReporter, instance);
            }
            instance = {
                initialise: initialise,
                reset: reset
            };
            initialise();
            return instance;
        }
        DVBErrorsTranslator.__dashjs_factory_name = "DVBErrorsTranslator";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator);
        module.exports = exports["default"];
    }, {
        124: 124,
        142: 142
    } ],
    138: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function HandlerHelpers() {
            return {
                reconstructFullMetricName: function reconstructFullMetricName(key, n, type) {
                    var mn = key;
                    if (n) {
                        mn += "(" + n;
                        if (type && type.length) {
                            mn += "," + type;
                        }
                        mn += ")";
                    }
                    return mn;
                },
                validateN: function validateN(n_ms) {
                    if (!n_ms) {
                        throw new Error("missing n");
                    }
                    if (isNaN(n_ms)) {
                        throw new Error("n is NaN");
                    }
                    if (n_ms < 0) {
                        throw new Error("n must be positive");
                    }
                    return n_ms;
                }
            };
        }
        HandlerHelpers.__dashjs_factory_name = "HandlerHelpers";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers);
        module.exports = exports["default"];
    }, {} ],
    139: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voMetrics = _dereq_(143);
        var _voMetrics2 = _interopRequireDefault(_voMetrics);
        var _voRange = _dereq_(144);
        var _voRange2 = _interopRequireDefault(_voRange);
        var _voReporting = _dereq_(145);
        var _voReporting2 = _interopRequireDefault(_voReporting);
        function ManifestParsing(config) {
            config = config || {};
            var instance = undefined;
            var adapter = config.adapter;
            var constants = config.constants;
            function getMetricsRangeStartTime(manifest, dynamic, range) {
                var mpd = adapter.getMpd(manifest);
                var voPeriods = undefined, reportingStartTime = undefined;
                var presentationStartTime = 0;
                if (dynamic) {
                    presentationStartTime = adapter.getAvailabilityStartTime(mpd) / 1e3;
                } else {
                    voPeriods = adapter.getRegularPeriods(mpd);
                    if (voPeriods.length) {
                        presentationStartTime = voPeriods[0].start;
                    }
                }
                reportingStartTime = presentationStartTime;
                if (range && range.hasOwnProperty(constants.START_TIME)) {
                    reportingStartTime += range.starttime;
                }
                return reportingStartTime;
            }
            function getMetrics(manifest) {
                var metrics = [];
                if (manifest && manifest.Metrics_asArray) {
                    manifest.Metrics_asArray.forEach(function(metric) {
                        var metricEntry = new _voMetrics2["default"]();
                        var isDynamic = adapter.getIsDynamic(manifest);
                        if (metric.hasOwnProperty("metrics")) {
                            metricEntry.metrics = metric.metrics;
                        } else {
                            return;
                        }
                        if (metric.Range_asArray) {
                            metric.Range_asArray.forEach(function(range) {
                                var rangeEntry = new _voRange2["default"]();
                                rangeEntry.starttime = getMetricsRangeStartTime(manifest, isDynamic, range);
                                if (range.hasOwnProperty("duration")) {
                                    rangeEntry.duration = range.duration;
                                } else {
                                    rangeEntry.duration = adapter.getDuration(manifest);
                                }
                                rangeEntry._useWallClockTime = isDynamic;
                                metricEntry.Range.push(rangeEntry);
                            });
                        }
                        if (metric.Reporting_asArray) {
                            metric.Reporting_asArray.forEach(function(reporting) {
                                var reportingEntry = new _voReporting2["default"]();
                                if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {
                                    reportingEntry.schemeIdUri = reporting.schemeIdUri;
                                } else {
                                    return;
                                }
                                for (var prop in reporting) {
                                    if (reporting.hasOwnProperty(prop)) {
                                        reportingEntry[prop] = reporting[prop];
                                    }
                                }
                                metricEntry.Reporting.push(reportingEntry);
                            });
                        } else {
                            return;
                        }
                        metrics.push(metricEntry);
                    });
                }
                return metrics;
            }
            instance = {
                getMetrics: getMetrics
            };
            return instance;
        }
        ManifestParsing.__dashjs_factory_name = "ManifestParsing";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(ManifestParsing);
        module.exports = exports["default"];
    }, {
        143: 143,
        144: 144,
        145: 145
    } ],
    140: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function MetricSerialiser() {
            function serialise(metric) {
                var pairs = [];
                var obj = [];
                var key = undefined, value = undefined;
                for (key in metric) {
                    if (metric.hasOwnProperty(key) && key.indexOf("_") !== 0) {
                        value = metric[key];
                        if (value === undefined || value === null) {
                            value = "";
                        }
                        if (Array.isArray(value)) {
                            if (!value.length) {
                                continue;
                            }
                            obj = [];
                            value.forEach(function(v) {
                                var isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== "Object";
                                obj.push(isBuiltIn ? v : serialise(v));
                            });
                            value = obj.map(encodeURIComponent).join(",");
                        } else if (typeof value === "string") {
                            value = encodeURIComponent(value);
                        } else if (value instanceof Date) {
                            value = value.toISOString();
                        } else if (typeof value === "number") {
                            value = Math.round(value);
                        }
                        pairs.push(key + "=" + value);
                    }
                }
                return pairs.join("&");
            }
            return {
                serialise: serialise
            };
        }
        MetricSerialiser.__dashjs_factory_name = "MetricSerialiser";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser);
        module.exports = exports["default"];
    }, {} ],
    141: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function RNG() {
            var crypto = window.crypto || window.msCrypto;
            var ArrayType = Uint32Array;
            var MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;
            var NUM_RANDOM_NUMBERS = 10;
            var randomNumbers = undefined, index = undefined, instance = undefined;
            function initialise() {
                if (crypto) {
                    if (!randomNumbers) {
                        randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);
                    }
                    crypto.getRandomValues(randomNumbers);
                    index = 0;
                }
            }
            function rand(min, max) {
                var r = undefined;
                if (!min) {
                    min = 0;
                }
                if (!max) {
                    max = 1;
                }
                if (crypto) {
                    if (index === randomNumbers.length) {
                        initialise();
                    }
                    r = randomNumbers[index] / MAX_VALUE;
                    index += 1;
                } else {
                    r = Math.random();
                }
                return r * (max - min) + min;
            }
            instance = {
                random: rand
            };
            initialise();
            return instance;
        }
        RNG.__dashjs_factory_name = "RNG";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(RNG);
        module.exports = exports["default"];
    }, {} ],
    142: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DVBErrors = function DVBErrors() {
            _classCallCheck(this, DVBErrors);
            this.mpdurl = null;
            this.errorcode = null;
            this.terror = null;
            this.url = null;
            this.ipaddress = null;
            this.servicelocation = null;
        };
        DVBErrors.SSL_CONNECTION_FAILED_PREFIX = "SSL";
        DVBErrors.DNS_RESOLUTION_FAILED = "C00";
        DVBErrors.HOST_UNREACHABLE = "C01";
        DVBErrors.CONNECTION_REFUSED = "C02";
        DVBErrors.CONNECTION_ERROR = "C03";
        DVBErrors.CORRUPT_MEDIA_ISOBMFF = "M00";
        DVBErrors.CORRUPT_MEDIA_OTHER = "M01";
        DVBErrors.BASE_URL_CHANGED = "F00";
        DVBErrors.BECAME_REPORTER = "S00";
        exports["default"] = DVBErrors;
        module.exports = exports["default"];
    }, {} ],
    143: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Metrics = function Metrics() {
            _classCallCheck(this, Metrics);
            this.metrics = "";
            this.Range = [];
            this.Reporting = [];
        };
        exports["default"] = Metrics;
        module.exports = exports["default"];
    }, {} ],
    144: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Range = function Range() {
            _classCallCheck(this, Range);
            this.starttime = 0;
            this.duration = Infinity;
            this._useWallClockTime = false;
        };
        exports["default"] = Range;
        module.exports = exports["default"];
    }, {} ],
    145: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Reporting = function Reporting() {
            _classCallCheck(this, Reporting);
            this.schemeIdUri = "";
            this.value = "";
        };
        exports["default"] = Reporting;
        module.exports = exports["default"];
    }, {} ],
    146: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _utilsObjectUtils = _dereq_(212);
        var _utilsObjectUtils2 = _interopRequireDefault(_utilsObjectUtils);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var DEFAULT_INDEX = NaN;
        var Node = function Node(_baseUrls, _selectedIdx) {
            _classCallCheck(this, Node);
            this.data = {
                baseUrls: _baseUrls || null,
                selectedIdx: _selectedIdx || DEFAULT_INDEX
            };
            this.children = [];
        };
        function BaseURLTreeModel() {
            var instance = undefined, root = undefined, adapter = undefined;
            var context = this.context;
            var objectUtils = (0, _utilsObjectUtils2["default"])(context).getInstance();
            function setup() {
                reset();
            }
            function setConfig(config) {
                if (config.adapter) {
                    adapter = config.adapter;
                }
            }
            function checkConfig() {
                if (!adapter || !adapter.hasOwnProperty("getBaseURLsFromElement") || !adapter.hasOwnProperty("getRepresentationSortFunction")) {
                    throw new Error("setConfig function has to be called previously");
                }
            }
            function updateChildData(node, index, element) {
                var baseUrls = adapter.getBaseURLsFromElement(element);
                if (!node[index]) {
                    node[index] = new Node(baseUrls);
                } else {
                    if (!objectUtils.areEqual(baseUrls, node[index].data.baseUrls)) {
                        node[index].data.baseUrls = baseUrls;
                        node[index].data.selectedIdx = DEFAULT_INDEX;
                    }
                }
            }
            function getBaseURLCollectionsFromManifest(manifest) {
                checkConfig();
                var baseUrls = adapter.getBaseURLsFromElement(manifest);
                if (!objectUtils.areEqual(baseUrls, root.data.baseUrls)) {
                    root.data.baseUrls = baseUrls;
                    root.data.selectedIdx = DEFAULT_INDEX;
                }
                if (manifest && manifest.Period_asArray) {
                    manifest.Period_asArray.forEach(function(p, pi) {
                        updateChildData(root.children, pi, p);
                        if (p.AdaptationSet_asArray) {
                            p.AdaptationSet_asArray.forEach(function(a, ai) {
                                updateChildData(root.children[pi].children, ai, a);
                                if (a.Representation_asArray) {
                                    a.Representation_asArray.sort(adapter.getRepresentationSortFunction()).forEach(function(r, ri) {
                                        updateChildData(root.children[pi].children[ai].children, ri, r);
                                    });
                                }
                            });
                        }
                    });
                }
            }
            function walk(callback, node) {
                var target = node || root;
                callback(target.data);
                if (target.children) {
                    target.children.forEach(function(child) {
                        return walk(callback, child);
                    });
                }
            }
            function invalidateSelectedIndexes(serviceLocation) {
                walk(function(data) {
                    if (!isNaN(data.selectedIdx)) {
                        if (serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation) {
                            data.selectedIdx = DEFAULT_INDEX;
                        }
                    }
                });
            }
            function update(manifest) {
                getBaseURLCollectionsFromManifest(manifest);
            }
            function reset() {
                root = new Node();
            }
            function getForPath(path) {
                var target = root;
                var nodes = [ target.data ];
                if (path) {
                    path.forEach(function(p) {
                        target = target.children[p];
                        if (target) {
                            nodes.push(target.data);
                        }
                    });
                }
                return nodes.filter(function(n) {
                    return n.baseUrls.length;
                });
            }
            instance = {
                reset: reset,
                update: update,
                getForPath: getForPath,
                invalidateSelectedIndexes: invalidateSelectedIndexes,
                setConfig: setConfig
            };
            setup();
            return instance;
        }
        BaseURLTreeModel.__dashjs_factory_name = "BaseURLTreeModel";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(BaseURLTreeModel);
        module.exports = exports["default"];
    }, {
        212: 212,
        48: 48
    } ],
    147: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voFragmentRequest = _dereq_(223);
        var _voFragmentRequest2 = _interopRequireDefault(_voFragmentRequest);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var FRAGMENT_MODEL_LOADING = "loading";
        var FRAGMENT_MODEL_EXECUTED = "executed";
        var FRAGMENT_MODEL_CANCELED = "canceled";
        var FRAGMENT_MODEL_FAILED = "failed";
        function FragmentModel(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var dashMetrics = config.dashMetrics;
            var fragmentLoader = config.fragmentLoader;
            var instance = undefined, logger = undefined, streamProcessor = undefined, executedRequests = undefined, loadingRequests = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].LOADING_COMPLETED, onLoadingCompleted, instance);
                eventBus.on(_coreEventsEvents2["default"].LOADING_DATA_PROGRESS, onLoadingInProgress, instance);
                eventBus.on(_coreEventsEvents2["default"].LOADING_ABANDONED, onLoadingAborted, instance);
            }
            function setStreamProcessor(value) {
                streamProcessor = value;
            }
            function getStreamProcessor() {
                return streamProcessor;
            }
            function isFragmentLoaded(request) {
                var isEqualComplete = function isEqualComplete(req1, req2) {
                    return req1.action === _voFragmentRequest2["default"].ACTION_COMPLETE && req1.action === req2.action;
                };
                var isEqualMedia = function isEqualMedia(req1, req2) {
                    return !isNaN(req1.index) && req1.startTime === req2.startTime && req1.adaptationIndex === req2.adaptationIndex && req1.type === req2.type;
                };
                var isEqualInit = function isEqualInit(req1, req2) {
                    return isNaN(req1.index) && isNaN(req2.index) && req1.quality === req2.quality;
                };
                var check = function check(requests) {
                    var isLoaded = false;
                    requests.some(function(req) {
                        if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) {
                            isLoaded = true;
                            return isLoaded;
                        }
                    });
                    return isLoaded;
                };
                if (!request) {
                    return false;
                }
                return check(executedRequests);
            }
            function isFragmentLoadedOrPending(request) {
                var isLoaded = false;
                var i = 0;
                var req = undefined;
                isLoaded = isFragmentLoaded(request);
                if (!isLoaded) {
                    for (i = 0; i < loadingRequests.length; i++) {
                        req = loadingRequests[i];
                        if (request.url === req.url && request.startTime === req.startTime) {
                            isLoaded = true;
                        }
                    }
                }
                return isLoaded;
            }
            function getRequests(filter) {
                var states = filter ? filter.state instanceof Array ? filter.state : [ filter.state ] : [];
                var filteredRequests = [];
                states.forEach(function(state) {
                    var requests = getRequestsForState(state);
                    filteredRequests = filteredRequests.concat(filterRequests(requests, filter));
                });
                return filteredRequests;
            }
            function getRequestThreshold(req) {
                return isNaN(req.duration) ? .25 : Math.min(req.duration / 8, .5);
            }
            function removeExecutedRequestsBeforeTime(time) {
                executedRequests = executedRequests.filter(function(req) {
                    var threshold = getRequestThreshold(req);
                    return isNaN(req.startTime) || (time !== undefined ? req.startTime >= time - threshold : false);
                });
            }
            function removeExecutedRequestsAfterTime(time) {
                executedRequests = executedRequests.filter(function(req) {
                    return isNaN(req.startTime) || (time !== undefined ? req.startTime < time : false);
                });
            }
            function removeExecutedRequestsInTimeRange(start, end) {
                if (end <= start + .5) {
                    return;
                }
                executedRequests = executedRequests.filter(function(req) {
                    var threshold = getRequestThreshold(req);
                    return isNaN(req.startTime) || req.startTime >= end - threshold || isNaN(req.duration) || req.startTime + req.duration <= start + threshold;
                });
            }
            function syncExecutedRequestsWithBufferedRange(bufferedRanges, streamDuration) {
                if (!bufferedRanges || bufferedRanges.length === 0) {
                    removeExecutedRequestsBeforeTime();
                    return;
                }
                var start = 0;
                for (var i = 0, ln = bufferedRanges.length; i < ln; i++) {
                    removeExecutedRequestsInTimeRange(start, bufferedRanges.start(i));
                    start = bufferedRanges.end(i);
                }
                if (streamDuration > 0) {
                    removeExecutedRequestsInTimeRange(start, streamDuration);
                }
            }
            function abortRequests() {
                fragmentLoader.abort();
                loadingRequests = [];
            }
            function executeRequest(request) {
                switch (request.action) {
                  case _voFragmentRequest2["default"].ACTION_COMPLETE:
                    executedRequests.push(request);
                    addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);
                    logger.debug("executeRequest trigger STREAM_COMPLETED");
                    eventBus.trigger(_coreEventsEvents2["default"].STREAM_COMPLETED, {
                        request: request,
                        fragmentModel: this
                    });
                    break;

                  case _voFragmentRequest2["default"].ACTION_DOWNLOAD:
                    addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);
                    loadingRequests.push(request);
                    loadCurrentFragment(request);
                    break;

                  default:
                    logger.warn("Unknown request action.");
                }
            }
            function loadCurrentFragment(request) {
                eventBus.trigger(_coreEventsEvents2["default"].FRAGMENT_LOADING_STARTED, {
                    sender: instance,
                    request: request
                });
                fragmentLoader.load(request);
            }
            function getRequestForTime(arr, time, threshold) {
                var lastIdx = arr.length - 1;
                for (var i = lastIdx; i >= 0; i--) {
                    var req = arr[i];
                    var start = req.startTime;
                    var end = start + req.duration;
                    threshold = !isNaN(threshold) ? threshold : getRequestThreshold(req);
                    if (!isNaN(start) && !isNaN(end) && time + threshold >= start && time - threshold < end || isNaN(start) && isNaN(time)) {
                        return req;
                    }
                }
                return null;
            }
            function filterRequests(arr, filter) {
                if (filter.hasOwnProperty("time")) {
                    return [ getRequestForTime(arr, filter.time, filter.threshold) ];
                }
                return arr.filter(function(request) {
                    for (var prop in filter) {
                        if (prop === "state") continue;
                        if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;
                    }
                    return true;
                });
            }
            function getRequestsForState(state) {
                var requests = undefined;
                switch (state) {
                  case FRAGMENT_MODEL_LOADING:
                    requests = loadingRequests;
                    break;

                  case FRAGMENT_MODEL_EXECUTED:
                    requests = executedRequests;
                    break;

                  default:
                    requests = [];
                }
                return requests;
            }
            function addSchedulingInfoMetrics(request, state) {
                dashMetrics.addSchedulingInfo(request, state);
                dashMetrics.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);
            }
            function onLoadingCompleted(e) {
                if (e.sender !== fragmentLoader) return;
                loadingRequests.splice(loadingRequests.indexOf(e.request), 1);
                if (e.response && !e.error) {
                    executedRequests.push(e.request);
                }
                addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);
                eventBus.trigger(_coreEventsEvents2["default"].FRAGMENT_LOADING_COMPLETED, {
                    request: e.request,
                    response: e.response,
                    error: e.error,
                    sender: this
                });
            }
            function onLoadingInProgress(e) {
                if (e.sender !== fragmentLoader) return;
                eventBus.trigger(_coreEventsEvents2["default"].FRAGMENT_LOADING_PROGRESS, {
                    request: e.request,
                    response: e.response,
                    error: e.error,
                    sender: this
                });
            }
            function onLoadingAborted(e) {
                if (e.sender !== fragmentLoader) return;
                eventBus.trigger(_coreEventsEvents2["default"].FRAGMENT_LOADING_ABANDONED, {
                    streamProcessor: this.getStreamProcessor(),
                    request: e.request,
                    mediaType: e.mediaType
                });
            }
            function resetInitialSettings() {
                executedRequests = [];
                loadingRequests = [];
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].LOADING_COMPLETED, onLoadingCompleted, this);
                eventBus.off(_coreEventsEvents2["default"].LOADING_DATA_PROGRESS, onLoadingInProgress, this);
                eventBus.off(_coreEventsEvents2["default"].LOADING_ABANDONED, onLoadingAborted, this);
                if (fragmentLoader) {
                    fragmentLoader.reset();
                }
                resetInitialSettings();
            }
            function addExecutedRequest(request) {
                executedRequests.push(request);
            }
            instance = {
                setStreamProcessor: setStreamProcessor,
                getStreamProcessor: getStreamProcessor,
                getRequests: getRequests,
                isFragmentLoaded: isFragmentLoaded,
                isFragmentLoadedOrPending: isFragmentLoadedOrPending,
                removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,
                removeExecutedRequestsAfterTime: removeExecutedRequestsAfterTime,
                syncExecutedRequestsWithBufferedRange: syncExecutedRequestsWithBufferedRange,
                abortRequests: abortRequests,
                executeRequest: executeRequest,
                reset: reset,
                addExecutedRequest: addExecutedRequest
            };
            setup();
            return instance;
        }
        FragmentModel.__dashjs_factory_name = "FragmentModel";
        var factory = _coreFactoryMaker2["default"].getClassFactory(FragmentModel);
        factory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;
        factory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;
        factory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;
        factory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;
        _coreFactoryMaker2["default"].updateClassFactory(FragmentModel.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        223: 223,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    148: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function ManifestModel() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, manifest = undefined;
            function getValue() {
                return manifest;
            }
            function setValue(value) {
                manifest = value;
                if (value) {
                    eventBus.trigger(_coreEventsEvents2["default"].MANIFEST_LOADED, {
                        data: value
                    });
                }
            }
            instance = {
                getValue: getValue,
                setValue: setValue
            };
            return instance;
        }
        ManifestModel.__dashjs_factory_name = "ManifestModel";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(ManifestModel);
        module.exports = exports["default"];
    }, {
        47: 47,
        48: 48,
        55: 55
    } ],
    149: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _dashVoUTCTiming = _dereq_(95);
        var _dashVoUTCTiming2 = _interopRequireDefault(_dashVoUTCTiming);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _rulesAbrABRRulesCollection = _dereq_(185);
        var _rulesAbrABRRulesCollection2 = _interopRequireDefault(_rulesAbrABRRulesCollection);
        var _coreSettings = _dereq_(49);
        var _coreSettings2 = _interopRequireDefault(_coreSettings);
        var _utilsSupervisorTools = _dereq_(214);
        var DEFAULT_MIN_BUFFER_TIME = 12;
        var DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH = 20;
        var DEFAULT_LOW_LATENCY_LIVE_DELAY = 3;
        var LOW_LATENCY_REDUCTION_FACTOR = 10;
        var LOW_LATENCY_MULTIPLY_FACTOR = 5;
        var DEFAULT_XHR_WITH_CREDENTIALS = false;
        function MediaPlayerModel() {
            var instance = undefined, UTCTimingSources = undefined, xhrWithCredentials = undefined, customABRRule = undefined;
            var DEFAULT_UTC_TIMING_SOURCE = {
                scheme: "urn:mpeg:dash:utc:http-xsdate:2014",
                value: "http://time.akamai.com/?iso&ms"
            };
            var context = this.context;
            var settings = (0, _coreSettings2["default"])(context).getInstance();
            function setup() {
                UTCTimingSources = [];
                xhrWithCredentials = {
                    default: DEFAULT_XHR_WITH_CREDENTIALS
                };
                customABRRule = [];
            }
            function findABRCustomRuleIndex(rulename) {
                var i = undefined;
                for (i = 0; i < customABRRule.length; i++) {
                    if (customABRRule[i].rulename === rulename) {
                        return i;
                    }
                }
                return -1;
            }
            function getABRCustomRules() {
                return customABRRule;
            }
            function addABRCustomRule(type, rulename, rule) {
                if (typeof type !== "string" || type !== _rulesAbrABRRulesCollection2["default"].ABANDON_FRAGMENT_RULES && type !== _rulesAbrABRRulesCollection2["default"].QUALITY_SWITCH_RULES || typeof rulename !== "string") {
                    throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR;
                }
                var index = findABRCustomRuleIndex(rulename);
                if (index === -1) {
                    customABRRule.push({
                        type: type,
                        rulename: rulename,
                        rule: rule
                    });
                } else {
                    customABRRule[index].type = type;
                    customABRRule[index].rule = rule;
                }
            }
            function removeABRCustomRule(rulename) {
                if (rulename) {
                    var index = findABRCustomRuleIndex(rulename);
                    if (index !== -1) {
                        customABRRule.splice(index, 1);
                    }
                } else {
                    customABRRule = [];
                }
            }
            function getStableBufferTime() {
                if (settings.get().streaming.lowLatencyEnabled) {
                    return settings.get().streaming.liveDelay * .6;
                }
                var stableBufferTime = settings.get().streaming.stableBufferTime;
                return stableBufferTime > -1 ? stableBufferTime : settings.get().streaming.fastSwitchEnabled ? DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH : DEFAULT_MIN_BUFFER_TIME;
            }
            function getRetryAttemptsForType(type) {
                return settings.get().streaming.lowLatencyEnabled ? settings.get().streaming.retryAttempts[type] * LOW_LATENCY_MULTIPLY_FACTOR : settings.get().streaming.retryAttempts[type];
            }
            function getRetryIntervalsForType(type) {
                return settings.get().streaming.lowLatencyEnabled ? settings.get().streaming.retryIntervals[type] / LOW_LATENCY_REDUCTION_FACTOR : settings.get().streaming.retryIntervals[type];
            }
            function getLiveDelay() {
                if (settings.get().streaming.lowLatencyEnabled) {
                    return settings.get().streaming.liveDelay || DEFAULT_LOW_LATENCY_LIVE_DELAY;
                }
                return settings.get().streaming.liveDelay;
            }
            function addUTCTimingSource(schemeIdUri, value) {
                removeUTCTimingSource(schemeIdUri, value);
                var vo = new _dashVoUTCTiming2["default"]();
                vo.schemeIdUri = schemeIdUri;
                vo.value = value;
                UTCTimingSources.push(vo);
            }
            function getUTCTimingSources() {
                return UTCTimingSources;
            }
            function removeUTCTimingSource(schemeIdUri, value) {
                (0, _utilsSupervisorTools.checkParameterType)(schemeIdUri, "string");
                (0, _utilsSupervisorTools.checkParameterType)(value, "string");
                UTCTimingSources.forEach(function(obj, idx) {
                    if (obj.schemeIdUri === schemeIdUri && obj.value === value) {
                        UTCTimingSources.splice(idx, 1);
                    }
                });
            }
            function clearDefaultUTCTimingSources() {
                UTCTimingSources = [];
            }
            function restoreDefaultUTCTimingSources() {
                addUTCTimingSource(DEFAULT_UTC_TIMING_SOURCE.scheme, DEFAULT_UTC_TIMING_SOURCE.value);
            }
            function setXHRWithCredentialsForType(type, value) {
                if (!type) {
                    Object.keys(xhrWithCredentials).forEach(function(key) {
                        setXHRWithCredentialsForType(key, value);
                    });
                } else {
                    xhrWithCredentials[type] = !!value;
                }
            }
            function getXHRWithCredentialsForType(type) {
                var useCreds = xhrWithCredentials[type];
                return useCreds === undefined ? xhrWithCredentials["default"] : useCreds;
            }
            function getDefaultUtcTimingSource() {
                return DEFAULT_UTC_TIMING_SOURCE;
            }
            function reset() {}
            instance = {
                getABRCustomRules: getABRCustomRules,
                addABRCustomRule: addABRCustomRule,
                removeABRCustomRule: removeABRCustomRule,
                getStableBufferTime: getStableBufferTime,
                getRetryAttemptsForType: getRetryAttemptsForType,
                getRetryIntervalsForType: getRetryIntervalsForType,
                getLiveDelay: getLiveDelay,
                addUTCTimingSource: addUTCTimingSource,
                removeUTCTimingSource: removeUTCTimingSource,
                getUTCTimingSources: getUTCTimingSources,
                clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,
                restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,
                setXHRWithCredentialsForType: setXHRWithCredentialsForType,
                getXHRWithCredentialsForType: getXHRWithCredentialsForType,
                getDefaultUtcTimingSource: getDefaultUtcTimingSource,
                reset: reset
            };
            setup();
            return instance;
        }
        MediaPlayerModel.__dashjs_factory_name = "MediaPlayerModel";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(MediaPlayerModel);
        module.exports = exports["default"];
    }, {
        107: 107,
        185: 185,
        214: 214,
        48: 48,
        49: 49,
        95: 95
    } ],
    150: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        var _voMetricsList = _dereq_(227);
        var _voMetricsList2 = _interopRequireDefault(_voMetricsList);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _voMetricsRepresentationSwitch = _dereq_(240);
        var _voMetricsRepresentationSwitch2 = _interopRequireDefault(_voMetricsRepresentationSwitch);
        var _voMetricsBufferLevel = _dereq_(233);
        var _voMetricsBufferLevel2 = _interopRequireDefault(_voMetricsBufferLevel);
        var _voMetricsBufferState = _dereq_(234);
        var _voMetricsBufferState2 = _interopRequireDefault(_voMetricsBufferState);
        var _voMetricsDVRInfo = _dereq_(235);
        var _voMetricsDVRInfo2 = _interopRequireDefault(_voMetricsDVRInfo);
        var _voMetricsDroppedFrames = _dereq_(236);
        var _voMetricsDroppedFrames2 = _interopRequireDefault(_voMetricsDroppedFrames);
        var _voMetricsManifestUpdate = _dereq_(238);
        var _voMetricsSchedulingInfo = _dereq_(242);
        var _voMetricsSchedulingInfo2 = _interopRequireDefault(_voMetricsSchedulingInfo);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _voMetricsRequestsQueue = _dereq_(241);
        var _voMetricsRequestsQueue2 = _interopRequireDefault(_voMetricsRequestsQueue);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function MetricsModel(config) {
            config = config || {};
            var settings = config.settings;
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, streamMetrics = undefined;
            function setup() {
                streamMetrics = {};
            }
            function metricsChanged() {
                eventBus.trigger(_coreEventsEvents2["default"].METRICS_CHANGED);
            }
            function metricChanged(mediaType) {
                eventBus.trigger(_coreEventsEvents2["default"].METRIC_CHANGED, {
                    mediaType: mediaType
                });
                metricsChanged();
            }
            function metricUpdated(mediaType, metricType, vo) {
                eventBus.trigger(_coreEventsEvents2["default"].METRIC_UPDATED, {
                    mediaType: mediaType,
                    metric: metricType,
                    value: vo
                });
                metricChanged(mediaType);
            }
            function metricAdded(mediaType, metricType, vo) {
                eventBus.trigger(_coreEventsEvents2["default"].METRIC_ADDED, {
                    mediaType: mediaType,
                    metric: metricType,
                    value: vo
                });
                metricChanged(mediaType);
            }
            function clearCurrentMetricsForType(type) {
                delete streamMetrics[type];
                metricChanged(type);
            }
            function clearAllCurrentMetrics() {
                streamMetrics = {};
                metricsChanged();
            }
            function getMetricsFor(type, readOnly) {
                var metrics = null;
                if (!type) {
                    return metrics;
                }
                if (streamMetrics.hasOwnProperty(type)) {
                    metrics = streamMetrics[type];
                } else if (!readOnly) {
                    metrics = new _voMetricsList2["default"]();
                    streamMetrics[type] = metrics;
                }
                return metrics;
            }
            function pushMetrics(type, list, value) {
                var metrics = getMetricsFor(type);
                metrics[list].push(value);
                if (metrics[list].length > settings.get().streaming.metricsMaxListDepth) {
                    metrics[list].shift();
                }
            }
            function appendHttpTrace(httpRequest, s, d, b) {
                var vo = new _voMetricsHTTPRequest.HTTPRequestTrace();
                vo.s = s;
                vo.d = d;
                vo.b = b;
                httpRequest.trace.push(vo);
                if (!httpRequest.interval) {
                    httpRequest.interval = 0;
                }
                httpRequest.interval += d;
                return vo;
            }
            function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {
                var vo = new _voMetricsHTTPRequest.HTTPRequest();
                if (actualurl && actualurl !== url) {
                    addHttpRequest(mediaType, null, type, url, null, null, range, trequest, null, null, null, mediaduration, null, null);
                    vo.actualurl = actualurl;
                }
                vo.tcpid = tcpid;
                vo.type = type;
                vo.url = url;
                vo.range = range;
                vo.trequest = trequest;
                vo.tresponse = tresponse;
                vo.responsecode = responsecode;
                vo._tfinish = tfinish;
                vo._stream = mediaType;
                vo._mediaduration = mediaduration;
                vo._responseHeaders = responseHeaders;
                vo._serviceLocation = serviceLocation;
                if (traces) {
                    traces.forEach(function(trace) {
                        appendHttpTrace(vo, trace.s, trace.d, trace.b);
                    });
                } else {
                    delete vo.interval;
                    delete vo.trace;
                }
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].HTTP_REQUEST, vo);
            }
            function addRepresentationSwitch(mediaType, t, mt, to, lto) {
                var vo = new _voMetricsRepresentationSwitch2["default"]();
                vo.t = t;
                vo.mt = mt;
                vo.to = to;
                if (lto) {
                    vo.lto = lto;
                } else {
                    delete vo.lto;
                }
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].TRACK_SWITCH, vo);
            }
            function pushAndNotify(mediaType, metricType, metricObject) {
                pushMetrics(mediaType, metricType, metricObject);
                metricAdded(mediaType, metricType, metricObject);
            }
            function addBufferLevel(mediaType, t, level) {
                var vo = new _voMetricsBufferLevel2["default"]();
                vo.t = t;
                vo.level = level;
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].BUFFER_LEVEL, vo);
            }
            function addBufferState(mediaType, state, target) {
                var vo = new _voMetricsBufferState2["default"]();
                vo.target = target;
                vo.state = state;
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].BUFFER_STATE, vo);
            }
            function addDVRInfo(mediaType, currentTime, mpd, range) {
                var vo = new _voMetricsDVRInfo2["default"]();
                vo.time = currentTime;
                vo.range = range;
                vo.manifestInfo = mpd;
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].DVR_INFO, vo);
            }
            function addDroppedFrames(mediaType, quality) {
                var vo = new _voMetricsDroppedFrames2["default"]();
                var list = getMetricsFor(mediaType).DroppedFrames;
                vo.time = quality.creationTime;
                vo.droppedFrames = quality.droppedVideoFrames;
                if (list.length > 0 && list[list.length - 1] == vo) {
                    return;
                }
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].DROPPED_FRAMES, vo);
            }
            function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {
                var vo = new _voMetricsSchedulingInfo2["default"]();
                vo.mediaType = mediaType;
                vo.t = t;
                vo.type = type;
                vo.startTime = startTime;
                vo.availabilityStartTime = availabilityStartTime;
                vo.duration = duration;
                vo.quality = quality;
                vo.range = range;
                vo.state = state;
                pushAndNotify(mediaType, _constantsMetricsConstants2["default"].SCHEDULING_INFO, vo);
            }
            function addRequestsQueue(mediaType, loadingRequests, executedRequests) {
                var vo = new _voMetricsRequestsQueue2["default"]();
                vo.loadingRequests = loadingRequests;
                vo.executedRequests = executedRequests;
                getMetricsFor(mediaType).RequestsQueue = vo;
                metricAdded(mediaType, _constantsMetricsConstants2["default"].REQUESTS_QUEUE, vo);
            }
            function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {
                var vo = new _voMetricsManifestUpdate.ManifestUpdate();
                vo.mediaType = mediaType;
                vo.type = type;
                vo.requestTime = requestTime;
                vo.fetchTime = fetchTime;
                vo.availabilityStartTime = availabilityStartTime;
                vo.presentationStartTime = presentationStartTime;
                vo.clientTimeOffset = clientTimeOffset;
                vo.currentTime = currentTime;
                vo.buffered = buffered;
                vo.latency = latency;
                pushMetrics(_constantsConstants2["default"].STREAM, _constantsMetricsConstants2["default"].MANIFEST_UPDATE, vo);
                metricAdded(mediaType, _constantsMetricsConstants2["default"].MANIFEST_UPDATE, vo);
            }
            function updateManifestUpdateInfo(manifestUpdate, updatedFields) {
                if (manifestUpdate) {
                    for (var field in updatedFields) {
                        manifestUpdate[field] = updatedFields[field];
                    }
                    metricUpdated(manifestUpdate.mediaType, _constantsMetricsConstants2["default"].MANIFEST_UPDATE, manifestUpdate);
                }
            }
            function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {
                if (manifestUpdate) {
                    var vo = new _voMetricsManifestUpdate.ManifestUpdateStreamInfo();
                    vo.id = id;
                    vo.index = index;
                    vo.start = start;
                    vo.duration = duration;
                    manifestUpdate.streamInfo.push(vo);
                    metricUpdated(manifestUpdate.mediaType, _constantsMetricsConstants2["default"].MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);
                }
            }
            function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {
                if (manifestUpdate) {
                    var vo = new _voMetricsManifestUpdate.ManifestUpdateRepresentationInfo();
                    vo.id = id;
                    vo.index = index;
                    vo.streamIndex = streamIndex;
                    vo.mediaType = mediaType;
                    vo.startNumber = startNumber;
                    vo.fragmentInfoType = fragmentInfoType;
                    vo.presentationTimeOffset = presentationTimeOffset;
                    manifestUpdate.representationInfo.push(vo);
                    metricUpdated(manifestUpdate.mediaType, _constantsMetricsConstants2["default"].MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);
                }
            }
            function addPlayList(vo) {
                if (vo.trace && Array.isArray(vo.trace)) {
                    vo.trace.forEach(function(trace) {
                        if (trace.hasOwnProperty("subreplevel") && !trace.subreplevel) {
                            delete trace.subreplevel;
                        }
                    });
                } else {
                    delete vo.trace;
                }
                pushAndNotify(_constantsConstants2["default"].STREAM, _constantsMetricsConstants2["default"].PLAY_LIST, vo);
            }
            function addDVBErrors(vo) {
                pushAndNotify(_constantsConstants2["default"].STREAM, _constantsMetricsConstants2["default"].DVB_ERRORS, vo);
            }
            instance = {
                clearCurrentMetricsForType: clearCurrentMetricsForType,
                clearAllCurrentMetrics: clearAllCurrentMetrics,
                getMetricsFor: getMetricsFor,
                addHttpRequest: addHttpRequest,
                addRepresentationSwitch: addRepresentationSwitch,
                addBufferLevel: addBufferLevel,
                addBufferState: addBufferState,
                addDVRInfo: addDVRInfo,
                addDroppedFrames: addDroppedFrames,
                addSchedulingInfo: addSchedulingInfo,
                addRequestsQueue: addRequestsQueue,
                addManifestUpdate: addManifestUpdate,
                updateManifestUpdateInfo: updateManifestUpdateInfo,
                addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,
                addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,
                addPlayList: addPlayList,
                addDVBErrors: addDVBErrors
            };
            setup();
            return instance;
        }
        MetricsModel.__dashjs_factory_name = "MetricsModel";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(MetricsModel);
        module.exports = exports["default"];
    }, {
        107: 107,
        108: 108,
        227: 227,
        233: 233,
        234: 234,
        235: 235,
        236: 236,
        237: 237,
        238: 238,
        240: 240,
        241: 241,
        242: 242,
        47: 47,
        48: 48,
        55: 55
    } ],
    151: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voURIFragmentData = _dereq_(232);
        var _voURIFragmentData2 = _interopRequireDefault(_voURIFragmentData);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function URIFragmentModel() {
            var instance = undefined, URIFragmentDataVO = undefined;
            function initialize(uri) {
                URIFragmentDataVO = new _voURIFragmentData2["default"]();
                if (!uri) return null;
                var hashIndex = uri.indexOf("#");
                if (hashIndex !== -1) {
                    var fragments = uri.substr(hashIndex + 1).split("&");
                    for (var i = 0, len = fragments.length; i < len; ++i) {
                        var fragment = fragments[i];
                        var equalIndex = fragment.indexOf("=");
                        if (equalIndex !== -1) {
                            var key = fragment.substring(0, equalIndex);
                            if (URIFragmentDataVO.hasOwnProperty(key)) {
                                URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);
                            }
                        }
                    }
                }
            }
            function getURIFragmentData() {
                return URIFragmentDataVO;
            }
            instance = {
                initialize: initialize,
                getURIFragmentData: getURIFragmentData
            };
            return instance;
        }
        URIFragmentModel.__dashjs_factory_name = "URIFragmentModel";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(URIFragmentModel);
        module.exports = exports["default"];
    }, {
        232: 232,
        48: 48
    } ],
    152: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        function VideoModel() {
            var instance = undefined, logger = undefined, element = undefined, TTMLRenderingDiv = undefined, previousPlaybackRate = undefined;
            var VIDEO_MODEL_WRONG_ELEMENT_TYPE = "element is not video or audio DOM type!";
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var stalledStreams = [];
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function initialize() {
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_PLAYING, onPlaying, this);
            }
            function reset() {
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_PLAYING, onPlaying, this);
            }
            function onPlaybackCanPlay() {
                if (element) {
                    element.playbackRate = previousPlaybackRate || 1;
                    element.removeEventListener("canplay", onPlaybackCanPlay);
                }
            }
            function setPlaybackRate(value) {
                if (!element) return;
                if (element.readyState <= 2 && value > 0) {
                    element.addEventListener("canplay", onPlaybackCanPlay);
                } else {
                    element.playbackRate = value;
                }
            }
            function setCurrentTime(currentTime, stickToBuffered) {
                if (element) {
                    if (element.currentTime == currentTime) return;
                    try {
                        currentTime = stickToBuffered ? stickTimeToBuffered(currentTime) : currentTime;
                        element.currentTime = currentTime;
                    } catch (e) {
                        if (element.readyState === 0 && e.code === e.INVALID_STATE_ERR) {
                            setTimeout(function() {
                                element.currentTime = currentTime;
                            }, 400);
                        }
                    }
                }
            }
            function stickTimeToBuffered(time) {
                var buffered = getBufferRange();
                var closestTime = time;
                var closestDistance = 9999999999;
                if (buffered) {
                    for (var i = 0; i < buffered.length; i++) {
                        var start = buffered.start(i);
                        var end = buffered.end(i);
                        var distanceToStart = Math.abs(start - time);
                        var distanceToEnd = Math.abs(end - time);
                        if (time >= start && time <= end) {
                            return time;
                        }
                        if (distanceToStart < closestDistance) {
                            closestDistance = distanceToStart;
                            closestTime = start;
                        }
                        if (distanceToEnd < closestDistance) {
                            closestDistance = distanceToEnd;
                            closestTime = end;
                        }
                    }
                }
                return closestTime;
            }
            function getElement() {
                return element;
            }
            function setElement(value) {
                if (value === null || value === undefined || value && /^(VIDEO|AUDIO)$/i.test(value.nodeName)) {
                    element = value;
                    if (element) {
                        element.preload = "auto";
                    }
                } else {
                    throw VIDEO_MODEL_WRONG_ELEMENT_TYPE;
                }
            }
            function setSource(source) {
                if (element) {
                    if (source) {
                        element.src = source;
                    } else {
                        element.removeAttribute("src");
                        element.load();
                    }
                }
            }
            function getSource() {
                return element ? element.src : null;
            }
            function getTTMLRenderingDiv() {
                return TTMLRenderingDiv;
            }
            function setTTMLRenderingDiv(div) {
                TTMLRenderingDiv = div;
                TTMLRenderingDiv.style.position = "absolute";
                TTMLRenderingDiv.style.display = "flex";
                TTMLRenderingDiv.style.overflow = "hidden";
                TTMLRenderingDiv.style.pointerEvents = "none";
                TTMLRenderingDiv.style.top = 0;
                TTMLRenderingDiv.style.left = 0;
            }
            function setStallState(type, state) {
                stallStream(type, state);
            }
            function isStalled() {
                return stalledStreams.length > 0;
            }
            function addStalledStream(type) {
                var event = undefined;
                if (type === null || element.seeking || stalledStreams.indexOf(type) !== -1) {
                    return;
                }
                stalledStreams.push(type);
                if (element && stalledStreams.length === 1) {
                    event = document.createEvent("Event");
                    event.initEvent("waiting", true, false);
                    previousPlaybackRate = element.playbackRate;
                    setPlaybackRate(0);
                    element.dispatchEvent(event);
                }
            }
            function removeStalledStream(type) {
                var index = stalledStreams.indexOf(type);
                var event = undefined;
                if (type === null) {
                    return;
                }
                if (index !== -1) {
                    stalledStreams.splice(index, 1);
                }
                if (element && isStalled() === false && element.playbackRate === 0) {
                    setPlaybackRate(previousPlaybackRate || 1);
                    if (!element.paused) {
                        event = document.createEvent("Event");
                        event.initEvent("playing", true, false);
                        element.dispatchEvent(event);
                    }
                }
            }
            function stallStream(type, isStalled) {
                if (isStalled) {
                    addStalledStream(type);
                } else {
                    removeStalledStream(type);
                }
            }
            function onPlaying() {
                if (element && isStalled() && element.playbackRate === 0) {
                    var _event = document.createEvent("Event");
                    _event.initEvent("waiting", true, false);
                    element.dispatchEvent(_event);
                }
            }
            function getPlaybackQuality() {
                if (!element) {
                    return null;
                }
                var hasWebKit = "webkitDroppedFrameCount" in element && "webkitDecodedFrameCount" in element;
                var hasQuality = "getVideoPlaybackQuality" in element;
                var result = null;
                if (hasQuality) {
                    result = element.getVideoPlaybackQuality();
                } else if (hasWebKit) {
                    result = {
                        droppedVideoFrames: element.webkitDroppedFrameCount,
                        totalVideoFrames: element.webkitDroppedFrameCount + element.webkitDecodedFrameCount,
                        creationTime: new Date()
                    };
                }
                return result;
            }
            function play() {
                if (element) {
                    element.autoplay = true;
                    var p = element.play();
                    if (p && p["catch"] && typeof Promise !== "undefined") {
                        p["catch"](function(e) {
                            if (e.name === "NotAllowedError") {
                                eventBus.trigger(_coreEventsEvents2["default"].PLAYBACK_NOT_ALLOWED);
                            }
                            logger.warn("Caught pending play exception - continuing (" + e + ")");
                        });
                    }
                }
            }
            function isPaused() {
                return element ? element.paused : null;
            }
            function pause() {
                if (element) {
                    element.pause();
                    element.autoplay = false;
                }
            }
            function isSeeking() {
                return element ? element.seeking : null;
            }
            function getTime() {
                return element ? element.currentTime : null;
            }
            function getPlaybackRate() {
                return element ? element.playbackRate : null;
            }
            function getPlayedRanges() {
                return element ? element.played : null;
            }
            function getEnded() {
                return element ? element.ended : null;
            }
            function addEventListener(eventName, eventCallBack) {
                if (element) {
                    element.addEventListener(eventName, eventCallBack);
                }
            }
            function removeEventListener(eventName, eventCallBack) {
                if (element) {
                    element.removeEventListener(eventName, eventCallBack);
                }
            }
            function getReadyState() {
                return element ? element.readyState : NaN;
            }
            function getBufferRange() {
                return element ? element.buffered : null;
            }
            function getClientWidth() {
                return element ? element.clientWidth : NaN;
            }
            function getClientHeight() {
                return element ? element.clientHeight : NaN;
            }
            function getVideoWidth() {
                return element ? element.videoWidth : NaN;
            }
            function getVideoHeight() {
                return element ? element.videoHeight : NaN;
            }
            function getVideoRelativeOffsetTop() {
                return element && element.parentNode ? element.getBoundingClientRect().top - element.parentNode.getBoundingClientRect().top : NaN;
            }
            function getVideoRelativeOffsetLeft() {
                return element && element.parentNode ? element.getBoundingClientRect().left - element.parentNode.getBoundingClientRect().left : NaN;
            }
            function getTextTracks() {
                return element ? element.textTracks : [];
            }
            function getTextTrack(kind, label, lang, isTTML, isEmbedded) {
                if (element) {
                    for (var i = 0; i < element.textTracks.length; i++) {
                        if (element.textTracks[i].kind === kind && (label ? element.textTracks[i].label == label : true) && element.textTracks[i].language === lang && element.textTracks[i].isTTML === isTTML && element.textTracks[i].isEmbedded === isEmbedded) {
                            return element.textTracks[i];
                        }
                    }
                }
                return null;
            }
            function addTextTrack(kind, label, lang) {
                if (element) {
                    return element.addTextTrack(kind, label, lang);
                }
                return null;
            }
            function appendChild(childElement) {
                if (element) {
                    element.appendChild(childElement);
                    if (childElement.isTTML !== undefined) {
                        element.textTracks[element.textTracks.length - 1].isTTML = childElement.isTTML;
                        element.textTracks[element.textTracks.length - 1].isEmbedded = childElement.isEmbedded;
                    }
                }
            }
            function removeChild(childElement) {
                if (element) {
                    element.removeChild(childElement);
                }
            }
            instance = {
                initialize: initialize,
                setCurrentTime: setCurrentTime,
                play: play,
                isPaused: isPaused,
                pause: pause,
                isSeeking: isSeeking,
                getTime: getTime,
                getPlaybackRate: getPlaybackRate,
                setPlaybackRate: setPlaybackRate,
                getPlayedRanges: getPlayedRanges,
                getEnded: getEnded,
                setStallState: setStallState,
                getElement: getElement,
                setElement: setElement,
                setSource: setSource,
                getSource: getSource,
                getTTMLRenderingDiv: getTTMLRenderingDiv,
                setTTMLRenderingDiv: setTTMLRenderingDiv,
                getPlaybackQuality: getPlaybackQuality,
                addEventListener: addEventListener,
                removeEventListener: removeEventListener,
                getReadyState: getReadyState,
                getBufferRange: getBufferRange,
                getClientWidth: getClientWidth,
                getClientHeight: getClientHeight,
                getTextTracks: getTextTracks,
                getTextTrack: getTextTrack,
                addTextTrack: addTextTrack,
                appendChild: appendChild,
                removeChild: removeChild,
                getVideoWidth: getVideoWidth,
                getVideoHeight: getVideoHeight,
                getVideoRelativeOffsetTop: getVideoRelativeOffsetTop,
                getVideoRelativeOffsetLeft: getVideoRelativeOffsetLeft,
                reset: reset
            };
            setup();
            return instance;
        }
        VideoModel.__dashjs_factory_name = "VideoModel";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(VideoModel);
        module.exports = exports["default"];
    }, {
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    153: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function FetchLoader(cfg) {
            cfg = cfg || {};
            var requestModifier = cfg.requestModifier;
            var boxParser = cfg.boxParser;
            var instance = undefined;
            function load(httpRequest) {
                var requestStartTime = new Date();
                var request = httpRequest.request;
                var headers = new Headers();
                if (request.range) {
                    headers.append("Range", "bytes=" + request.range);
                }
                if (!request.requestStartDate) {
                    request.requestStartDate = requestStartTime;
                }
                if (requestModifier) {
                    requestModifier.modifyRequestHeader({
                        setRequestHeader: function setRequestHeader(header, value) {
                            headers.append(header, value);
                        }
                    });
                }
                var abortController = undefined;
                if (typeof window.AbortController === "function") {
                    abortController = new AbortController();
                    httpRequest.abortController = abortController;
                }
                var reqOptions = {
                    method: httpRequest.method,
                    headers: headers,
                    credentials: httpRequest.withCredentials ? "include" : undefined,
                    signal: abortController ? abortController.signal : undefined
                };
                fetch(httpRequest.url, reqOptions).then(function(response) {
                    if (!httpRequest.response) {
                        httpRequest.response = {};
                    }
                    httpRequest.response.status = response.status;
                    httpRequest.response.statusText = response.statusText;
                    httpRequest.response.responseURL = response.url;
                    if (!response.ok) {
                        httpRequest.onerror();
                    }
                    var responseHeaders = "";
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = response.headers.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var key = _step.value;
                            responseHeaders += key + ": " + response.headers.get(key) + "\n";
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    httpRequest.response.responseHeaders = responseHeaders;
                    if (!response.body) {
                        return response.arrayBuffer().then(function(buffer) {
                            httpRequest.response.response = buffer;
                            var event = {
                                loaded: buffer.byteLength,
                                total: buffer.byteLength,
                                stream: false
                            };
                            httpRequest.progress(event);
                            httpRequest.onload();
                            httpRequest.onend();
                            return;
                        });
                    }
                    var totalBytes = parseInt(response.headers.get("Content-Length"), 10);
                    var bytesReceived = 0;
                    var signaledFirstByte = false;
                    var remaining = new Uint8Array();
                    var offset = 0;
                    httpRequest.reader = response.body.getReader();
                    var downLoadedData = [];
                    var processResult = function processResult(_ref) {
                        var value = _ref.value;
                        var done = _ref.done;
                        if (done) {
                            if (remaining) {
                                httpRequest.progress({
                                    loaded: bytesReceived,
                                    total: isNaN(totalBytes) ? bytesReceived : totalBytes,
                                    lengthComputable: true,
                                    time: calculateDownloadedTime(downLoadedData, bytesReceived),
                                    stream: true
                                });
                                httpRequest.response.response = remaining.buffer;
                            }
                            httpRequest.onload();
                            httpRequest.onend();
                            return;
                        }
                        if (value && value.length > 0) {
                            remaining = concatTypedArray(remaining, value);
                            bytesReceived += value.length;
                            downLoadedData.push({
                                ts: Date.now(),
                                bytes: value.length
                            });
                            var boxesInfo = boxParser.findLastTopIsoBoxCompleted([ "moov", "mdat" ], remaining, offset);
                            if (boxesInfo.found) {
                                var end = boxesInfo.lastCompletedOffset + boxesInfo.size;
                                var data = undefined;
                                if (end === remaining.length) {
                                    data = remaining;
                                    remaining = new Uint8Array();
                                } else {
                                    data = new Uint8Array(remaining.subarray(0, end));
                                    remaining = remaining.subarray(end);
                                }
                                httpRequest.progress({
                                    data: data.buffer,
                                    lengthComputable: false,
                                    noTrace: true
                                });
                                offset = 0;
                            } else {
                                offset = boxesInfo.lastCompletedOffset;
                                if (!signaledFirstByte) {
                                    httpRequest.progress({
                                        lengthComputable: false,
                                        noTrace: true
                                    });
                                    signaledFirstByte = true;
                                }
                            }
                        }
                        read(httpRequest, processResult);
                    };
                    read(httpRequest, processResult);
                })["catch"](function(e) {
                    if (httpRequest.onerror) {
                        httpRequest.onerror(e);
                    }
                });
            }
            function read(httpRequest, processResult) {
                httpRequest.reader.read().then(processResult)["catch"](function(e) {
                    if (httpRequest.onerror && httpRequest.response.status === 200) {
                        httpRequest.onerror(e);
                    }
                });
            }
            function concatTypedArray(remaining, data) {
                if (remaining.length === 0) {
                    return data;
                }
                var result = new Uint8Array(remaining.length + data.length);
                result.set(remaining);
                result.set(data, remaining.length);
                return result;
            }
            function abort(request) {
                if (request.abortController) {
                    request.abortController.abort();
                } else if (request.reader) {
                    try {
                        request.reader.cancel();
                    } catch (e) {}
                }
            }
            function calculateDownloadedTime(datum, bytesReceived) {
                datum = datum.filter(function(data) {
                    return data.bytes > bytesReceived / 4 / datum.length;
                });
                if (datum.length > 1) {
                    var _ret = function() {
                        var time = 0;
                        var avgTimeDistance = (datum[datum.length - 1].ts - datum[0].ts) / datum.length;
                        datum.forEach(function(data, index) {
                            var next = datum[index + 1];
                            if (next) {
                                var distance = next.ts - data.ts;
                                time += distance < avgTimeDistance ? distance : 0;
                            }
                        });
                        return {
                            v: time
                        };
                    }();
                    if (typeof _ret === "object") return _ret.v;
                }
                return null;
            }
            instance = {
                load: load,
                abort: abort,
                calculateDownloadedTime: calculateDownloadedTime
            };
            return instance;
        }
        FetchLoader.__dashjs_factory_name = "FetchLoader";
        var factory = _coreFactoryMaker2["default"].getClassFactory(FetchLoader);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    154: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var _XHRLoader = _dereq_(155);
        var _XHRLoader2 = _interopRequireDefault(_XHRLoader);
        var _FetchLoader = _dereq_(153);
        var _FetchLoader2 = _interopRequireDefault(_FetchLoader);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        function HTTPLoader(cfg) {
            cfg = cfg || {};
            var context = this.context;
            var errHandler = cfg.errHandler;
            var dashMetrics = cfg.dashMetrics;
            var mediaPlayerModel = cfg.mediaPlayerModel;
            var requestModifier = cfg.requestModifier;
            var boxParser = cfg.boxParser;
            var useFetch = cfg.useFetch || false;
            var instance = undefined, requests = undefined, delayedRequests = undefined, retryRequests = undefined, downloadErrorToRequestTypeMap = undefined, newDownloadErrorToRequestTypeMap = undefined;
            function setup() {
                var _downloadErrorToRequestTypeMap, _newDownloadErrorToRequestTypeMap;
                requests = [];
                delayedRequests = [];
                retryRequests = [];
                downloadErrorToRequestTypeMap = (_downloadErrorToRequestTypeMap = {}, _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.MPD_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_MANIFEST),
                _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_XLINK),
                _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_INITIALIZATION),
                _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT),
                _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT),
                _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT),
                _defineProperty(_downloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.OTHER_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT),
                _downloadErrorToRequestTypeMap);
                newDownloadErrorToRequestTypeMap = (_newDownloadErrorToRequestTypeMap = {}, _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.MPD_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_MANIFEST_CODE),
                _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_XLINK_CODE),
                _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_INITIALIZATION_CODE),
                _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT_CODE),
                _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT_CODE),
                _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT_CODE),
                _defineProperty(_newDownloadErrorToRequestTypeMap, _voMetricsHTTPRequest.HTTPRequest.OTHER_TYPE, _coreErrorsErrors2["default"].DOWNLOAD_ERROR_ID_CONTENT_CODE),
                _newDownloadErrorToRequestTypeMap);
            }
            function internalLoad(config, remainingAttempts) {
                var request = config.request;
                var traces = [];
                var firstProgress = true;
                var needFailureReport = true;
                var requestStartTime = new Date();
                var lastTraceTime = requestStartTime;
                var lastTraceReceivedCount = 0;
                var httpRequest = undefined;
                if (!requestModifier || !dashMetrics || !errHandler) {
                    throw new Error("config object is not correct or missing");
                }
                var handleLoaded = function handleLoaded(success) {
                    needFailureReport = false;
                    request.requestStartDate = requestStartTime;
                    request.requestEndDate = new Date();
                    request.firstByteDate = request.firstByteDate || requestStartTime;
                    if (!request.checkExistenceOnly) {
                        dashMetrics.addHttpRequest(request, httpRequest.response ? httpRequest.response.responseURL : null, httpRequest.response ? httpRequest.response.status : null, httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() : httpRequest.response ? httpRequest.response.responseHeaders : [], success ? traces : null);
                        if (request.type === _voMetricsHTTPRequest.HTTPRequest.MPD_TYPE) {
                            dashMetrics.addManifestUpdate(request.type, request.requestStartDate, request.requestEndDate);
                        }
                    }
                };
                var onloadend = function onloadend() {
                    if (requests.indexOf(httpRequest) === -1) {
                        return;
                    } else {
                        requests.splice(requests.indexOf(httpRequest), 1);
                    }
                    if (needFailureReport) {
                        handleLoaded(false);
                        if (remainingAttempts > 0) {
                            (function() {
                                remainingAttempts--;
                                var retryRequest = {
                                    config: config
                                };
                                retryRequests.push(retryRequest);
                                retryRequest.timeout = setTimeout(function() {
                                    if (retryRequests.indexOf(retryRequest) === -1) {
                                        return;
                                    } else {
                                        retryRequests.splice(retryRequests.indexOf(retryRequest), 1);
                                    }
                                    internalLoad(config, remainingAttempts);
                                }, mediaPlayerModel.getRetryIntervalsForType(request.type));
                            })();
                        } else {
                            errHandler.downloadError(downloadErrorToRequestTypeMap[request.type], request.url, request);
                            errHandler.error(new _voDashJSError2["default"](newDownloadErrorToRequestTypeMap[request.type], request.url + " is not available", {
                                request: request,
                                response: httpRequest.response
                            }));
                            if (config.error) {
                                config.error(request, "error", httpRequest.response.statusText);
                            }
                            if (config.complete) {
                                config.complete(request, httpRequest.response.statusText);
                            }
                        }
                    }
                };
                var progress = function progress(event) {
                    var currentTime = new Date();
                    if (firstProgress) {
                        firstProgress = false;
                        if (!event.lengthComputable || event.lengthComputable && event.total !== event.loaded) {
                            request.firstByteDate = currentTime;
                        }
                    }
                    if (event.lengthComputable) {
                        request.bytesLoaded = event.loaded;
                        request.bytesTotal = event.total;
                    }
                    if (!event.noTrace) {
                        traces.push({
                            s: lastTraceTime,
                            d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),
                            b: [ event.loaded ? event.loaded - lastTraceReceivedCount : 0 ]
                        });
                        lastTraceTime = currentTime;
                        lastTraceReceivedCount = event.loaded;
                    }
                    if (config.progress && event) {
                        config.progress(event);
                    }
                };
                var onload = function onload() {
                    if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {
                        handleLoaded(true);
                        if (config.success) {
                            config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);
                        }
                        if (config.complete) {
                            config.complete(request, httpRequest.response.statusText);
                        }
                    }
                };
                var onabort = function onabort() {
                    if (config.abort) {
                        config.abort(request);
                    }
                };
                var loader = undefined;
                if (useFetch && window.fetch && request.responseType === "arraybuffer" && request.type === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {
                    loader = (0, _FetchLoader2["default"])(context).create({
                        requestModifier: requestModifier,
                        boxParser: boxParser
                    });
                } else {
                    loader = (0, _XHRLoader2["default"])(context).create({
                        requestModifier: requestModifier
                    });
                }
                var modifiedUrl = requestModifier.modifyRequestURL(request.url);
                var verb = request.checkExistenceOnly ? _voMetricsHTTPRequest.HTTPRequest.HEAD : _voMetricsHTTPRequest.HTTPRequest.GET;
                var withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);
                httpRequest = {
                    url: modifiedUrl,
                    method: verb,
                    withCredentials: withCredentials,
                    request: request,
                    onload: onload,
                    onend: onloadend,
                    onerror: onloadend,
                    progress: progress,
                    onabort: onabort,
                    loader: loader
                };
                var now = new Date().getTime();
                if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {
                    requests.push(httpRequest);
                    loader.load(httpRequest);
                } else {
                    (function() {
                        var delayedRequest = {
                            httpRequest: httpRequest
                        };
                        delayedRequests.push(delayedRequest);
                        delayedRequest.delayTimeout = setTimeout(function() {
                            if (delayedRequests.indexOf(delayedRequest) === -1) {
                                return;
                            } else {
                                delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);
                            }
                            try {
                                requestStartTime = new Date();
                                lastTraceTime = requestStartTime;
                                requests.push(delayedRequest.httpRequest);
                                loader.load(delayedRequest.httpRequest);
                            } catch (e) {
                                delayedRequest.httpRequest.onerror();
                            }
                        }, request.delayLoadingTime - now);
                    })();
                }
            }
            function load(config) {
                if (config.request) {
                    internalLoad(config, mediaPlayerModel.getRetryAttemptsForType(config.request.type));
                } else {
                    if (config.error) {
                        config.error(config.request, "error");
                    }
                }
            }
            function abort() {
                retryRequests.forEach(function(t) {
                    clearTimeout(t.timeout);
                    if (t.config.request && t.config.abort) {
                        t.config.abort(t.config.request);
                    }
                });
                retryRequests = [];
                delayedRequests.forEach(function(x) {
                    return clearTimeout(x.delayTimeout);
                });
                delayedRequests = [];
                requests.forEach(function(x) {
                    x.onloadend = x.onerror = x.onprogress = undefined;
                    x.loader.abort(x);
                    x.onabort();
                });
                requests = [];
            }
            instance = {
                load: load,
                abort: abort
            };
            setup();
            return instance;
        }
        HTTPLoader.__dashjs_factory_name = "HTTPLoader";
        var factory = _coreFactoryMaker2["default"].getClassFactory(HTTPLoader);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        153: 153,
        155: 155,
        221: 221,
        237: 237,
        48: 48,
        52: 52
    } ],
    155: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function XHRLoader(cfg) {
            cfg = cfg || {};
            var requestModifier = cfg.requestModifier;
            var instance = undefined;
            function load(httpRequest) {
                var requestStartTime = new Date();
                var request = httpRequest.request;
                var xhr = new XMLHttpRequest();
                xhr.open(httpRequest.method, httpRequest.url, true);
                if (request.responseType) {
                    xhr.responseType = request.responseType;
                }
                if (request.range) {
                    xhr.setRequestHeader("Range", "bytes=" + request.range);
                }
                if (!request.requestStartDate) {
                    request.requestStartDate = requestStartTime;
                }
                if (requestModifier) {
                    xhr = requestModifier.modifyRequestHeader(xhr);
                }
                xhr.withCredentials = httpRequest.withCredentials;
                xhr.onload = httpRequest.onload;
                xhr.onloadend = httpRequest.onend;
                xhr.onerror = httpRequest.onerror;
                xhr.onprogress = httpRequest.progress;
                xhr.onabort = httpRequest.onabort;
                xhr.send();
                httpRequest.response = xhr;
            }
            function abort(request) {
                var x = request.response;
                x.onloadend = x.onerror = x.onprogress = undefined;
                x.abort();
            }
            instance = {
                load: load,
                abort: abort
            };
            return instance;
        }
        XHRLoader.__dashjs_factory_name = "XHRLoader";
        var factory = _coreFactoryMaker2["default"].getClassFactory(XHRLoader);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    156: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var CommonEncryption = function() {
            function CommonEncryption() {
                _classCallCheck(this, CommonEncryption);
            }
            _createClass(CommonEncryption, null, [ {
                key: "findCencContentProtection",
                value: function findCencContentProtection(cpArray) {
                    var retVal = null;
                    for (var i = 0; i < cpArray.length; ++i) {
                        var cp = cpArray[i];
                        if (cp.schemeIdUri.toLowerCase() === "urn:mpeg:dash:mp4protection:2011" && cp.value.toLowerCase() === "cenc") retVal = cp;
                    }
                    return retVal;
                }
            }, {
                key: "getPSSHData",
                value: function getPSSHData(pssh) {
                    var offset = 8;
                    var view = new DataView(pssh);
                    var version = view.getUint8(offset);
                    offset += 20;
                    if (version > 0) {
                        offset += 4 + 16 * view.getUint32(offset);
                    }
                    offset += 4;
                    return pssh.slice(offset);
                }
            }, {
                key: "getPSSHForKeySystem",
                value: function getPSSHForKeySystem(keySystem, initData) {
                    var psshList = CommonEncryption.parsePSSHList(initData);
                    if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {
                        return psshList[keySystem.uuid.toLowerCase()];
                    }
                    return null;
                }
            }, {
                key: "parseInitDataFromContentProtection",
                value: function parseInitDataFromContentProtection(cpData, BASE64) {
                    if ("pssh" in cpData) {
                        return BASE64.decodeArray(cpData.pssh.__text).buffer;
                    }
                    return null;
                }
            }, {
                key: "parsePSSHList",
                value: function parsePSSHList(data) {
                    if (data === null || data === undefined) return [];
                    var dv = new DataView(data.buffer || data);
                    var done = false;
                    var pssh = {};
                    var byteCursor = 0;
                    while (!done) {
                        var size = undefined, nextBox = undefined, version = undefined, systemID = undefined, psshDataSize = undefined;
                        var boxStart = byteCursor;
                        if (byteCursor >= dv.buffer.byteLength) break;
                        size = dv.getUint32(byteCursor);
                        nextBox = byteCursor + size;
                        byteCursor += 4;
                        if (dv.getUint32(byteCursor) !== 1886614376) {
                            byteCursor = nextBox;
                            continue;
                        }
                        byteCursor += 4;
                        version = dv.getUint8(byteCursor);
                        if (version !== 0 && version !== 1) {
                            byteCursor = nextBox;
                            continue;
                        }
                        byteCursor++;
                        byteCursor += 3;
                        systemID = "";
                        var i = undefined, val = undefined;
                        for (i = 0; i < 4; i++) {
                            val = dv.getUint8(byteCursor + i).toString(16);
                            systemID += val.length === 1 ? "0" + val : val;
                        }
                        byteCursor += 4;
                        systemID += "-";
                        for (i = 0; i < 2; i++) {
                            val = dv.getUint8(byteCursor + i).toString(16);
                            systemID += val.length === 1 ? "0" + val : val;
                        }
                        byteCursor += 2;
                        systemID += "-";
                        for (i = 0; i < 2; i++) {
                            val = dv.getUint8(byteCursor + i).toString(16);
                            systemID += val.length === 1 ? "0" + val : val;
                        }
                        byteCursor += 2;
                        systemID += "-";
                        for (i = 0; i < 2; i++) {
                            val = dv.getUint8(byteCursor + i).toString(16);
                            systemID += val.length === 1 ? "0" + val : val;
                        }
                        byteCursor += 2;
                        systemID += "-";
                        for (i = 0; i < 6; i++) {
                            val = dv.getUint8(byteCursor + i).toString(16);
                            systemID += val.length === 1 ? "0" + val : val;
                        }
                        byteCursor += 6;
                        systemID = systemID.toLowerCase();
                        psshDataSize = dv.getUint32(byteCursor);
                        byteCursor += 4;
                        pssh[systemID] = dv.buffer.slice(boxStart, nextBox);
                        byteCursor = nextBox;
                    }
                    return pssh;
                }
            } ]);
            return CommonEncryption;
        }();
        exports["default"] = CommonEncryption;
        module.exports = exports["default"];
    }, {} ],
    157: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _controllersProtectionController = _dereq_(159);
        var _controllersProtectionController2 = _interopRequireDefault(_controllersProtectionController);
        var _controllersProtectionKeyController = _dereq_(160);
        var _controllersProtectionKeyController2 = _interopRequireDefault(_controllersProtectionKeyController);
        var _ProtectionEvents = _dereq_(158);
        var _ProtectionEvents2 = _interopRequireDefault(_ProtectionEvents);
        var _errorsProtectionErrors = _dereq_(165);
        var _errorsProtectionErrors2 = _interopRequireDefault(_errorsProtectionErrors);
        var _modelsProtectionModel_21Jan2015 = _dereq_(167);
        var _modelsProtectionModel_21Jan20152 = _interopRequireDefault(_modelsProtectionModel_21Jan2015);
        var _modelsProtectionModel_3Feb2014 = _dereq_(168);
        var _modelsProtectionModel_3Feb20142 = _interopRequireDefault(_modelsProtectionModel_3Feb2014);
        var _modelsProtectionModel_01b = _dereq_(166);
        var _modelsProtectionModel_01b2 = _interopRequireDefault(_modelsProtectionModel_01b);
        var APIS_ProtectionModel_01b = [ {
            generateKeyRequest: "generateKeyRequest",
            addKey: "addKey",
            cancelKeyRequest: "cancelKeyRequest",
            needkey: "needkey",
            keyerror: "keyerror",
            keyadded: "keyadded",
            keymessage: "keymessage"
        }, {
            generateKeyRequest: "webkitGenerateKeyRequest",
            addKey: "webkitAddKey",
            cancelKeyRequest: "webkitCancelKeyRequest",
            needkey: "webkitneedkey",
            keyerror: "webkitkeyerror",
            keyadded: "webkitkeyadded",
            keymessage: "webkitkeymessage"
        } ];
        var APIS_ProtectionModel_3Feb2014 = [ {
            setMediaKeys: "setMediaKeys",
            MediaKeys: "MediaKeys",
            release: "close",
            needkey: "needkey",
            error: "keyerror",
            message: "keymessage",
            ready: "keyadded",
            close: "keyclose"
        }, {
            setMediaKeys: "msSetMediaKeys",
            MediaKeys: "MSMediaKeys",
            release: "close",
            needkey: "msneedkey",
            error: "mskeyerror",
            message: "mskeymessage",
            ready: "mskeyadded",
            close: "mskeyclose"
        } ];
        function Protection() {
            var instance = undefined;
            var context = this.context;
            function createProtectionSystem(config) {
                var controller = null;
                var protectionKeyController = (0, _controllersProtectionKeyController2["default"])(context).getInstance();
                protectionKeyController.setConfig({
                    debug: config.debug,
                    BASE64: config.BASE64
                });
                protectionKeyController.initialize();
                var protectionModel = getProtectionModel(config);
                if (!controller && protectionModel) {
                    controller = (0, _controllersProtectionController2["default"])(context).create({
                        protectionModel: protectionModel,
                        protectionKeyController: protectionKeyController,
                        eventBus: config.eventBus,
                        debug: config.debug,
                        events: config.events,
                        BASE64: config.BASE64,
                        constants: config.constants
                    });
                    config.capabilities.setEncryptedMediaSupported(true);
                }
                return controller;
            }
            function getProtectionModel(config) {
                var debug = config.debug;
                var logger = debug.getLogger(instance);
                var eventBus = config.eventBus;
                var errHandler = config.errHandler;
                var videoElement = config.videoModel ? config.videoModel.getElement() : null;
                if ((!videoElement || videoElement.onencrypted !== undefined) && (!videoElement || videoElement.mediaKeys !== undefined)) {
                    logger.info("EME detected on this user agent! (ProtectionModel_21Jan2015)");
                    return (0, _modelsProtectionModel_21Jan20152["default"])(context).create({
                        debug: debug,
                        eventBus: eventBus,
                        events: config.events
                    });
                } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {
                    logger.info("EME detected on this user agent! (ProtectionModel_3Feb2014)");
                    return (0, _modelsProtectionModel_3Feb20142["default"])(context).create({
                        debug: debug,
                        eventBus: eventBus,
                        events: config.events,
                        api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)
                    });
                } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {
                    logger.info("EME detected on this user agent! (ProtectionModel_01b)");
                    return (0, _modelsProtectionModel_01b2["default"])(context).create({
                        debug: debug,
                        eventBus: eventBus,
                        errHandler: errHandler,
                        events: config.events,
                        api: getAPI(videoElement, APIS_ProtectionModel_01b)
                    });
                } else {
                    logger.warn("No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!");
                    return null;
                }
            }
            function getAPI(videoElement, apis) {
                for (var i = 0; i < apis.length; i++) {
                    var api = apis[i];
                    if (typeof videoElement[api[Object.keys(api)[0]]] !== "function") {
                        continue;
                    }
                    return api;
                }
                return null;
            }
            instance = {
                createProtectionSystem: createProtectionSystem
            };
            return instance;
        }
        Protection.__dashjs_factory_name = "Protection";
        var factory = dashjs.FactoryMaker.getClassFactory(Protection);
        factory.events = _ProtectionEvents2["default"];
        factory.errors = _errorsProtectionErrors2["default"];
        dashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        158: 158,
        159: 159,
        160: 160,
        165: 165,
        166: 166,
        167: 167,
        168: 168
    } ],
    158: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _coreEventsEventsBase = _dereq_(56);
        var _coreEventsEventsBase2 = _interopRequireDefault(_coreEventsEventsBase);
        var ProtectionEvents = function(_EventsBase) {
            _inherits(ProtectionEvents, _EventsBase);
            function ProtectionEvents() {
                _classCallCheck(this, ProtectionEvents);
                _get(Object.getPrototypeOf(ProtectionEvents.prototype), "constructor", this).call(this);
                this.INTERNAL_KEY_MESSAGE = "internalKeyMessage";
                this.INTERNAL_KEY_SYSTEM_SELECTED = "internalKeySystemSelected";
                this.INTERNAL_KEY_STATUS_CHANGED = "internalkeyStatusChanged";
                this.KEY_ADDED = "public_keyAdded";
                this.KEY_ERROR = "public_keyError";
                this.KEY_MESSAGE = "public_keyMessage";
                this.KEY_SESSION_CLOSED = "public_keySessionClosed";
                this.KEY_SESSION_CREATED = "public_keySessionCreated";
                this.KEY_SESSION_REMOVED = "public_keySessionRemoved";
                this.KEY_STATUSES_CHANGED = "public_keyStatusesChanged";
                this.KEY_SYSTEM_ACCESS_COMPLETE = "public_keySystemAccessComplete";
                this.KEY_SYSTEM_SELECTED = "public_keySystemSelected";
                this.LICENSE_REQUEST_COMPLETE = "public_licenseRequestComplete";
                this.NEED_KEY = "needkey";
                this.PROTECTION_CREATED = "public_protectioncreated";
                this.PROTECTION_DESTROYED = "public_protectiondestroyed";
                this.SERVER_CERTIFICATE_UPDATED = "serverCertificateUpdated";
                this.TEARDOWN_COMPLETE = "protectionTeardownComplete";
                this.VIDEO_ELEMENT_SELECTED = "videoElementSelected";
            }
            return ProtectionEvents;
        }(_coreEventsEventsBase2["default"]);
        var protectionEvents = new ProtectionEvents();
        exports["default"] = protectionEvents;
        module.exports = exports["default"];
    }, {
        56: 56
    } ],
    159: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _CommonEncryption = _dereq_(156);
        var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);
        var _voMediaCapability = _dereq_(178);
        var _voMediaCapability2 = _interopRequireDefault(_voMediaCapability);
        var _voKeySystemConfiguration = _dereq_(177);
        var _voKeySystemConfiguration2 = _interopRequireDefault(_voKeySystemConfiguration);
        var _errorsProtectionErrors = _dereq_(165);
        var _errorsProtectionErrors2 = _interopRequireDefault(_errorsProtectionErrors);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;
        var NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;
        var LICENSE_SERVER_REQUEST_RETRIES = 3;
        var LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1e3;
        var LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8e3;
        function ProtectionController(config) {
            config = config || {};
            var protectionKeyController = config.protectionKeyController;
            var protectionModel = config.protectionModel;
            var eventBus = config.eventBus;
            var events = config.events;
            var debug = config.debug;
            var BASE64 = config.BASE64;
            var constants = config.constants;
            var needkeyRetries = [];
            var instance = undefined, logger = undefined, pendingNeedKeyData = undefined, mediaInfoArr = undefined, protDataSet = undefined, sessionType = undefined, robustnessLevel = undefined, keySystem = undefined;
            function setup() {
                logger = debug.getLogger(instance);
                pendingNeedKeyData = [];
                mediaInfoArr = [];
                sessionType = "temporary";
                robustnessLevel = "";
            }
            function checkConfig() {
                if (!eventBus || !eventBus.hasOwnProperty("on") || !protectionKeyController || !protectionKeyController.hasOwnProperty("getSupportedKeySystemsFromContentProtection")) {
                    throw new Error("Missing config parameter(s)");
                }
            }
            function initializeForMedia(mediaInfo) {
                if (!mediaInfo) {
                    throw new Error("mediaInfo can not be null or undefined");
                }
                checkConfig();
                eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);
                eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);
                mediaInfoArr.push(mediaInfo);
                var supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);
                if (supportedKS && supportedKS.length > 0) {
                    selectKeySystem(supportedKS, true);
                }
            }
            function getSupportedKeySystemsFromContentProtection(cps) {
                checkConfig();
                return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);
            }
            function createKeySession(initData, cdmData) {
                var initDataForKS = _CommonEncryption2["default"].getPSSHForKeySystem(keySystem, initData);
                var protData = getProtData(keySystem);
                if (initDataForKS) {
                    var currentInitData = protectionModel.getAllInitData();
                    for (var i = 0; i < currentInitData.length; i++) {
                        if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {
                            logger.warn("DRM: Ignoring initData because we have already seen it!");
                            return;
                        }
                    }
                    try {
                        protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);
                    } catch (error) {
                        eventBus.trigger(events.KEY_SESSION_CREATED, {
                            data: null,
                            error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)
                        });
                    }
                } else if (initData) {
                    protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);
                } else {
                    eventBus.trigger(events.KEY_SESSION_CREATED, {
                        data: null,
                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_MESSAGE + "Selected key system is " + (keySystem ? keySystem.systemString : null) + ".  needkey/encrypted event contains no initData corresponding to that key system!")
                    });
                }
            }
            function loadKeySession(sessionID, initData) {
                checkConfig();
                protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));
            }
            function removeKeySession(sessionToken) {
                checkConfig();
                protectionModel.removeKeySession(sessionToken);
            }
            function closeKeySession(sessionToken) {
                checkConfig();
                protectionModel.closeKeySession(sessionToken);
            }
            function setServerCertificate(serverCertificate) {
                checkConfig();
                protectionModel.setServerCertificate(serverCertificate);
            }
            function setMediaElement(element) {
                checkConfig();
                if (element) {
                    protectionModel.setMediaElement(element);
                    eventBus.on(events.NEED_KEY, onNeedKey, this);
                } else if (element === null) {
                    protectionModel.setMediaElement(element);
                    eventBus.off(events.NEED_KEY, onNeedKey, this);
                }
            }
            function setSessionType(value) {
                sessionType = value;
            }
            function setRobustnessLevel(level) {
                robustnessLevel = level;
            }
            function setProtectionData(data) {
                protDataSet = data;
                protectionKeyController.setProtectionData(data);
            }
            function stop() {
                if (protectionModel) {
                    protectionModel.stop();
                }
            }
            function reset() {
                checkConfig();
                eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);
                eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);
                setMediaElement(null);
                keySystem = undefined;
                if (protectionModel) {
                    protectionModel.reset();
                    protectionModel = null;
                }
                needkeyRetries.forEach(function(retryTimeout) {
                    return clearTimeout(retryTimeout);
                });
                needkeyRetries = [];
                mediaInfoArr = [];
            }
            function getProtData(keySystem) {
                var protData = null;
                if (keySystem) {
                    var keySystemString = keySystem.systemString;
                    if (protDataSet) {
                        protData = keySystemString in protDataSet ? protDataSet[keySystemString] : null;
                    }
                }
                return protData;
            }
            function getKeySystemConfiguration(keySystem) {
                var protData = getProtData(keySystem);
                var audioCapabilities = [];
                var videoCapabilities = [];
                var audioRobustness = protData && protData.audioRobustness && protData.audioRobustness.length > 0 ? protData.audioRobustness : robustnessLevel;
                var videoRobustness = protData && protData.videoRobustness && protData.videoRobustness.length > 0 ? protData.videoRobustness : robustnessLevel;
                var ksSessionType = getSessionType(keySystem);
                var distinctiveIdentifier = protData && protData.distinctiveIdentifier ? protData.distinctiveIdentifier : "optional";
                var persistentState = protData && protData.persistentState ? protData.persistentState : ksSessionType === "temporary" ? "optional" : "required";
                mediaInfoArr.forEach(function(media) {
                    if (media.type === constants.AUDIO) {
                        audioCapabilities.push(new _voMediaCapability2["default"](media.codec, audioRobustness));
                    } else if (media.type === constants.VIDEO) {
                        videoCapabilities.push(new _voMediaCapability2["default"](media.codec, videoRobustness));
                    }
                });
                return new _voKeySystemConfiguration2["default"](audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, [ ksSessionType ]);
            }
            function getSessionType(keySystem) {
                var protData = getProtData(keySystem);
                var ksSessionType = protData && protData.sessionType ? protData.sessionType : sessionType;
                return ksSessionType;
            }
            function selectKeySystem(supportedKS, fromManifest) {
                var self = this;
                var requestedKeySystems = [];
                var ksIdx = undefined;
                if (keySystem) {
                    for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {
                        if (keySystem === supportedKS[ksIdx].ks) {
                            var _ret = function() {
                                requestedKeySystems.push({
                                    ks: supportedKS[ksIdx].ks,
                                    configs: [ getKeySystemConfiguration(keySystem) ]
                                });
                                var onKeySystemAccessComplete = function onKeySystemAccessComplete(event) {
                                    eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                                    if (event.error) {
                                        if (!fromManifest) {
                                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                                error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)
                                            });
                                        }
                                    } else {
                                        logger.info("DRM: KeySystem Access Granted");
                                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                            data: event.data
                                        });
                                        if (supportedKS[ksIdx].sessionId) {
                                            loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);
                                        } else if (supportedKS[ksIdx].initData) {
                                            createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);
                                        }
                                    }
                                };
                                eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                                protectionModel.requestKeySystemAccess(requestedKeySystems);
                                return "break";
                            }();
                            if (_ret === "break") break;
                        }
                    }
                } else if (keySystem === undefined) {
                    var onKeySystemSelected;
                    (function() {
                        keySystem = null;
                        pendingNeedKeyData.push(supportedKS);
                        for (var i = 0; i < supportedKS.length; i++) {
                            requestedKeySystems.push({
                                ks: supportedKS[i].ks,
                                configs: [ getKeySystemConfiguration(supportedKS[i].ks) ]
                            });
                        }
                        var keySystemAccess = undefined;
                        var onKeySystemAccessComplete = function onKeySystemAccessComplete(event) {
                            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                            if (event.error) {
                                keySystem = undefined;
                                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);
                                if (!fromManifest) {
                                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                        data: null,
                                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)
                                    });
                                }
                            } else {
                                keySystemAccess = event.data;
                                logger.info("DRM: KeySystem Access Granted (" + keySystemAccess.keySystem.systemString + ")!  Selecting key system...");
                                protectionModel.selectKeySystem(keySystemAccess);
                            }
                        };
                        onKeySystemSelected = function onKeySystemSelected(event) {
                            eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);
                            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                            if (!event.error) {
                                if (!protectionModel) {
                                    return;
                                }
                                keySystem = protectionModel.getKeySystem();
                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                    data: keySystemAccess
                                });
                                var protData = getProtData(keySystem);
                                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {
                                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);
                                }
                                for (var i = 0; i < pendingNeedKeyData.length; i++) {
                                    for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {
                                        if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {
                                            if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty("clearkeys")) {
                                                var initData = {
                                                    kids: Object.keys(protData.clearkeys)
                                                };
                                                pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));
                                            }
                                            if (pendingNeedKeyData[i][ksIdx].sessionId) {
                                                loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);
                                            } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {
                                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);
                                            }
                                            break;
                                        }
                                    }
                                }
                            } else {
                                keySystem = undefined;
                                if (!fromManifest) {
                                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                        data: null,
                                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + "Error selecting key system! -- " + event.error)
                                    });
                                }
                            }
                        };
                        eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);
                        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                        protectionModel.requestKeySystemAccess(requestedKeySystems);
                    })();
                } else {
                    pendingNeedKeyData.push(supportedKS);
                }
            }
            function sendLicenseRequestCompleteEvent(data, error) {
                eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {
                    data: data,
                    error: error
                });
            }
            function onKeyStatusChanged(e) {
                if (e.error) {
                    eventBus.trigger(events.KEY_STATUSES_CHANGED, {
                        data: null,
                        error: e.error
                    });
                } else {
                    logger.debug("DRM: key status = " + e.status);
                }
            }
            function onKeyMessage(e) {
                logger.debug("DRM: onKeyMessage");
                var keyMessage = e.data;
                eventBus.trigger(events.KEY_MESSAGE, {
                    data: keyMessage
                });
                var messageType = keyMessage.messageType ? keyMessage.messageType : "license-request";
                var message = keyMessage.message;
                var sessionToken = keyMessage.sessionToken;
                var protData = getProtData(keySystem);
                var keySystemString = keySystem ? keySystem.systemString : null;
                var licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);
                var eventData = {
                    sessionToken: sessionToken,
                    messageType: messageType
                };
                if (!message || message.byteLength === 0) {
                    sendLicenseRequestCompleteEvent(eventData, new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, _errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));
                    return;
                }
                if (!licenseServerData) {
                    logger.debug("DRM: License server request not required for this message (type = " + e.data.messageType + ").  Session ID = " + sessionToken.getSessionID());
                    sendLicenseRequestCompleteEvent(eventData);
                    return;
                }
                if (protectionKeyController.isClearKey(keySystem)) {
                    var clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);
                    if (clearkeys) {
                        logger.debug("DRM: ClearKey license request handled by application!");
                        sendLicenseRequestCompleteEvent(eventData);
                        protectionModel.updateKeySession(sessionToken, clearkeys);
                        return;
                    }
                }
                var url = null;
                if (protData && protData.serverURL) {
                    var serverURL = protData.serverURL;
                    if (typeof serverURL === "string" && serverURL !== "") {
                        url = serverURL;
                    } else if (typeof serverURL === "object" && serverURL.hasOwnProperty(messageType)) {
                        url = serverURL[messageType];
                    }
                } else if (protData && protData.laURL && protData.laURL !== "") {
                    url = protData.laURL;
                } else {
                    url = keySystem.getLicenseServerURLFromInitData(_CommonEncryption2["default"].getPSSHData(sessionToken.initData));
                    if (!url) {
                        url = e.data.laURL;
                    }
                }
                url = licenseServerData.getServerURLFromMessage(url, message, messageType);
                if (!url) {
                    sendLicenseRequestCompleteEvent(eventData, new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, _errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));
                    return;
                }
                var reqHeaders = {};
                var withCredentials = false;
                var updateHeaders = function updateHeaders(headers) {
                    if (headers) {
                        for (var key in headers) {
                            if ("authorization" === key.toLowerCase()) {
                                withCredentials = true;
                            }
                            reqHeaders[key] = headers[key];
                        }
                    }
                };
                if (protData) {
                    updateHeaders(protData.httpRequestHeaders);
                }
                updateHeaders(keySystem.getRequestHeadersFromMessage(message));
                if (protData && typeof protData.withCredentials == "boolean") {
                    withCredentials = protData.withCredentials;
                }
                var reportError = function reportError(xhr, eventData, keySystemString, messageType) {
                    var errorMsg = xhr.response ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : "NONE";
                    sendLicenseRequestCompleteEvent(eventData, new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE, _errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is "' + xhr.statusText + '" (' + xhr.status + "), readyState is " + xhr.readyState + ".  Response is " + errorMsg));
                };
                var onLoad = function onLoad(xhr) {
                    if (!protectionModel) {
                        return;
                    }
                    if (xhr.status === 200) {
                        var licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);
                        if (licenseMessage !== null) {
                            sendLicenseRequestCompleteEvent(eventData);
                            protectionModel.updateKeySession(sessionToken, licenseMessage);
                        } else {
                            reportError(xhr, eventData, keySystemString, messageType);
                        }
                    } else {
                        reportError(xhr, eventData, keySystemString, messageType);
                    }
                };
                var onAbort = function onAbort(xhr) {
                    sendLicenseRequestCompleteEvent(eventData, new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE, _errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is "' + xhr.statusText + '" (' + xhr.status + "), readyState is " + xhr.readyState));
                };
                var onError = function onError(xhr) {
                    sendLicenseRequestCompleteEvent(eventData, new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE, _errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is "' + xhr.statusText + '" (' + xhr.status + "), readyState is " + xhr.readyState));
                };
                var reqPayload = keySystem.getLicenseRequestFromMessage(message);
                var reqMethod = licenseServerData.getHTTPMethod(messageType);
                var responseType = licenseServerData.getResponseType(keySystemString, messageType);
                var timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;
                doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload, LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);
            }
            function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {
                var xhr = new XMLHttpRequest();
                xhr.open(method, url, true);
                xhr.responseType = responseType;
                xhr.withCredentials = withCredentials;
                if (timeout > 0) {
                    xhr.timeout = timeout;
                }
                for (var key in headers) {
                    xhr.setRequestHeader(key, headers[key]);
                }
                var retryRequest = function retryRequest() {
                    retriesCount--;
                    setTimeout(function() {
                        doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError);
                    }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);
                };
                xhr.onload = function() {
                    if (this.status === 200 || retriesCount <= 0) {
                        onLoad(this);
                    } else {
                        logger.warn("License request failed (" + this.status + "). Retrying it... Pending retries: " + retriesCount);
                        retryRequest();
                    }
                };
                xhr.ontimeout = xhr.onerror = function() {
                    if (retriesCount <= 0) {
                        onError(this);
                    } else {
                        logger.warn("License request network request failed . Retrying it... Pending retries: " + retriesCount);
                        retryRequest();
                    }
                };
                xhr.onabort = function() {
                    onAbort(this);
                };
                xhr.send(payload);
            }
            function onNeedKey(event, retry) {
                logger.debug("DRM: onNeedKey");
                if (event.key.initDataType !== "cenc") {
                    logger.warn("DRM:  Only 'cenc' initData is supported!  Ignoring initData of type: " + event.key.initDataType);
                    return;
                }
                if (mediaInfoArr.length === 0) {
                    logger.warn("DRM: onNeedKey called before initializeForMedia, wait until initialized");
                    retry = typeof retry === "undefined" ? 1 : retry + 1;
                    if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {
                        needkeyRetries.push(setTimeout(function() {
                            onNeedKey(event, retry);
                        }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));
                        return;
                    }
                }
                var abInitData = event.key.initData;
                if (ArrayBuffer.isView(abInitData)) {
                    abInitData = abInitData.buffer;
                }
                if (keySystem) {
                    var initDataForKS = _CommonEncryption2["default"].getPSSHForKeySystem(keySystem, abInitData);
                    if (initDataForKS) {
                        var currentInitData = protectionModel.getAllInitData();
                        for (var i = 0; i < currentInitData.length; i++) {
                            if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {
                                logger.warn("DRM: Ignoring initData because we have already seen it!");
                                return;
                            }
                        }
                    }
                }
                logger.debug("DRM: initData:", String.fromCharCode.apply(null, new Uint8Array(abInitData)));
                var supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);
                if (supportedKS.length === 0) {
                    logger.debug("DRM: Received needkey event with initData, but we don't support any of the key systems!");
                    return;
                }
                selectKeySystem(supportedKS, false);
            }
            function getKeySystems() {
                return protectionKeyController ? protectionKeyController.getKeySystems() : [];
            }
            function setKeySystems(keySystems) {
                if (protectionKeyController) {
                    protectionKeyController.setKeySystems(keySystems);
                }
            }
            instance = {
                initializeForMedia: initializeForMedia,
                createKeySession: createKeySession,
                loadKeySession: loadKeySession,
                removeKeySession: removeKeySession,
                closeKeySession: closeKeySession,
                setServerCertificate: setServerCertificate,
                setMediaElement: setMediaElement,
                setSessionType: setSessionType,
                setRobustnessLevel: setRobustnessLevel,
                setProtectionData: setProtectionData,
                getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,
                getKeySystems: getKeySystems,
                setKeySystems: setKeySystems,
                stop: stop,
                reset: reset
            };
            setup();
            return instance;
        }
        ProtectionController.__dashjs_factory_name = "ProtectionController";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(ProtectionController);
        module.exports = exports["default"];
    }, {
        156: 156,
        165: 165,
        177: 177,
        178: 178,
        221: 221
    } ],
    160: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _CommonEncryption = _dereq_(156);
        var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);
        var _drmKeySystemClearKey = _dereq_(161);
        var _drmKeySystemClearKey2 = _interopRequireDefault(_drmKeySystemClearKey);
        var _drmKeySystemW3CClearKey = _dereq_(163);
        var _drmKeySystemW3CClearKey2 = _interopRequireDefault(_drmKeySystemW3CClearKey);
        var _drmKeySystemWidevine = _dereq_(164);
        var _drmKeySystemWidevine2 = _interopRequireDefault(_drmKeySystemWidevine);
        var _drmKeySystemPlayReady = _dereq_(162);
        var _drmKeySystemPlayReady2 = _interopRequireDefault(_drmKeySystemPlayReady);
        var _serversDRMToday = _dereq_(170);
        var _serversDRMToday2 = _interopRequireDefault(_serversDRMToday);
        var _serversPlayReady = _dereq_(171);
        var _serversPlayReady2 = _interopRequireDefault(_serversPlayReady);
        var _serversWidevine = _dereq_(172);
        var _serversWidevine2 = _interopRequireDefault(_serversWidevine);
        var _serversClearKey = _dereq_(169);
        var _serversClearKey2 = _interopRequireDefault(_serversClearKey);
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        function ProtectionKeyController() {
            var context = this.context;
            var instance = undefined, debug = undefined, logger = undefined, keySystems = undefined, BASE64 = undefined, clearkeyKeySystem = undefined, clearkeyW3CKeySystem = undefined;
            function setConfig(config) {
                if (!config) return;
                if (config.debug) {
                    debug = config.debug;
                    logger = debug.getLogger(instance);
                }
                if (config.BASE64) {
                    BASE64 = config.BASE64;
                }
            }
            function initialize() {
                keySystems = [];
                var keySystem = undefined;
                keySystem = (0, _drmKeySystemPlayReady2["default"])(context).getInstance({
                    BASE64: BASE64
                });
                keySystems.push(keySystem);
                keySystem = (0, _drmKeySystemWidevine2["default"])(context).getInstance({
                    BASE64: BASE64
                });
                keySystems.push(keySystem);
                keySystem = (0, _drmKeySystemClearKey2["default"])(context).getInstance({
                    BASE64: BASE64
                });
                keySystems.push(keySystem);
                clearkeyKeySystem = keySystem;
                keySystem = (0, _drmKeySystemW3CClearKey2["default"])(context).getInstance({
                    BASE64: BASE64,
                    debug: debug
                });
                keySystems.push(keySystem);
                clearkeyW3CKeySystem = keySystem;
            }
            function getKeySystems() {
                return keySystems;
            }
            function setKeySystems(newKeySystems) {
                keySystems = newKeySystems;
            }
            function getKeySystemBySystemString(systemString) {
                for (var i = 0; i < keySystems.length; i++) {
                    if (keySystems[i].systemString === systemString) {
                        return keySystems[i];
                    }
                }
                return null;
            }
            function isClearKey(keySystem) {
                return keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem;
            }
            function initDataEquals(initData1, initData2) {
                if (initData1.byteLength === initData2.byteLength) {
                    var data1 = new Uint8Array(initData1);
                    var data2 = new Uint8Array(initData2);
                    for (var j = 0; j < data1.length; j++) {
                        if (data1[j] !== data2[j]) {
                            return false;
                        }
                    }
                    return true;
                }
                return false;
            }
            function getSupportedKeySystemsFromContentProtection(cps) {
                var cp = undefined, ks = undefined, ksIdx = undefined, cpIdx = undefined;
                var supportedKS = [];
                if (cps) {
                    for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {
                        ks = keySystems[ksIdx];
                        for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {
                            cp = cps[cpIdx];
                            if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {
                                var initData = ks.getInitData(cp);
                                supportedKS.push({
                                    ks: keySystems[ksIdx],
                                    initData: initData,
                                    cdmData: ks.getCDMData(),
                                    sessionId: ks.getSessionId(cp)
                                });
                            }
                        }
                    }
                }
                return supportedKS;
            }
            function getSupportedKeySystems(initData, protDataSet) {
                var supportedKS = [];
                var pssh = _CommonEncryption2["default"].parsePSSHList(initData);
                var ks = undefined, keySystemString = undefined, shouldNotFilterOutKeySystem = undefined;
                for (var ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {
                    ks = keySystems[ksIdx];
                    keySystemString = ks.systemString;
                    shouldNotFilterOutKeySystem = protDataSet ? keySystemString in protDataSet : true;
                    if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {
                        supportedKS.push({
                            ks: ks,
                            initData: pssh[ks.uuid],
                            cdmData: ks.getCDMData(),
                            sessionId: ks.getSessionId()
                        });
                    }
                }
                return supportedKS;
            }
            function getLicenseServer(keySystem, protData, messageType) {
                if (messageType === "license-release" || messageType === "individualization-request") {
                    return null;
                }
                var licenseServerData = null;
                if (protData && protData.hasOwnProperty("drmtoday")) {
                    licenseServerData = (0, _serversDRMToday2["default"])(context).getInstance({
                        BASE64: BASE64
                    });
                } else if (keySystem.systemString === _constantsProtectionConstants2["default"].WIDEVINE_KEYSTEM_STRING) {
                    licenseServerData = (0, _serversWidevine2["default"])(context).getInstance();
                } else if (keySystem.systemString === _constantsProtectionConstants2["default"].PLAYREADY_KEYSTEM_STRING) {
                    licenseServerData = (0, _serversPlayReady2["default"])(context).getInstance();
                } else if (keySystem.systemString === _constantsProtectionConstants2["default"].CLEARKEY_KEYSTEM_STRING) {
                    licenseServerData = (0, _serversClearKey2["default"])(context).getInstance();
                }
                return licenseServerData;
            }
            function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {
                try {
                    return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);
                } catch (error) {
                    logger.error("Failed to retrieve clearkeys from ProtectionData");
                    return null;
                }
            }
            function setProtectionData(protectionDataSet) {
                var getProtectionData = function getProtectionData(keySystemString) {
                    var protData = null;
                    if (protectionDataSet) {
                        protData = keySystemString in protectionDataSet ? protectionDataSet[keySystemString] : null;
                    }
                    return protData;
                };
                for (var i = 0; i < keySystems.length; i++) {
                    var keySystem = keySystems[i];
                    if (keySystem.hasOwnProperty("init")) {
                        keySystem.init(getProtectionData(keySystem.systemString));
                    }
                }
            }
            instance = {
                initialize: initialize,
                setProtectionData: setProtectionData,
                isClearKey: isClearKey,
                initDataEquals: initDataEquals,
                getKeySystems: getKeySystems,
                setKeySystems: setKeySystems,
                getKeySystemBySystemString: getKeySystemBySystemString,
                getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,
                getSupportedKeySystems: getSupportedKeySystems,
                getLicenseServer: getLicenseServer,
                processClearKeyLicenseRequest: processClearKeyLicenseRequest,
                setConfig: setConfig
            };
            return instance;
        }
        ProtectionKeyController.__dashjs_factory_name = "ProtectionKeyController";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController);
        module.exports = exports["default"];
    }, {
        109: 109,
        156: 156,
        161: 161,
        162: 162,
        163: 163,
        164: 164,
        169: 169,
        170: 170,
        171: 171,
        172: 172
    } ],
    161: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voKeyPair = _dereq_(175);
        var _voKeyPair2 = _interopRequireDefault(_voKeyPair);
        var _voClearKeyKeySet = _dereq_(173);
        var _voClearKeyKeySet2 = _interopRequireDefault(_voClearKeyKeySet);
        var _CommonEncryption = _dereq_(156);
        var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        var uuid = "e2719d58-a985-b3c9-781a-b030af78d30e";
        var systemString = _constantsProtectionConstants2["default"].CLEARKEY_KEYSTEM_STRING;
        var schemeIdURI = "urn:uuid:" + uuid;
        function KeySystemClearKey(config) {
            config = config || {};
            var instance = undefined;
            var BASE64 = config.BASE64;
            function getClearKeysFromProtectionData(protectionData, message) {
                var clearkeySet = null;
                if (protectionData) {
                    var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
                    var keyPairs = [];
                    for (var i = 0; i < jsonMsg.kids.length; i++) {
                        var clearkeyID = jsonMsg.kids[i];
                        var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;
                        if (!clearkey) {
                            throw new Error("DRM: ClearKey keyID (" + clearkeyID + ") is not known!");
                        }
                        keyPairs.push(new _voKeyPair2["default"](clearkeyID, clearkey));
                    }
                    clearkeySet = new _voClearKeyKeySet2["default"](keyPairs);
                }
                return clearkeySet;
            }
            function getInitData(cp) {
                return _CommonEncryption2["default"].parseInitDataFromContentProtection(cp, BASE64);
            }
            function getRequestHeadersFromMessage() {
                return null;
            }
            function getLicenseRequestFromMessage(message) {
                return new Uint8Array(message);
            }
            function getLicenseServerURLFromInitData() {
                return null;
            }
            function getCDMData() {
                return null;
            }
            function getSessionId() {
                return null;
            }
            instance = {
                uuid: uuid,
                schemeIdURI: schemeIdURI,
                systemString: systemString,
                getInitData: getInitData,
                getRequestHeadersFromMessage: getRequestHeadersFromMessage,
                getLicenseRequestFromMessage: getLicenseRequestFromMessage,
                getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
                getCDMData: getCDMData,
                getSessionId: getSessionId,
                getClearKeysFromProtectionData: getClearKeysFromProtectionData
            };
            return instance;
        }
        KeySystemClearKey.__dashjs_factory_name = "KeySystemClearKey";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey);
        module.exports = exports["default"];
    }, {
        109: 109,
        156: 156,
        173: 173,
        175: 175
    } ],
    162: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _CommonEncryption = _dereq_(156);
        var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        var uuid = "9a04f079-9840-4286-ab92-e65be0885f95";
        var systemString = _constantsProtectionConstants2["default"].PLAYREADY_KEYSTEM_STRING;
        var schemeIdURI = "urn:uuid:" + uuid;
        var PRCDMData = '<PlayReadyCDMData type="LicenseAcquisition"><LicenseAcquisition version="1.0" Proactive="false"><CustomData encoding="base64encoded">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';
        var protData = undefined;
        function KeySystemPlayReady(config) {
            config = config || {};
            var instance = undefined;
            var messageFormat = "utf-16";
            var BASE64 = config.BASE64;
            function checkConfig() {
                if (!BASE64 || !BASE64.hasOwnProperty("decodeArray") || !BASE64.hasOwnProperty("decodeArray")) {
                    throw new Error("Missing config parameter(s)");
                }
            }
            function getRequestHeadersFromMessage(message) {
                var msg = undefined, xmlDoc = undefined;
                var headers = {};
                var parser = new DOMParser();
                var dataview = messageFormat === "utf-16" ? new Uint16Array(message) : new Uint8Array(message);
                msg = String.fromCharCode.apply(null, dataview);
                xmlDoc = parser.parseFromString(msg, "application/xml");
                var headerNameList = xmlDoc.getElementsByTagName("name");
                var headerValueList = xmlDoc.getElementsByTagName("value");
                for (var i = 0; i < headerNameList.length; i++) {
                    headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;
                }
                if (headers.hasOwnProperty("Content")) {
                    headers["Content-Type"] = headers.Content;
                    delete headers.Content;
                }
                if (!headers.hasOwnProperty("Content-Type")) {
                    headers["Content-Type"] = "text/xml; charset=" + messageFormat;
                }
                return headers;
            }
            function getLicenseRequestFromMessage(message) {
                var licenseRequest = null;
                var parser = new DOMParser();
                var dataview = messageFormat === "utf-16" ? new Uint16Array(message) : new Uint8Array(message);
                checkConfig();
                var msg = String.fromCharCode.apply(null, dataview);
                var xmlDoc = parser.parseFromString(msg, "application/xml");
                if (xmlDoc.getElementsByTagName("PlayReadyKeyMessage")[0]) {
                    var Challenge = xmlDoc.getElementsByTagName("Challenge")[0].childNodes[0].nodeValue;
                    if (Challenge) {
                        licenseRequest = BASE64.decode(Challenge);
                    }
                } else {
                    return message;
                }
                return licenseRequest;
            }
            function getLicenseServerURLFromInitData(initData) {
                if (initData) {
                    var data = new DataView(initData);
                    var numRecords = data.getUint16(4, true);
                    var offset = 6;
                    var parser = new DOMParser();
                    for (var i = 0; i < numRecords; i++) {
                        var recordType = data.getUint16(offset, true);
                        offset += 2;
                        var recordLength = data.getUint16(offset, true);
                        offset += 2;
                        if (recordType !== 1) {
                            offset += recordLength;
                            continue;
                        }
                        var recordData = initData.slice(offset, offset + recordLength);
                        var record = String.fromCharCode.apply(null, new Uint16Array(recordData));
                        var xmlDoc = parser.parseFromString(record, "application/xml");
                        if (xmlDoc.getElementsByTagName("LA_URL")[0]) {
                            var laurl = xmlDoc.getElementsByTagName("LA_URL")[0].childNodes[0].nodeValue;
                            if (laurl) {
                                return laurl;
                            }
                        }
                        if (xmlDoc.getElementsByTagName("LUI_URL")[0]) {
                            var luiurl = xmlDoc.getElementsByTagName("LUI_URL")[0].childNodes[0].nodeValue;
                            if (luiurl) {
                                return luiurl;
                            }
                        }
                    }
                }
                return null;
            }
            function getInitData(cpData) {
                var PSSHBoxType = new Uint8Array([ 112, 115, 115, 104, 0, 0, 0, 0 ]);
                var playreadySystemID = new Uint8Array([ 154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149 ]);
                var byteCursor = 0;
                var uint8arraydecodedPROHeader = null;
                var PROSize = undefined, PSSHSize = undefined, PSSHBoxBuffer = undefined, PSSHBox = undefined, PSSHData = undefined;
                checkConfig();
                if (!cpData) {
                    return null;
                }
                if ("pssh" in cpData) {
                    return _CommonEncryption2["default"].parseInitDataFromContentProtection(cpData, BASE64);
                }
                if ("pro" in cpData) {
                    uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);
                } else if ("prheader" in cpData) {
                    uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);
                } else {
                    return null;
                }
                PROSize = uint8arraydecodedPROHeader.length;
                PSSHSize = 4 + PSSHBoxType.length + playreadySystemID.length + 4 + PROSize;
                PSSHBoxBuffer = new ArrayBuffer(PSSHSize);
                PSSHBox = new Uint8Array(PSSHBoxBuffer);
                PSSHData = new DataView(PSSHBoxBuffer);
                PSSHData.setUint32(byteCursor, PSSHSize);
                byteCursor += 4;
                PSSHBox.set(PSSHBoxType, byteCursor);
                byteCursor += PSSHBoxType.length;
                PSSHBox.set(playreadySystemID, byteCursor);
                byteCursor += playreadySystemID.length;
                PSSHData.setUint32(byteCursor, PROSize);
                byteCursor += 4;
                PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);
                byteCursor += PROSize;
                return PSSHBox.buffer;
            }
            function setPlayReadyMessageFormat(format) {
                if (format !== "utf-8" && format !== "utf-16") {
                    throw new Error('Specified message format is not one of "utf-8" or "utf-16"');
                }
                messageFormat = format;
            }
            function init(protectionData) {
                if (protectionData) {
                    protData = protectionData;
                }
            }
            function getCDMData() {
                var customData = undefined, cdmData = undefined, cdmDataBytes = undefined, i = undefined;
                checkConfig();
                if (protData && protData.cdmData) {
                    customData = [];
                    for (i = 0; i < protData.cdmData.length; ++i) {
                        customData.push(protData.cdmData.charCodeAt(i));
                        customData.push(0);
                    }
                    customData = String.fromCharCode.apply(null, customData);
                    customData = BASE64.encode(customData);
                    cdmData = PRCDMData.replace("%CUSTOMDATA%", customData);
                    cdmDataBytes = [];
                    for (i = 0; i < cdmData.length; ++i) {
                        cdmDataBytes.push(cdmData.charCodeAt(i));
                        cdmDataBytes.push(0);
                    }
                    return new Uint8Array(cdmDataBytes).buffer;
                }
                return null;
            }
            function getSessionId(cp) {
                if (protData && protData.sessionId) {
                    return protData.sessionId;
                } else if (cp && cp.sessionId) {
                    return cp.sessionId;
                }
                return null;
            }
            instance = {
                uuid: uuid,
                schemeIdURI: schemeIdURI,
                systemString: systemString,
                getInitData: getInitData,
                getRequestHeadersFromMessage: getRequestHeadersFromMessage,
                getLicenseRequestFromMessage: getLicenseRequestFromMessage,
                getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
                getCDMData: getCDMData,
                getSessionId: getSessionId,
                setPlayReadyMessageFormat: setPlayReadyMessageFormat,
                init: init
            };
            return instance;
        }
        KeySystemPlayReady.__dashjs_factory_name = "KeySystemPlayReady";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady);
        module.exports = exports["default"];
    }, {
        109: 109,
        156: 156
    } ],
    163: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voKeyPair = _dereq_(175);
        var _voKeyPair2 = _interopRequireDefault(_voKeyPair);
        var _voClearKeyKeySet = _dereq_(173);
        var _voClearKeyKeySet2 = _interopRequireDefault(_voClearKeyKeySet);
        var _CommonEncryption = _dereq_(156);
        var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        var uuid = "1077efec-c0b2-4d02-ace3-3c1e52e2fb4b";
        var systemString = _constantsProtectionConstants2["default"].CLEARKEY_KEYSTEM_STRING;
        var schemeIdURI = "urn:uuid:" + uuid;
        function KeySystemW3CClearKey(config) {
            var instance = undefined;
            var BASE64 = config.BASE64;
            var logger = config.debug.getLogger(instance);
            function getClearKeysFromProtectionData(protectionData, message) {
                var clearkeySet = null;
                if (protectionData) {
                    var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
                    var keyPairs = [];
                    for (var i = 0; i < jsonMsg.kids.length; i++) {
                        var clearkeyID = jsonMsg.kids[i];
                        var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;
                        if (!clearkey) {
                            throw new Error("DRM: ClearKey keyID (" + clearkeyID + ") is not known!");
                        }
                        keyPairs.push(new _voKeyPair2["default"](clearkeyID, clearkey));
                    }
                    clearkeySet = new _voClearKeyKeySet2["default"](keyPairs);
                    logger.warn("ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4");
                }
                return clearkeySet;
            }
            function getInitData(cp) {
                return _CommonEncryption2["default"].parseInitDataFromContentProtection(cp, BASE64);
            }
            function getRequestHeadersFromMessage() {
                return null;
            }
            function getLicenseRequestFromMessage(message) {
                return new Uint8Array(message);
            }
            function getLicenseServerURLFromInitData() {
                return null;
            }
            function getCDMData() {
                return null;
            }
            function getSessionId() {
                return null;
            }
            instance = {
                uuid: uuid,
                schemeIdURI: schemeIdURI,
                systemString: systemString,
                getInitData: getInitData,
                getRequestHeadersFromMessage: getRequestHeadersFromMessage,
                getLicenseRequestFromMessage: getLicenseRequestFromMessage,
                getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
                getCDMData: getCDMData,
                getSessionId: getSessionId,
                getClearKeysFromProtectionData: getClearKeysFromProtectionData
            };
            return instance;
        }
        KeySystemW3CClearKey.__dashjs_factory_name = "KeySystemW3CClearKey";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey);
        module.exports = exports["default"];
    }, {
        109: 109,
        156: 156,
        173: 173,
        175: 175
    } ],
    164: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _CommonEncryption = _dereq_(156);
        var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        var uuid = "edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
        var systemString = _constantsProtectionConstants2["default"].WIDEVINE_KEYSTEM_STRING;
        var schemeIdURI = "urn:uuid:" + uuid;
        function KeySystemWidevine(config) {
            config = config || {};
            var instance = undefined;
            var protData = null;
            var BASE64 = config.BASE64;
            function init(protectionData) {
                if (protectionData) {
                    protData = protectionData;
                }
            }
            function getInitData(cp) {
                return _CommonEncryption2["default"].parseInitDataFromContentProtection(cp, BASE64);
            }
            function getRequestHeadersFromMessage() {
                return null;
            }
            function getLicenseRequestFromMessage(message) {
                return new Uint8Array(message);
            }
            function getLicenseServerURLFromInitData() {
                return null;
            }
            function getCDMData() {
                return null;
            }
            function getSessionId(cp) {
                if (protData && protData.sessionId) {
                    return protData.sessionId;
                } else if (cp && cp.sessionId) {
                    return cp.sessionId;
                }
                return null;
            }
            instance = {
                uuid: uuid,
                schemeIdURI: schemeIdURI,
                systemString: systemString,
                init: init,
                getInitData: getInitData,
                getRequestHeadersFromMessage: getRequestHeadersFromMessage,
                getLicenseRequestFromMessage: getLicenseRequestFromMessage,
                getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
                getCDMData: getCDMData,
                getSessionId: getSessionId
            };
            return instance;
        }
        KeySystemWidevine.__dashjs_factory_name = "KeySystemWidevine";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine);
        module.exports = exports["default"];
    }, {
        109: 109,
        156: 156
    } ],
    165: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _coreErrorsErrorsBase = _dereq_(53);
        var _coreErrorsErrorsBase2 = _interopRequireDefault(_coreErrorsErrorsBase);
        var ProtectionErrors = function(_ErrorsBase) {
            _inherits(ProtectionErrors, _ErrorsBase);
            function ProtectionErrors() {
                _classCallCheck(this, ProtectionErrors);
                _get(Object.getPrototypeOf(ProtectionErrors.prototype), "constructor", this).call(this);
                this.MEDIA_KEYERR_CODE = 100;
                this.MEDIA_KEYERR_UNKNOWN_CODE = 101;
                this.MEDIA_KEYERR_CLIENT_CODE = 102;
                this.MEDIA_KEYERR_SERVICE_CODE = 103;
                this.MEDIA_KEYERR_OUTPUT_CODE = 104;
                this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;
                this.MEDIA_KEYERR_DOMAIN_CODE = 106;
                this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;
                this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;
                this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;
                this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;
                this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;
                this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;
                this.KEY_SESSION_CREATED_ERROR_CODE = 113;
                this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;
                this.MEDIA_KEYERR_UNKNOWN_MESSAGE = "An unspecified error occurred. This value is used for errors that don't match any of the other codes.";
                this.MEDIA_KEYERR_CLIENT_MESSAGE = "The Key System could not be installed or updated.";
                this.MEDIA_KEYERR_SERVICE_MESSAGE = "The message passed into update indicated an error from the license service.";
                this.MEDIA_KEYERR_OUTPUT_MESSAGE = "There is no available output device with the required characteristics for the content protection system.";
                this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = "A hardware configuration change caused a content protection error.";
                this.MEDIA_KEYERR_DOMAIN_MESSAGE = "An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.";
                this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = "Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!";
                this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = "DRM: Empty key message from CDM";
                this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = "Error updating server certificate -- ";
                this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = "DRM: KeyStatusChange error! -- License has expired";
                this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = "DRM: No license server URL specified!";
                this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = "DRM: KeySystem Access Denied! -- ";
                this.KEY_SESSION_CREATED_ERROR_MESSAGE = "DRM: unable to create session! --";
                this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = "DRM: licenser error! --";
            }
            return ProtectionErrors;
        }(_coreErrorsErrorsBase2["default"]);
        var protectionErrors = new ProtectionErrors();
        exports["default"] = protectionErrors;
        module.exports = exports["default"];
    }, {
        53: 53
    } ],
    166: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _controllersProtectionKeyController = _dereq_(160);
        var _controllersProtectionKeyController2 = _interopRequireDefault(_controllersProtectionKeyController);
        var _voNeedKey = _dereq_(179);
        var _voNeedKey2 = _interopRequireDefault(_voNeedKey);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _voKeyMessage = _dereq_(174);
        var _voKeyMessage2 = _interopRequireDefault(_voKeyMessage);
        var _voKeySystemConfiguration = _dereq_(177);
        var _voKeySystemConfiguration2 = _interopRequireDefault(_voKeySystemConfiguration);
        var _voKeySystemAccess = _dereq_(176);
        var _voKeySystemAccess2 = _interopRequireDefault(_voKeySystemAccess);
        var _errorsProtectionErrors = _dereq_(165);
        var _errorsProtectionErrors2 = _interopRequireDefault(_errorsProtectionErrors);
        function ProtectionModel_01b(config) {
            config = config || {};
            var context = this.context;
            var eventBus = config.eventBus;
            var events = config.events;
            var debug = config.debug;
            var api = config.api;
            var errHandler = config.errHandler;
            var instance = undefined, logger = undefined, videoElement = undefined, keySystem = undefined, protectionKeyController = undefined, pendingSessions = undefined, sessions = undefined, moreSessionsAllowed = undefined, eventHandler = undefined;
            function setup() {
                logger = debug.getLogger(instance);
                videoElement = null;
                keySystem = null;
                pendingSessions = [];
                sessions = [];
                protectionKeyController = (0, _controllersProtectionKeyController2["default"])(context).getInstance();
                eventHandler = createEventHandler();
            }
            function reset() {
                if (videoElement) {
                    removeEventListeners();
                }
                for (var i = 0; i < sessions.length; i++) {
                    closeKeySession(sessions[i]);
                }
                eventBus.trigger(events.TEARDOWN_COMPLETE);
            }
            function getKeySystem() {
                return keySystem;
            }
            function getAllInitData() {
                var retVal = [];
                for (var i = 0; i < pendingSessions.length; i++) {
                    retVal.push(pendingSessions[i].initData);
                }
                for (var i = 0; i < sessions.length; i++) {
                    retVal.push(sessions[i].initData);
                }
                return retVal;
            }
            function requestKeySystemAccess(ksConfigurations) {
                var ve = videoElement;
                if (!ve) {
                    ve = document.createElement("video");
                }
                var found = false;
                for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {
                    var systemString = ksConfigurations[ksIdx].ks.systemString;
                    var configs = ksConfigurations[ksIdx].configs;
                    var supportedAudio = null;
                    var supportedVideo = null;
                    for (var configIdx = 0; configIdx < configs.length; configIdx++) {
                        var videos = configs[configIdx].videoCapabilities;
                        if (videos && videos.length !== 0) {
                            supportedVideo = [];
                            for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {
                                if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== "") {
                                    supportedVideo.push(videos[videoIdx]);
                                }
                            }
                        }
                        if (!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0) {
                            continue;
                        }
                        found = true;
                        var ksConfig = new _voKeySystemConfiguration2["default"](supportedAudio, supportedVideo);
                        var ks = protectionKeyController.getKeySystemBySystemString(systemString);
                        eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                            data: new _voKeySystemAccess2["default"](ks, ksConfig)
                        });
                        break;
                    }
                }
                if (!found) {
                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        error: "Key system access denied! -- No valid audio/video content configurations detected!"
                    });
                }
            }
            function selectKeySystem(keySystemAccess) {
                keySystem = keySystemAccess.keySystem;
                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
            }
            function setMediaElement(mediaElement) {
                if (videoElement === mediaElement) {
                    return;
                }
                if (videoElement) {
                    removeEventListeners();
                    for (var i = 0; i < sessions.length; i++) {
                        closeKeySession(sessions[i]);
                    }
                    sessions = [];
                }
                videoElement = mediaElement;
                if (videoElement) {
                    videoElement.addEventListener(api.keyerror, eventHandler);
                    videoElement.addEventListener(api.needkey, eventHandler);
                    videoElement.addEventListener(api.keymessage, eventHandler);
                    videoElement.addEventListener(api.keyadded, eventHandler);
                    eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);
                }
            }
            function createKeySession(initData) {
                if (!keySystem) {
                    throw new Error("Can not create sessions until you have selected a key system");
                }
                if (moreSessionsAllowed || sessions.length === 0) {
                    var newSession = {
                        sessionID: null,
                        initData: initData,
                        getSessionID: function getSessionID() {
                            return this.sessionID;
                        },
                        getExpirationTime: function getExpirationTime() {
                            return NaN;
                        },
                        getSessionType: function getSessionType() {
                            return "temporary";
                        }
                    };
                    pendingSessions.push(newSession);
                    videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));
                    return newSession;
                } else {
                    throw new Error("Multiple sessions not allowed!");
                }
            }
            function updateKeySession(sessionToken, message) {
                var sessionID = sessionToken.sessionID;
                if (!protectionKeyController.isClearKey(keySystem)) {
                    videoElement[api.addKey](keySystem.systemString, new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);
                } else {
                    for (var i = 0; i < message.keyPairs.length; i++) {
                        videoElement[api.addKey](keySystem.systemString, message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);
                    }
                }
            }
            function closeKeySession(sessionToken) {
                try {
                    videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);
                } catch (error) {
                    eventBus.trigger(events.KEY_SESSION_CLOSED, {
                        data: null,
                        error: "Error closing session (" + sessionToken.sessionID + ") " + error.message
                    });
                }
            }
            function setServerCertificate() {}
            function loadKeySession() {}
            function removeKeySession() {}
            function createEventHandler() {
                return {
                    handleEvent: function handleEvent(event) {
                        var sessionToken = null;
                        switch (event.type) {
                          case api.needkey:
                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                            eventBus.trigger(events.NEED_KEY, {
                                key: new _voNeedKey2["default"](initData, "cenc")
                            });
                            break;

                          case api.keyerror:
                            sessionToken = findSessionByID(sessions, event.sessionId);
                            if (!sessionToken) {
                                sessionToken = findSessionByID(pendingSessions, event.sessionId);
                            }
                            if (sessionToken) {
                                var code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_CODE;
                                var msg = "";
                                switch (event.errorCode.code) {
                                  case 1:
                                    code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_UNKNOWN_CODE;
                                    msg += "MEDIA_KEYERR_UNKNOWN - " + _errorsProtectionErrors2["default"].MEDIA_KEYERR_UNKNOWN_MESSAGE;
                                    break;

                                  case 2:
                                    code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_CLIENT_CODE;
                                    msg += "MEDIA_KEYERR_CLIENT - " + _errorsProtectionErrors2["default"].MEDIA_KEYERR_CLIENT_MESSAGE;
                                    break;

                                  case 3:
                                    code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_SERVICE_CODE;
                                    msg += "MEDIA_KEYERR_SERVICE - " + _errorsProtectionErrors2["default"].MEDIA_KEYERR_SERVICE_MESSAGE;
                                    break;

                                  case 4:
                                    code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_OUTPUT_CODE;
                                    msg += "MEDIA_KEYERR_OUTPUT - " + _errorsProtectionErrors2["default"].MEDIA_KEYERR_OUTPUT_MESSAGE;
                                    break;

                                  case 5:
                                    code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_HARDWARECHANGE_CODE;
                                    msg += "MEDIA_KEYERR_HARDWARECHANGE - " + _errorsProtectionErrors2["default"].MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;
                                    break;

                                  case 6:
                                    code = _errorsProtectionErrors2["default"].MEDIA_KEYERR_DOMAIN_CODE;
                                    msg += "MEDIA_KEYERR_DOMAIN - " + _errorsProtectionErrors2["default"].MEDIA_KEYERR_DOMAIN_MESSAGE;
                                    break;
                                }
                                msg += "  System Code = " + event.systemCode;
                                eventBus.trigger(events.KEY_ERROR, {
                                    data: new _voDashJSError2["default"](code, msg, sessionToken)
                                });
                            } else {
                                logger.error("No session token found for key error");
                            }
                            break;

                          case api.keyadded:
                            sessionToken = findSessionByID(sessions, event.sessionId);
                            if (!sessionToken) {
                                sessionToken = findSessionByID(pendingSessions, event.sessionId);
                            }
                            if (sessionToken) {
                                logger.debug("DRM: Key added.");
                                eventBus.trigger(events.KEY_ADDED, {
                                    data: sessionToken
                                });
                            } else {
                                logger.debug("No session token found for key added");
                            }
                            break;

                          case api.keymessage:
                            moreSessionsAllowed = event.sessionId !== null && event.sessionId !== undefined;
                            if (moreSessionsAllowed) {
                                sessionToken = findSessionByID(sessions, event.sessionId);
                                if (!sessionToken && pendingSessions.length > 0) {
                                    sessionToken = pendingSessions.shift();
                                    sessions.push(sessionToken);
                                    sessionToken.sessionID = event.sessionId;
                                    eventBus.trigger(events.KEY_SESSION_CREATED, {
                                        data: sessionToken
                                    });
                                }
                            } else if (pendingSessions.length > 0) {
                                sessionToken = pendingSessions.shift();
                                sessions.push(sessionToken);
                                if (pendingSessions.length !== 0) {
                                    errHandler.mediaKeyMessageError(_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_ERROR_MESSAGE);
                                    errHandler.error(new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_ERROR_CODE, _errorsProtectionErrors2["default"].MEDIA_KEY_MESSAGE_ERROR_MESSAGE));
                                }
                            }
                            if (sessionToken) {
                                var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                                sessionToken.keyMessage = message;
                                eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {
                                    data: new _voKeyMessage2["default"](sessionToken, message, event.defaultURL)
                                });
                            } else {
                                logger.warn("No session token found for key message");
                            }
                            break;
                        }
                    }
                };
            }
            function findSessionByID(sessionArray, sessionID) {
                if (!sessionID || !sessionArray) {
                    return null;
                } else {
                    var len = sessionArray.length;
                    for (var i = 0; i < len; i++) {
                        if (sessionArray[i].sessionID == sessionID) {
                            return sessionArray[i];
                        }
                    }
                    return null;
                }
            }
            function removeEventListeners() {
                videoElement.removeEventListener(api.keyerror, eventHandler);
                videoElement.removeEventListener(api.needkey, eventHandler);
                videoElement.removeEventListener(api.keymessage, eventHandler);
                videoElement.removeEventListener(api.keyadded, eventHandler);
            }
            instance = {
                getAllInitData: getAllInitData,
                requestKeySystemAccess: requestKeySystemAccess,
                getKeySystem: getKeySystem,
                selectKeySystem: selectKeySystem,
                setMediaElement: setMediaElement,
                createKeySession: createKeySession,
                updateKeySession: updateKeySession,
                closeKeySession: closeKeySession,
                setServerCertificate: setServerCertificate,
                loadKeySession: loadKeySession,
                removeKeySession: removeKeySession,
                stop: reset,
                reset: reset
            };
            setup();
            return instance;
        }
        ProtectionModel_01b.__dashjs_factory_name = "ProtectionModel_01b";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b);
        module.exports = exports["default"];
    }, {
        160: 160,
        165: 165,
        174: 174,
        176: 176,
        177: 177,
        179: 179,
        221: 221
    } ],
    167: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _controllersProtectionKeyController = _dereq_(160);
        var _controllersProtectionKeyController2 = _interopRequireDefault(_controllersProtectionKeyController);
        var _voNeedKey = _dereq_(179);
        var _voNeedKey2 = _interopRequireDefault(_voNeedKey);
        var _errorsProtectionErrors = _dereq_(165);
        var _errorsProtectionErrors2 = _interopRequireDefault(_errorsProtectionErrors);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _voKeyMessage = _dereq_(174);
        var _voKeyMessage2 = _interopRequireDefault(_voKeyMessage);
        var _voKeySystemAccess = _dereq_(176);
        var _voKeySystemAccess2 = _interopRequireDefault(_voKeySystemAccess);
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        function ProtectionModel_21Jan2015(config) {
            config = config || {};
            var context = this.context;
            var eventBus = config.eventBus;
            var events = config.events;
            var debug = config.debug;
            var instance = undefined, logger = undefined, keySystem = undefined, videoElement = undefined, mediaKeys = undefined, sessions = undefined, eventHandler = undefined, protectionKeyController = undefined;
            function setup() {
                logger = debug.getLogger(instance);
                keySystem = null;
                videoElement = null;
                mediaKeys = null;
                sessions = [];
                protectionKeyController = (0, _controllersProtectionKeyController2["default"])(context).getInstance();
                eventHandler = createEventHandler();
            }
            function reset() {
                var numSessions = sessions.length;
                var session = undefined;
                if (numSessions !== 0) {
                    (function() {
                        var done = function done(session) {
                            removeSession(session);
                            if (sessions.length === 0) {
                                if (videoElement) {
                                    videoElement.removeEventListener("encrypted", eventHandler);
                                    videoElement.setMediaKeys(null).then(function() {
                                        eventBus.trigger(events.TEARDOWN_COMPLETE);
                                    });
                                } else {
                                    eventBus.trigger(events.TEARDOWN_COMPLETE);
                                }
                            }
                        };
                        for (var i = 0; i < numSessions; i++) {
                            session = sessions[i];
                            (function(s) {
                                session.session.closed.then(function() {
                                    done(s);
                                });
                                closeKeySessionInternal(session)["catch"](function() {
                                    done(s);
                                });
                            })(session);
                        }
                    })();
                } else {
                    eventBus.trigger(events.TEARDOWN_COMPLETE);
                }
            }
            function stop() {
                var session = undefined;
                for (var i = 0; i < sessions.length; i++) {
                    session = sessions[i];
                    if (!session.getUsable()) {
                        closeKeySessionInternal(session)["catch"](function() {
                            removeSession(session);
                        });
                    }
                }
            }
            function getKeySystem() {
                return keySystem;
            }
            function getAllInitData() {
                var retVal = [];
                for (var i = 0; i < sessions.length; i++) {
                    if (sessions[i].initData) {
                        retVal.push(sessions[i].initData);
                    }
                }
                return retVal;
            }
            function requestKeySystemAccess(ksConfigurations) {
                requestKeySystemAccessInternal(ksConfigurations, 0);
            }
            function selectKeySystem(keySystemAccess) {
                keySystemAccess.mksa.createMediaKeys().then(function(mkeys) {
                    keySystem = keySystemAccess.keySystem;
                    mediaKeys = mkeys;
                    if (videoElement) {
                        videoElement.setMediaKeys(mediaKeys).then(function() {
                            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
                        });
                    } else {
                        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
                    }
                })["catch"](function() {
                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {
                        error: "Error selecting keys system (" + keySystemAccess.keySystem.systemString + ")! Could not create MediaKeys -- TODO"
                    });
                });
            }
            function setMediaElement(mediaElement) {
                if (videoElement === mediaElement) return;
                if (videoElement) {
                    videoElement.removeEventListener("encrypted", eventHandler);
                    if (videoElement.setMediaKeys) {
                        videoElement.setMediaKeys(null);
                    }
                }
                videoElement = mediaElement;
                if (videoElement) {
                    videoElement.addEventListener("encrypted", eventHandler);
                    if (videoElement.setMediaKeys && mediaKeys) {
                        videoElement.setMediaKeys(mediaKeys);
                    }
                }
            }
            function setServerCertificate(serverCertificate) {
                if (!keySystem || !mediaKeys) {
                    throw new Error("Can not set server certificate until you have selected a key system");
                }
                mediaKeys.setServerCertificate(serverCertificate).then(function() {
                    logger.info("DRM: License server certificate successfully updated.");
                    eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);
                })["catch"](function(error) {
                    eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {
                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].SERVER_CERTIFICATE_UPDATED_ERROR_CODE, _errorsProtectionErrors2["default"].SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)
                    });
                });
            }
            function createKeySession(initData, protData, sessionType) {
                if (!keySystem || !mediaKeys) {
                    throw new Error("Can not create sessions until you have selected a key system");
                }
                var session = mediaKeys.createSession(sessionType);
                var sessionToken = createSessionToken(session, initData, sessionType);
                var ks = this.getKeySystem();
                var dataType = ks.systemString === _constantsProtectionConstants2["default"].CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? "keyids" : "cenc";
                session.generateRequest(dataType, initData).then(function() {
                    logger.debug("DRM: Session created.  SessionID = " + sessionToken.getSessionID());
                    eventBus.trigger(events.KEY_SESSION_CREATED, {
                        data: sessionToken
                    });
                })["catch"](function(error) {
                    removeSession(sessionToken);
                    eventBus.trigger(events.KEY_SESSION_CREATED, {
                        data: null,
                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_MESSAGE + "Error generating key request -- " + error.name)
                    });
                });
            }
            function updateKeySession(sessionToken, message) {
                var session = sessionToken.session;
                if (protectionKeyController.isClearKey(keySystem)) {
                    message = message.toJWK();
                }
                session.update(message)["catch"](function(error) {
                    eventBus.trigger(events.KEY_ERROR, {
                        data: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEYERR_CODE, "Error sending update() message! " + error.name, sessionToken)
                    });
                });
            }
            function loadKeySession(sessionID, initData, sessionType) {
                if (!keySystem || !mediaKeys) {
                    throw new Error("Can not load sessions until you have selected a key system");
                }
                for (var i = 0; i < sessions.length; i++) {
                    if (sessionID === sessions[i].sessionId) {
                        logger.warn("DRM: Ignoring session ID because we have already seen it!");
                        return;
                    }
                }
                var session = mediaKeys.createSession(sessionType);
                var sessionToken = createSessionToken(session, initData, sessionType, sessionID);
                session.load(sessionID).then(function(success) {
                    if (success) {
                        logger.debug("DRM: Session loaded.  SessionID = " + sessionToken.getSessionID());
                        eventBus.trigger(events.KEY_SESSION_CREATED, {
                            data: sessionToken
                        });
                    } else {
                        removeSession(sessionToken);
                        eventBus.trigger(events.KEY_SESSION_CREATED, {
                            data: null,
                            error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_MESSAGE + "Could not load session! Invalid Session ID (" + sessionID + ")")
                        });
                    }
                })["catch"](function(error) {
                    removeSession(sessionToken);
                    eventBus.trigger(events.KEY_SESSION_CREATED, {
                        data: null,
                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_SESSION_CREATED_ERROR_MESSAGE + "Could not load session (" + sessionID + ")! " + error.name)
                    });
                });
            }
            function removeKeySession(sessionToken) {
                var session = sessionToken.session;
                session.remove().then(function() {
                    logger.debug("DRM: Session removed.  SessionID = " + sessionToken.getSessionID());
                    eventBus.trigger(events.KEY_SESSION_REMOVED, {
                        data: sessionToken.getSessionID()
                    });
                }, function(error) {
                    eventBus.trigger(events.KEY_SESSION_REMOVED, {
                        data: null,
                        error: "Error removing session (" + sessionToken.getSessionID() + "). " + error.name
                    });
                });
            }
            function closeKeySession(sessionToken) {
                closeKeySessionInternal(sessionToken)["catch"](function(error) {
                    removeSession(sessionToken);
                    eventBus.trigger(events.KEY_SESSION_CLOSED, {
                        data: null,
                        error: "Error closing session (" + sessionToken.getSessionID() + ") " + error.name
                    });
                });
            }
            function requestKeySystemAccessInternal(ksConfigurations, idx) {
                if (navigator.requestMediaKeySystemAccess === undefined || typeof navigator.requestMediaKeySystemAccess !== "function") {
                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        error: "Insecure origins are not allowed"
                    });
                    return;
                }
                (function(i) {
                    var keySystem = ksConfigurations[i].ks;
                    var configs = ksConfigurations[i].configs;
                    var systemString = keySystem.systemString;
                    if (systemString === _constantsProtectionConstants2["default"].PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === "required") {
                        systemString += ".recommendation";
                    }
                    navigator.requestMediaKeySystemAccess(systemString, configs).then(function(mediaKeySystemAccess) {
                        var configuration = typeof mediaKeySystemAccess.getConfiguration === "function" ? mediaKeySystemAccess.getConfiguration() : null;
                        var keySystemAccess = new _voKeySystemAccess2["default"](keySystem, configuration);
                        keySystemAccess.mksa = mediaKeySystemAccess;
                        eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                            data: keySystemAccess
                        });
                    })["catch"](function(error) {
                        if (++i < ksConfigurations.length) {
                            requestKeySystemAccessInternal(ksConfigurations, i);
                        } else {
                            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                                error: "Key system access denied! " + error.message
                            });
                        }
                    });
                })(idx);
            }
            function closeKeySessionInternal(sessionToken) {
                var session = sessionToken.session;
                session.removeEventListener("keystatuseschange", sessionToken);
                session.removeEventListener("message", sessionToken);
                return session.close();
            }
            function createEventHandler() {
                return {
                    handleEvent: function handleEvent(event) {
                        switch (event.type) {
                          case "encrypted":
                            if (event.initData) {
                                var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                                eventBus.trigger(events.NEED_KEY, {
                                    key: new _voNeedKey2["default"](initData, event.initDataType)
                                });
                            }
                            break;
                        }
                    }
                };
            }
            function removeSession(token) {
                for (var i = 0; i < sessions.length; i++) {
                    if (sessions[i] === token) {
                        sessions.splice(i, 1);
                        break;
                    }
                }
            }
            function parseKeyStatus(args) {
                var status = undefined, keyId = undefined;
                if (args && args.length > 0) {
                    if (args[0]) {
                        if (typeof args[0] === "string") {
                            status = args[0];
                        } else {
                            keyId = args[0];
                        }
                    }
                    if (args[1]) {
                        if (typeof args[1] === "string") {
                            status = args[1];
                        } else {
                            keyId = args[1];
                        }
                    }
                }
                return {
                    status: status,
                    keyId: keyId
                };
            }
            function createSessionToken(session, initData, sessionType, sessionID) {
                var token = {
                    session: session,
                    initData: initData,
                    sessionId: sessionID,
                    handleEvent: function handleEvent(event) {
                        switch (event.type) {
                          case "keystatuseschange":
                            eventBus.trigger(events.KEY_STATUSES_CHANGED, {
                                data: this
                            });
                            event.target.keyStatuses.forEach(function() {
                                var keyStatus = parseKeyStatus(arguments);
                                switch (keyStatus.status) {
                                  case "expired":
                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {
                                        error: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, _errorsProtectionErrors2["default"].KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)
                                    });
                                    break;

                                  default:
                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);
                                    break;
                                }
                            });
                            break;

                          case "message":
                            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {
                                data: new _voKeyMessage2["default"](this, message, undefined, event.messageType)
                            });
                            break;
                        }
                    },
                    getSessionID: function getSessionID() {
                        return session.sessionId;
                    },
                    getExpirationTime: function getExpirationTime() {
                        return session.expiration;
                    },
                    getKeyStatuses: function getKeyStatuses() {
                        return session.keyStatuses;
                    },
                    getUsable: function getUsable() {
                        var usable = false;
                        session.keyStatuses.forEach(function() {
                            var keyStatus = parseKeyStatus(arguments);
                            if (keyStatus.status === "usable") {
                                usable = true;
                            }
                        });
                        return usable;
                    },
                    getSessionType: function getSessionType() {
                        return sessionType;
                    }
                };
                session.addEventListener("keystatuseschange", token);
                session.addEventListener("message", token);
                session.closed.then(function() {
                    removeSession(token);
                    logger.debug("DRM: Session closed.  SessionID = " + token.getSessionID());
                    eventBus.trigger(events.KEY_SESSION_CLOSED, {
                        data: token.getSessionID()
                    });
                });
                sessions.push(token);
                return token;
            }
            instance = {
                getAllInitData: getAllInitData,
                requestKeySystemAccess: requestKeySystemAccess,
                getKeySystem: getKeySystem,
                selectKeySystem: selectKeySystem,
                setMediaElement: setMediaElement,
                setServerCertificate: setServerCertificate,
                createKeySession: createKeySession,
                updateKeySession: updateKeySession,
                loadKeySession: loadKeySession,
                removeKeySession: removeKeySession,
                closeKeySession: closeKeySession,
                stop: stop,
                reset: reset
            };
            setup();
            return instance;
        }
        ProtectionModel_21Jan2015.__dashjs_factory_name = "ProtectionModel_21Jan2015";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015);
        module.exports = exports["default"];
    }, {
        109: 109,
        160: 160,
        165: 165,
        174: 174,
        176: 176,
        179: 179,
        221: 221
    } ],
    168: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _controllersProtectionKeyController = _dereq_(160);
        var _controllersProtectionKeyController2 = _interopRequireDefault(_controllersProtectionKeyController);
        var _voNeedKey = _dereq_(179);
        var _voNeedKey2 = _interopRequireDefault(_voNeedKey);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _errorsProtectionErrors = _dereq_(165);
        var _errorsProtectionErrors2 = _interopRequireDefault(_errorsProtectionErrors);
        var _voKeyMessage = _dereq_(174);
        var _voKeyMessage2 = _interopRequireDefault(_voKeyMessage);
        var _voKeySystemConfiguration = _dereq_(177);
        var _voKeySystemConfiguration2 = _interopRequireDefault(_voKeySystemConfiguration);
        var _voKeySystemAccess = _dereq_(176);
        var _voKeySystemAccess2 = _interopRequireDefault(_voKeySystemAccess);
        function ProtectionModel_3Feb2014(config) {
            config = config || {};
            var context = this.context;
            var eventBus = config.eventBus;
            var events = config.events;
            var debug = config.debug;
            var api = config.api;
            var instance = undefined, logger = undefined, videoElement = undefined, keySystem = undefined, mediaKeys = undefined, keySystemAccess = undefined, sessions = undefined, eventHandler = undefined, protectionKeyController = undefined;
            function setup() {
                logger = debug.getLogger(instance);
                videoElement = null;
                keySystem = null;
                mediaKeys = null;
                keySystemAccess = null;
                sessions = [];
                protectionKeyController = (0, _controllersProtectionKeyController2["default"])(context).getInstance();
                eventHandler = createEventHandler();
            }
            function reset() {
                try {
                    for (var i = 0; i < sessions.length; i++) {
                        closeKeySession(sessions[i]);
                    }
                    if (videoElement) {
                        videoElement.removeEventListener(api.needkey, eventHandler);
                    }
                    eventBus.trigger(events.TEARDOWN_COMPLETE);
                } catch (error) {
                    eventBus.trigger(events.TEARDOWN_COMPLETE, {
                        error: "Error tearing down key sessions and MediaKeys! -- " + error.message
                    });
                }
            }
            function getKeySystem() {
                return keySystem;
            }
            function getAllInitData() {
                var retVal = [];
                for (var i = 0; i < sessions.length; i++) {
                    retVal.push(sessions[i].initData);
                }
                return retVal;
            }
            function requestKeySystemAccess(ksConfigurations) {
                var found = false;
                for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {
                    var systemString = ksConfigurations[ksIdx].ks.systemString;
                    var configs = ksConfigurations[ksIdx].configs;
                    var supportedAudio = null;
                    var supportedVideo = null;
                    for (var configIdx = 0; configIdx < configs.length; configIdx++) {
                        var audios = configs[configIdx].audioCapabilities;
                        var videos = configs[configIdx].videoCapabilities;
                        if (audios && audios.length !== 0) {
                            supportedAudio = [];
                            for (var audioIdx = 0; audioIdx < audios.length; audioIdx++) {
                                if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {
                                    supportedAudio.push(audios[audioIdx]);
                                }
                            }
                        }
                        if (videos && videos.length !== 0) {
                            supportedVideo = [];
                            for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {
                                if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {
                                    supportedVideo.push(videos[videoIdx]);
                                }
                            }
                        }
                        if (!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0) {
                            continue;
                        }
                        found = true;
                        var ksConfig = new _voKeySystemConfiguration2["default"](supportedAudio, supportedVideo);
                        var ks = protectionKeyController.getKeySystemBySystemString(systemString);
                        eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                            data: new _voKeySystemAccess2["default"](ks, ksConfig)
                        });
                        break;
                    }
                }
                if (!found) {
                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        error: "Key system access denied! -- No valid audio/video content configurations detected!"
                    });
                }
            }
            function selectKeySystem(ksAccess) {
                try {
                    mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);
                    keySystem = ksAccess.keySystem;
                    keySystemAccess = ksAccess;
                    if (videoElement) {
                        setMediaKeys();
                    }
                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
                } catch (error) {
                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {
                        error: "Error selecting keys system (" + keySystem.systemString + ")! Could not create MediaKeys -- TODO"
                    });
                }
            }
            function setMediaElement(mediaElement) {
                if (videoElement === mediaElement) return;
                if (videoElement) {
                    videoElement.removeEventListener(api.needkey, eventHandler);
                }
                videoElement = mediaElement;
                if (videoElement) {
                    videoElement.addEventListener(api.needkey, eventHandler);
                    if (mediaKeys) {
                        setMediaKeys();
                    }
                }
            }
            function createKeySession(initData, protData, sessionType, cdmData) {
                if (!keySystem || !mediaKeys || !keySystemAccess) {
                    throw new Error("Can not create sessions until you have selected a key system");
                }
                var capabilities = null;
                if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {
                    capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];
                }
                if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {
                    capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];
                }
                if (capabilities === null) {
                    throw new Error("Can not create sessions for unknown content types.");
                }
                var contentType = capabilities.contentType;
                var session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);
                var sessionToken = createSessionToken(session, initData);
                session.addEventListener(api.error, sessionToken);
                session.addEventListener(api.message, sessionToken);
                session.addEventListener(api.ready, sessionToken);
                session.addEventListener(api.close, sessionToken);
                sessions.push(sessionToken);
                logger.debug("DRM: Session created.  SessionID = " + sessionToken.getSessionID());
                eventBus.trigger(events.KEY_SESSION_CREATED, {
                    data: sessionToken
                });
            }
            function updateKeySession(sessionToken, message) {
                var session = sessionToken.session;
                if (!protectionKeyController.isClearKey(keySystem)) {
                    session.update(new Uint8Array(message));
                } else {
                    session.update(new Uint8Array(message.toJWK()));
                }
            }
            function closeKeySession(sessionToken) {
                var session = sessionToken.session;
                session.removeEventListener(api.error, sessionToken);
                session.removeEventListener(api.message, sessionToken);
                session.removeEventListener(api.ready, sessionToken);
                session.removeEventListener(api.close, sessionToken);
                for (var i = 0; i < sessions.length; i++) {
                    if (sessions[i] === sessionToken) {
                        sessions.splice(i, 1);
                        break;
                    }
                }
                session[api.release]();
            }
            function setServerCertificate() {}
            function loadKeySession() {}
            function removeKeySession() {}
            function createEventHandler() {
                return {
                    handleEvent: function handleEvent(event) {
                        switch (event.type) {
                          case api.needkey:
                            if (event.initData) {
                                var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                                eventBus.trigger(events.NEED_KEY, {
                                    key: new _voNeedKey2["default"](initData, "cenc")
                                });
                            }
                            break;
                        }
                    }
                };
            }
            function setMediaKeys() {
                var boundDoSetKeys = null;
                var doSetKeys = function doSetKeys() {
                    videoElement.removeEventListener("loadedmetadata", boundDoSetKeys);
                    videoElement[api.setMediaKeys](mediaKeys);
                    eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);
                };
                if (videoElement.readyState >= 1) {
                    doSetKeys();
                } else {
                    boundDoSetKeys = doSetKeys.bind(this);
                    videoElement.addEventListener("loadedmetadata", boundDoSetKeys);
                }
            }
            function createSessionToken(keySession, initData) {
                return {
                    session: keySession,
                    initData: initData,
                    getSessionID: function getSessionID() {
                        return this.session.sessionId;
                    },
                    getExpirationTime: function getExpirationTime() {
                        return NaN;
                    },
                    getSessionType: function getSessionType() {
                        return "temporary";
                    },
                    handleEvent: function handleEvent(event) {
                        switch (event.type) {
                          case api.error:
                            var errorStr = "KeyError";
                            eventBus.trigger(events.KEY_ERROR, {
                                data: new _voDashJSError2["default"](_errorsProtectionErrors2["default"].MEDIA_KEYERR_CODE, errorStr, this)
                            });
                            break;

                          case api.message:
                            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {
                                data: new _voKeyMessage2["default"](this, message, event.destinationURL)
                            });
                            break;

                          case api.ready:
                            logger.debug("DRM: Key added.");
                            eventBus.trigger(events.KEY_ADDED);
                            break;

                          case api.close:
                            logger.debug("DRM: Session closed.  SessionID = " + this.getSessionID());
                            eventBus.trigger(events.KEY_SESSION_CLOSED, {
                                data: this.getSessionID()
                            });
                            break;
                        }
                    }
                };
            }
            instance = {
                getAllInitData: getAllInitData,
                requestKeySystemAccess: requestKeySystemAccess,
                getKeySystem: getKeySystem,
                selectKeySystem: selectKeySystem,
                setMediaElement: setMediaElement,
                createKeySession: createKeySession,
                updateKeySession: updateKeySession,
                closeKeySession: closeKeySession,
                setServerCertificate: setServerCertificate,
                loadKeySession: loadKeySession,
                removeKeySession: removeKeySession,
                stop: reset,
                reset: reset
            };
            setup();
            return instance;
        }
        ProtectionModel_3Feb2014.__dashjs_factory_name = "ProtectionModel_3Feb2014";
        exports["default"] = dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014);
        module.exports = exports["default"];
    }, {
        160: 160,
        165: 165,
        174: 174,
        176: 176,
        177: 177,
        179: 179,
        221: 221
    } ],
    169: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voKeyPair = _dereq_(175);
        var _voKeyPair2 = _interopRequireDefault(_voKeyPair);
        var _voClearKeyKeySet = _dereq_(173);
        var _voClearKeyKeySet2 = _interopRequireDefault(_voClearKeyKeySet);
        function ClearKey() {
            var instance = undefined;
            function getServerURLFromMessage(url, message) {
                var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
                url += "/?";
                for (var i = 0; i < jsonMsg.kids.length; i++) {
                    url += jsonMsg.kids[i] + "&";
                }
                url = url.substring(0, url.length - 1);
                return url;
            }
            function getHTTPMethod() {
                return "GET";
            }
            function getResponseType() {
                return "json";
            }
            function getLicenseMessage(serverResponse) {
                if (!serverResponse.hasOwnProperty("keys")) {
                    return null;
                }
                var keyPairs = [];
                for (var i = 0; i < serverResponse.keys.length; i++) {
                    var keypair = serverResponse.keys[i];
                    var keyid = keypair.kid.replace(/=/g, "");
                    var key = keypair.k.replace(/=/g, "");
                    keyPairs.push(new _voKeyPair2["default"](keyid, key));
                }
                return new _voClearKeyKeySet2["default"](keyPairs);
            }
            function getErrorResponse(serverResponse) {
                return String.fromCharCode.apply(null, new Uint8Array(serverResponse));
            }
            instance = {
                getServerURLFromMessage: getServerURLFromMessage,
                getHTTPMethod: getHTTPMethod,
                getResponseType: getResponseType,
                getLicenseMessage: getLicenseMessage,
                getErrorResponse: getErrorResponse
            };
            return instance;
        }
        ClearKey.__dashjs_factory_name = "ClearKey";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(ClearKey);
        module.exports = exports["default"];
    }, {
        173: 173,
        175: 175
    } ],
    170: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsProtectionConstants = _dereq_(109);
        var _constantsProtectionConstants2 = _interopRequireDefault(_constantsProtectionConstants);
        function DRMToday(config) {
            config = config || {};
            var BASE64 = config.BASE64;
            var keySystems = {};
            keySystems[_constantsProtectionConstants2["default"].WIDEVINE_KEYSTEM_STRING] = {
                responseType: "json",
                getLicenseMessage: function getLicenseMessage(response) {
                    return BASE64.decodeArray(response.license);
                },
                getErrorResponse: function getErrorResponse(response) {
                    return response;
                }
            };
            keySystems[_constantsProtectionConstants2["default"].PLAYREADY_KEYSTEM_STRING] = {
                responseType: "arraybuffer",
                getLicenseMessage: function getLicenseMessage(response) {
                    return response;
                },
                getErrorResponse: function getErrorResponse(response) {
                    return String.fromCharCode.apply(null, new Uint8Array(response));
                }
            };
            var instance = undefined;
            function checkConfig() {
                if (!BASE64 || !BASE64.hasOwnProperty("decodeArray")) {
                    throw new Error("Missing config parameter(s)");
                }
            }
            function getServerURLFromMessage(url) {
                return url;
            }
            function getHTTPMethod() {
                return "POST";
            }
            function getResponseType(keySystemStr) {
                return keySystems[keySystemStr].responseType;
            }
            function getLicenseMessage(serverResponse, keySystemStr) {
                checkConfig();
                return keySystems[keySystemStr].getLicenseMessage(serverResponse);
            }
            function getErrorResponse(serverResponse, keySystemStr) {
                return keySystems[keySystemStr].getErrorResponse(serverResponse);
            }
            instance = {
                getServerURLFromMessage: getServerURLFromMessage,
                getHTTPMethod: getHTTPMethod,
                getResponseType: getResponseType,
                getLicenseMessage: getLicenseMessage,
                getErrorResponse: getErrorResponse
            };
            return instance;
        }
        DRMToday.__dashjs_factory_name = "DRMToday";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(DRMToday);
        module.exports = exports["default"];
    }, {
        109: 109
    } ],
    171: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function PlayReady() {
            var instance = undefined;
            var soap = "http://schemas.xmlsoap.org/soap/envelope/";
            function uintToString(arrayBuffer) {
                var encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));
                var decodedString = decodeURIComponent(escape(encodedString));
                return decodedString;
            }
            function parseServerResponse(serverResponse) {
                if (window.DOMParser) {
                    var stringResponse = uintToString(serverResponse);
                    var parser = new window.DOMParser();
                    var xmlDoc = parser.parseFromString(stringResponse, "text/xml");
                    var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, "Envelope")[0] : null;
                    var body = envelope ? envelope.getElementsByTagNameNS(soap, "Body")[0] : null;
                    var fault = body ? body.getElementsByTagNameNS(soap, "Fault")[0] : null;
                    if (fault) {
                        return null;
                    }
                }
                return serverResponse;
            }
            function parseErrorResponse(serverResponse) {
                var faultstring = "";
                var statusCode = "";
                var message = "";
                var idStart = -1;
                var idEnd = -1;
                if (window.DOMParser) {
                    var stringResponse = uintToString(serverResponse);
                    var parser = new window.DOMParser();
                    var xmlDoc = parser.parseFromString(stringResponse, "text/xml");
                    var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, "Envelope")[0] : null;
                    var body = envelope ? envelope.getElementsByTagNameNS(soap, "Body")[0] : null;
                    var fault = body ? body.getElementsByTagNameNS(soap, "Fault")[0] : null;
                    var detail = fault ? fault.getElementsByTagName("detail")[0] : null;
                    var exception = detail ? detail.getElementsByTagName("Exception")[0] : null;
                    var node = null;
                    if (fault === null) {
                        return stringResponse;
                    }
                    node = fault.getElementsByTagName("faultstring")[0].firstChild;
                    faultstring = node ? node.nodeValue : null;
                    if (exception !== null) {
                        node = exception.getElementsByTagName("StatusCode")[0];
                        statusCode = node ? node.firstChild.nodeValue : null;
                        node = exception.getElementsByTagName("Message")[0];
                        message = node ? node.firstChild.nodeValue : null;
                        idStart = message ? message.lastIndexOf("[") + 1 : -1;
                        idEnd = message ? message.indexOf("]") : -1;
                        message = message ? message.substring(idStart, idEnd) : "";
                    }
                }
                var errorString = "code: " + statusCode + ", name: " + faultstring;
                if (message) {
                    errorString += ", message: " + message;
                }
                return errorString;
            }
            function getServerURLFromMessage(url) {
                return url;
            }
            function getHTTPMethod() {
                return "POST";
            }
            function getResponseType() {
                return "arraybuffer";
            }
            function getLicenseMessage(serverResponse) {
                return parseServerResponse.call(this, serverResponse);
            }
            function getErrorResponse(serverResponse) {
                return parseErrorResponse.call(this, serverResponse);
            }
            instance = {
                getServerURLFromMessage: getServerURLFromMessage,
                getHTTPMethod: getHTTPMethod,
                getResponseType: getResponseType,
                getLicenseMessage: getLicenseMessage,
                getErrorResponse: getErrorResponse
            };
            return instance;
        }
        PlayReady.__dashjs_factory_name = "PlayReady";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(PlayReady);
        module.exports = exports["default"];
    }, {} ],
    172: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function Widevine() {
            var instance = undefined;
            function getServerURLFromMessage(url) {
                return url;
            }
            function getHTTPMethod() {
                return "POST";
            }
            function getResponseType() {
                return "arraybuffer";
            }
            function getLicenseMessage(serverResponse) {
                return serverResponse;
            }
            function getErrorResponse(serverResponse) {
                return String.fromCharCode.apply(null, new Uint8Array(serverResponse));
            }
            instance = {
                getServerURLFromMessage: getServerURLFromMessage,
                getHTTPMethod: getHTTPMethod,
                getResponseType: getResponseType,
                getLicenseMessage: getLicenseMessage,
                getErrorResponse: getErrorResponse
            };
            return instance;
        }
        Widevine.__dashjs_factory_name = "Widevine";
        exports["default"] = dashjs.FactoryMaker.getSingletonFactory(Widevine);
        module.exports = exports["default"];
    }, {} ],
    173: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var ClearKeyKeySet = function() {
            function ClearKeyKeySet(keyPairs, type) {
                _classCallCheck(this, ClearKeyKeySet);
                if (type && type !== "persistent" && type !== "temporary") throw new Error("Invalid ClearKey key set type!  Must be one of 'persistent' or 'temporary'");
                this.keyPairs = keyPairs;
                this.type = type;
            }
            _createClass(ClearKeyKeySet, [ {
                key: "toJWK",
                value: function toJWK() {
                    var i = undefined;
                    var numKeys = this.keyPairs.length;
                    var jwk = {
                        keys: []
                    };
                    for (i = 0; i < numKeys; i++) {
                        var key = {
                            kty: "oct",
                            alg: "A128KW",
                            kid: this.keyPairs[i].keyID,
                            k: this.keyPairs[i].key
                        };
                        jwk.keys.push(key);
                    }
                    if (this.type) {
                        jwk.type = this.type;
                    }
                    var jwkString = JSON.stringify(jwk);
                    var len = jwkString.length;
                    var buf = new ArrayBuffer(len);
                    var bView = new Uint8Array(buf);
                    for (i = 0; i < len; i++) bView[i] = jwkString.charCodeAt(i);
                    return buf;
                }
            } ]);
            return ClearKeyKeySet;
        }();
        exports["default"] = ClearKeyKeySet;
        module.exports = exports["default"];
    }, {} ],
    174: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var KeyMessage = function KeyMessage(sessionToken, message, defaultURL, messageType) {
            _classCallCheck(this, KeyMessage);
            this.sessionToken = sessionToken;
            this.message = message;
            this.defaultURL = defaultURL;
            this.messageType = messageType ? messageType : "license-request";
        };
        exports["default"] = KeyMessage;
        module.exports = exports["default"];
    }, {} ],
    175: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var KeyPair = function KeyPair(keyID, key) {
            _classCallCheck(this, KeyPair);
            this.keyID = keyID;
            this.key = key;
        };
        exports["default"] = KeyPair;
        module.exports = exports["default"];
    }, {} ],
    176: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var KeySystemAccess = function KeySystemAccess(keySystem, ksConfiguration) {
            _classCallCheck(this, KeySystemAccess);
            this.keySystem = keySystem;
            this.ksConfiguration = ksConfiguration;
        };
        exports["default"] = KeySystemAccess;
        module.exports = exports["default"];
    }, {} ],
    177: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var KeySystemConfiguration = function KeySystemConfiguration(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {
            _classCallCheck(this, KeySystemConfiguration);
            this.initDataTypes = [ "cenc" ];
            if (audioCapabilities && audioCapabilities.length) {
                this.audioCapabilities = audioCapabilities;
            }
            if (videoCapabilities && videoCapabilities.length) {
                this.videoCapabilities = videoCapabilities;
            }
            this.distinctiveIdentifier = distinctiveIdentifier;
            this.persistentState = persistentState;
            this.sessionTypes = sessionTypes;
        };
        exports["default"] = KeySystemConfiguration;
        module.exports = exports["default"];
    }, {} ],
    178: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var MediaCapability = function MediaCapability(contentType, robustness) {
            _classCallCheck(this, MediaCapability);
            this.contentType = contentType;
            this.robustness = robustness;
        };
        exports["default"] = MediaCapability;
        module.exports = exports["default"];
    }, {} ],
    179: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var NeedKey = function NeedKey(initData, initDataType) {
            _classCallCheck(this, NeedKey);
            this.initData = initData;
            this.initDataType = initDataType;
        };
        exports["default"] = NeedKey;
        module.exports = exports["default"];
    }, {} ],
    180: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function DroppedFramesHistory() {
            var values = [];
            var lastDroppedFrames = 0;
            var lastTotalFrames = 0;
            function push(index, playbackQuality) {
                var droppedVideoFrames = playbackQuality && playbackQuality.droppedVideoFrames ? playbackQuality.droppedVideoFrames : 0;
                var totalVideoFrames = playbackQuality && playbackQuality.totalVideoFrames ? playbackQuality.totalVideoFrames : 0;
                var intervalDroppedFrames = droppedVideoFrames - lastDroppedFrames;
                lastDroppedFrames = droppedVideoFrames;
                var intervalTotalFrames = totalVideoFrames - lastTotalFrames;
                lastTotalFrames = totalVideoFrames;
                if (!isNaN(index)) {
                    if (!values[index]) {
                        values[index] = {
                            droppedVideoFrames: intervalDroppedFrames,
                            totalVideoFrames: intervalTotalFrames
                        };
                    } else {
                        values[index].droppedVideoFrames += intervalDroppedFrames;
                        values[index].totalVideoFrames += intervalTotalFrames;
                    }
                }
            }
            function getDroppedFrameHistory() {
                return values;
            }
            function reset(playbackQuality) {
                values = [];
                lastDroppedFrames = playbackQuality.droppedVideoFrames;
                lastTotalFrames = playbackQuality.totalVideoFrames;
            }
            return {
                push: push,
                getFrameHistory: getDroppedFrameHistory,
                reset: reset
            };
        }
        DroppedFramesHistory.__dashjs_factory_name = "DroppedFramesHistory";
        var factory = _coreFactoryMaker2["default"].getClassFactory(DroppedFramesHistory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    181: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function RulesContext(config) {
            config = config || {};
            var instance = undefined;
            var abrController = config.abrController;
            var switchHistory = config.switchHistory;
            var droppedFramesHistory = config.droppedFramesHistory;
            var currentRequest = config.currentRequest;
            var bufferOccupancyABR = config.useBufferOccupancyABR;
            var scheduleController = config.streamProcessor ? config.streamProcessor.getScheduleController() : null;
            var representationInfo = config.streamProcessor ? config.streamProcessor.getRepresentationInfo() : null;
            function getMediaType() {
                var mediaInfo = getMediaInfo();
                return mediaInfo ? mediaInfo.type : null;
            }
            function getStreamInfo() {
                var mediaInfo = getMediaInfo();
                return mediaInfo ? mediaInfo.streamInfo : null;
            }
            function getMediaInfo() {
                return representationInfo ? representationInfo.mediaInfo : null;
            }
            function getRepresentationInfo() {
                return representationInfo;
            }
            function getScheduleController() {
                return scheduleController;
            }
            function getAbrController() {
                return abrController;
            }
            function getSwitchHistory() {
                return switchHistory;
            }
            function getDroppedFramesHistory() {
                return droppedFramesHistory;
            }
            function getCurrentRequest() {
                return currentRequest;
            }
            function useBufferOccupancyABR() {
                return bufferOccupancyABR;
            }
            instance = {
                getMediaType: getMediaType,
                getMediaInfo: getMediaInfo,
                getDroppedFramesHistory: getDroppedFramesHistory,
                getCurrentRequest: getCurrentRequest,
                getSwitchHistory: getSwitchHistory,
                getStreamInfo: getStreamInfo,
                getScheduleController: getScheduleController,
                getAbrController: getAbrController,
                getRepresentationInfo: getRepresentationInfo,
                useBufferOccupancyABR: useBufferOccupancyABR
            };
            return instance;
        }
        RulesContext.__dashjs_factory_name = "RulesContext";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(RulesContext);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    182: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var NO_CHANGE = -1;
        var PRIORITY = {
            DEFAULT: .5,
            STRONG: 1,
            WEAK: 0
        };
        function SwitchRequest(q, r, p) {
            var instance = undefined, quality = undefined, priority = undefined, reason = undefined;
            function getPriority(p) {
                var ret = PRIORITY.DEFAULT;
                if (p === PRIORITY.DEFAULT || p === PRIORITY.STRONG || p === PRIORITY.WEAK) {
                    ret = p;
                }
                return ret;
            }
            quality = q === undefined ? NO_CHANGE : q;
            priority = getPriority(p);
            reason = r === undefined ? null : r;
            instance = {
                quality: quality,
                reason: reason,
                priority: priority
            };
            return instance;
        }
        SwitchRequest.__dashjs_factory_name = "SwitchRequest";
        var factory = _coreFactoryMaker2["default"].getClassFactory(SwitchRequest);
        factory.NO_CHANGE = NO_CHANGE;
        factory.PRIORITY = PRIORITY;
        _coreFactoryMaker2["default"].updateClassFactory(SwitchRequest.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    183: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var SWITCH_REQUEST_HISTORY_DEPTH = 8;
        function SwitchRequestHistory() {
            var switchRequests = [];
            var srHistory = [];
            function push(switchRequest) {
                if (switchRequest.newValue === _SwitchRequest2["default"].NO_CHANGE) {
                    switchRequest.newValue = switchRequest.oldValue;
                }
                if (!switchRequests[switchRequest.oldValue]) {
                    switchRequests[switchRequest.oldValue] = {
                        noDrops: 0,
                        drops: 0,
                        dropSize: 0
                    };
                }
                var indexDiff = switchRequest.newValue - switchRequest.oldValue;
                var drop = indexDiff < 0 ? 1 : 0;
                var dropSize = drop ? -indexDiff : 0;
                var noDrop = drop ? 0 : 1;
                switchRequests[switchRequest.oldValue].drops += drop;
                switchRequests[switchRequest.oldValue].dropSize += dropSize;
                switchRequests[switchRequest.oldValue].noDrops += noDrop;
                srHistory.push({
                    idx: switchRequest.oldValue,
                    noDrop: noDrop,
                    drop: drop,
                    dropSize: dropSize
                });
                if (srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH) {
                    var srHistoryFirst = srHistory.shift();
                    switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;
                    switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;
                    switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;
                }
            }
            function getSwitchRequests() {
                return switchRequests;
            }
            function reset() {
                switchRequests = [];
                srHistory = [];
            }
            return {
                push: push,
                getSwitchRequests: getSwitchRequests,
                reset: reset
            };
        }
        SwitchRequestHistory.__dashjs_factory_name = "SwitchRequestHistory";
        var factory = _coreFactoryMaker2["default"].getClassFactory(SwitchRequestHistory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        182: 182,
        48: 48
    } ],
    184: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function ThroughputHistory(config) {
            config = config || {};
            var MAX_MEASUREMENTS_TO_KEEP = 20;
            var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;
            var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;
            var AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;
            var THROUGHPUT_DECREASE_SCALE = 1.3;
            var THROUGHPUT_INCREASE_SCALE = 1.3;
            var EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;
            var EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;
            var EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;
            var EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;
            var settings = config.settings;
            var throughputDict = undefined, latencyDict = undefined, ewmaThroughputDict = undefined, ewmaLatencyDict = undefined, ewmaHalfLife = undefined;
            function setup() {
                ewmaHalfLife = {
                    throughputHalfLife: {
                        fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS,
                        slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS
                    },
                    latencyHalfLife: {
                        fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,
                        slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT
                    }
                };
                reset();
            }
            function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {
                if (mediaType === _constantsConstants2["default"].VIDEO) {
                    return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[_constantsConstants2["default"].VIDEO];
                } else if (mediaType === _constantsConstants2["default"].AUDIO) {
                    return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[_constantsConstants2["default"].AUDIO];
                }
            }
            function push(mediaType, httpRequest, useDeadTimeLatency) {
                if (!httpRequest.trace || !httpRequest.trace.length) {
                    return;
                }
                var latencyTimeInMilliseconds = httpRequest.tresponse.getTime() - httpRequest.trequest.getTime() || 1;
                var downloadTimeInMilliseconds = httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime() || 1;
                var downloadBytes = httpRequest.trace.reduce(function(a, b) {
                    return a + b.b[0];
                }, 0);
                var throughputMeasureTime = undefined;
                if (settings.get().streaming.lowLatencyEnabled) {
                    throughputMeasureTime = httpRequest.trace.reduce(function(a, b) {
                        return a + b.d;
                    }, 0);
                } else {
                    throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;
                }
                var throughput = Math.round(8 * downloadBytes / throughputMeasureTime);
                checkSettingsForMediaType(mediaType);
                if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {
                    if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {
                        return;
                    } else {
                        throughputDict[mediaType].hasCachedEntries = true;
                    }
                } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {
                    clearSettingsForMediaType(mediaType);
                }
                throughputDict[mediaType].push(throughput);
                if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {
                    throughputDict[mediaType].shift();
                }
                latencyDict[mediaType].push(latencyTimeInMilliseconds);
                if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {
                    latencyDict[mediaType].shift();
                }
                updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, .001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);
                updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);
            }
            function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {
                var fastAlpha = Math.pow(.5, weight / halfLife.fast);
                ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;
                var slowAlpha = Math.pow(.5, weight / halfLife.slow);
                ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;
                ewmaObj.totalWeight += weight;
            }
            function getSampleSize(isThroughput, mediaType, isLive) {
                var arr = undefined, sampleSize = undefined;
                if (isThroughput) {
                    arr = throughputDict[mediaType];
                    sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;
                } else {
                    arr = latencyDict[mediaType];
                    sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;
                }
                if (!arr) {
                    sampleSize = 0;
                } else if (sampleSize >= arr.length) {
                    sampleSize = arr.length;
                } else if (isThroughput) {
                    for (var i = 1; i < sampleSize; ++i) {
                        var ratio = arr[i] / arr[i - 1];
                        if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {
                            sampleSize += 1;
                            if (sampleSize === arr.length) {
                                break;
                            }
                        }
                    }
                }
                return sampleSize;
            }
            function getAverage(isThroughput, mediaType, isDynamic) {
                return settings.get().streaming.abr.movingAverageMethod !== _constantsConstants2["default"].MOVING_AVERAGE_SLIDING_WINDOW ? getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);
            }
            function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {
                var sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);
                var dict = isThroughput ? throughputDict : latencyDict;
                var arr = dict[mediaType];
                if (sampleSize === 0 || !arr || arr.length === 0) {
                    return NaN;
                }
                arr = arr.slice(-sampleSize);
                return arr.reduce(function(total, elem) {
                    return total + elem;
                }) / arr.length;
            }
            function getAverageEwma(isThroughput, mediaType) {
                var halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;
                var ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];
                if (!ewmaObj || ewmaObj.totalWeight <= 0) {
                    return NaN;
                }
                var fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(.5, ewmaObj.totalWeight / halfLife.fast));
                var slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(.5, ewmaObj.totalWeight / halfLife.slow));
                return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);
            }
            function getAverageThroughput(mediaType, isDynamic) {
                return getAverage(true, mediaType, isDynamic);
            }
            function getSafeAverageThroughput(mediaType, isDynamic) {
                var average = getAverageThroughput(mediaType, isDynamic);
                if (!isNaN(average)) {
                    average *= settings.get().streaming.abr.bandwidthSafetyFactor;
                }
                return average;
            }
            function getAverageLatency(mediaType) {
                return getAverage(false, mediaType);
            }
            function checkSettingsForMediaType(mediaType) {
                throughputDict[mediaType] = throughputDict[mediaType] || [];
                latencyDict[mediaType] = latencyDict[mediaType] || [];
                ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {
                    fastEstimate: 0,
                    slowEstimate: 0,
                    totalWeight: 0
                };
                ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {
                    fastEstimate: 0,
                    slowEstimate: 0,
                    totalWeight: 0
                };
            }
            function clearSettingsForMediaType(mediaType) {
                delete throughputDict[mediaType];
                delete latencyDict[mediaType];
                delete ewmaThroughputDict[mediaType];
                delete ewmaLatencyDict[mediaType];
                checkSettingsForMediaType(mediaType);
            }
            function reset() {
                throughputDict = {};
                latencyDict = {};
                ewmaThroughputDict = {};
                ewmaLatencyDict = {};
            }
            var instance = {
                push: push,
                getAverageThroughput: getAverageThroughput,
                getSafeAverageThroughput: getSafeAverageThroughput,
                getAverageLatency: getAverageLatency,
                reset: reset
            };
            setup();
            return instance;
        }
        ThroughputHistory.__dashjs_factory_name = "ThroughputHistory";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(ThroughputHistory);
        module.exports = exports["default"];
    }, {
        107: 107,
        48: 48
    } ],
    185: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _ThroughputRule = _dereq_(191);
        var _ThroughputRule2 = _interopRequireDefault(_ThroughputRule);
        var _InsufficientBufferRule = _dereq_(189);
        var _InsufficientBufferRule2 = _interopRequireDefault(_InsufficientBufferRule);
        var _AbandonRequestsRule = _dereq_(186);
        var _AbandonRequestsRule2 = _interopRequireDefault(_AbandonRequestsRule);
        var _DroppedFramesRule = _dereq_(188);
        var _DroppedFramesRule2 = _interopRequireDefault(_DroppedFramesRule);
        var _SwitchHistoryRule = _dereq_(190);
        var _SwitchHistoryRule2 = _interopRequireDefault(_SwitchHistoryRule);
        var _BolaRule = _dereq_(187);
        var _BolaRule2 = _interopRequireDefault(_BolaRule);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var QUALITY_SWITCH_RULES = "qualitySwitchRules";
        var ABANDON_FRAGMENT_RULES = "abandonFragmentRules";
        function ABRRulesCollection(config) {
            config = config || {};
            var context = this.context;
            var mediaPlayerModel = config.mediaPlayerModel;
            var dashMetrics = config.dashMetrics;
            var settings = config.settings;
            var instance = undefined, qualitySwitchRules = undefined, abandonFragmentRules = undefined;
            function initialize() {
                qualitySwitchRules = [];
                abandonFragmentRules = [];
                if (settings.get().streaming.abr.useDefaultABRRules) {
                    qualitySwitchRules.push((0, _BolaRule2["default"])(context).create({
                        dashMetrics: dashMetrics,
                        mediaPlayerModel: mediaPlayerModel,
                        settings: settings
                    }));
                    qualitySwitchRules.push((0, _ThroughputRule2["default"])(context).create({
                        dashMetrics: dashMetrics
                    }));
                    qualitySwitchRules.push((0, _InsufficientBufferRule2["default"])(context).create({
                        dashMetrics: dashMetrics
                    }));
                    qualitySwitchRules.push((0, _SwitchHistoryRule2["default"])(context).create());
                    qualitySwitchRules.push((0, _DroppedFramesRule2["default"])(context).create());
                    abandonFragmentRules.push((0, _AbandonRequestsRule2["default"])(context).create({
                        dashMetrics: dashMetrics,
                        mediaPlayerModel: mediaPlayerModel,
                        settings: settings
                    }));
                }
                var customRules = mediaPlayerModel.getABRCustomRules();
                customRules.forEach(function(rule) {
                    if (rule.type === QUALITY_SWITCH_RULES) {
                        qualitySwitchRules.push(rule.rule(context).create());
                    }
                    if (rule.type === ABANDON_FRAGMENT_RULES) {
                        abandonFragmentRules.push(rule.rule(context).create());
                    }
                });
            }
            function getActiveRules(srArray) {
                return srArray.filter(function(sr) {
                    return sr.quality > _SwitchRequest2["default"].NO_CHANGE;
                });
            }
            function getMinSwitchRequest(srArray) {
                var values = {};
                var i = undefined, len = undefined, req = undefined, newQuality = undefined, quality = undefined;
                if (srArray.length === 0) {
                    return;
                }
                values[_SwitchRequest2["default"].PRIORITY.STRONG] = _SwitchRequest2["default"].NO_CHANGE;
                values[_SwitchRequest2["default"].PRIORITY.WEAK] = _SwitchRequest2["default"].NO_CHANGE;
                values[_SwitchRequest2["default"].PRIORITY.DEFAULT] = _SwitchRequest2["default"].NO_CHANGE;
                for (i = 0, len = srArray.length; i < len; i += 1) {
                    req = srArray[i];
                    if (req.quality !== _SwitchRequest2["default"].NO_CHANGE) {
                        values[req.priority] = values[req.priority] > _SwitchRequest2["default"].NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;
                    }
                }
                if (values[_SwitchRequest2["default"].PRIORITY.WEAK] !== _SwitchRequest2["default"].NO_CHANGE) {
                    newQuality = values[_SwitchRequest2["default"].PRIORITY.WEAK];
                }
                if (values[_SwitchRequest2["default"].PRIORITY.DEFAULT] !== _SwitchRequest2["default"].NO_CHANGE) {
                    newQuality = values[_SwitchRequest2["default"].PRIORITY.DEFAULT];
                }
                if (values[_SwitchRequest2["default"].PRIORITY.STRONG] !== _SwitchRequest2["default"].NO_CHANGE) {
                    newQuality = values[_SwitchRequest2["default"].PRIORITY.STRONG];
                }
                if (newQuality !== _SwitchRequest2["default"].NO_CHANGE) {
                    quality = newQuality;
                }
                return (0, _SwitchRequest2["default"])(context).create(quality);
            }
            function getMaxQuality(rulesContext) {
                var switchRequestArray = qualitySwitchRules.map(function(rule) {
                    return rule.getMaxIndex(rulesContext);
                });
                var activeRules = getActiveRules(switchRequestArray);
                var maxQuality = getMinSwitchRequest(activeRules);
                return maxQuality || (0, _SwitchRequest2["default"])(context).create();
            }
            function shouldAbandonFragment(rulesContext) {
                var abandonRequestArray = abandonFragmentRules.map(function(rule) {
                    return rule.shouldAbandon(rulesContext);
                });
                var activeRules = getActiveRules(abandonRequestArray);
                var shouldAbandon = getMinSwitchRequest(activeRules);
                return shouldAbandon || (0, _SwitchRequest2["default"])(context).create();
            }
            function reset() {
                [ qualitySwitchRules, abandonFragmentRules ].forEach(function(rules) {
                    if (rules && rules.length) {
                        rules.forEach(function(rule) {
                            return rule.reset && rule.reset();
                        });
                    }
                });
                qualitySwitchRules = [];
                abandonFragmentRules = [];
            }
            instance = {
                initialize: initialize,
                reset: reset,
                getMaxQuality: getMaxQuality,
                shouldAbandonFragment: shouldAbandonFragment
            };
            return instance;
        }
        ABRRulesCollection.__dashjs_factory_name = "ABRRulesCollection";
        var factory = _coreFactoryMaker2["default"].getClassFactory(ABRRulesCollection);
        factory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;
        factory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;
        _coreFactoryMaker2["default"].updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        182: 182,
        186: 186,
        187: 187,
        188: 188,
        189: 189,
        190: 190,
        191: 191,
        48: 48
    } ],
    186: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        function AbandonRequestsRule(config) {
            config = config || {};
            var ABANDON_MULTIPLIER = 1.8;
            var GRACE_TIME_THRESHOLD = 500;
            var MIN_LENGTH_TO_AVERAGE = 5;
            var context = this.context;
            var mediaPlayerModel = config.mediaPlayerModel;
            var dashMetrics = config.dashMetrics;
            var settings = config.settings;
            var instance = undefined, logger = undefined, fragmentDict = undefined, abandonDict = undefined, throughputArray = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                reset();
            }
            function setFragmentRequestDict(type, id) {
                fragmentDict[type] = fragmentDict[type] || {};
                fragmentDict[type][id] = fragmentDict[type][id] || {};
            }
            function storeLastRequestThroughputByType(type, throughput) {
                throughputArray[type] = throughputArray[type] || [];
                throughputArray[type].push(throughput);
            }
            function shouldAbandon(rulesContext) {
                var switchRequest = (0, _SwitchRequest2["default"])(context).create(_SwitchRequest2["default"].NO_CHANGE, {
                    name: AbandonRequestsRule.__dashjs_factory_name
                });
                if (!rulesContext || !rulesContext.hasOwnProperty("getMediaInfo") || !rulesContext.hasOwnProperty("getMediaType") || !rulesContext.hasOwnProperty("getCurrentRequest") || !rulesContext.hasOwnProperty("getRepresentationInfo") || !rulesContext.hasOwnProperty("getAbrController")) {
                    return switchRequest;
                }
                var mediaInfo = rulesContext.getMediaInfo();
                var mediaType = rulesContext.getMediaType();
                var req = rulesContext.getCurrentRequest();
                if (!isNaN(req.index)) {
                    setFragmentRequestDict(mediaType, req.index);
                    var stableBufferTime = mediaPlayerModel.getStableBufferTime();
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);
                    if (bufferLevel > stableBufferTime) {
                        return switchRequest;
                    }
                    var fragmentInfo = fragmentDict[mediaType][req.index];
                    if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {
                        return switchRequest;
                    }
                    if (fragmentInfo.firstByteTime === undefined) {
                        throughputArray[mediaType] = [];
                        fragmentInfo.firstByteTime = req.firstByteDate.getTime();
                        fragmentInfo.segmentDuration = req.duration;
                        fragmentInfo.bytesTotal = req.bytesTotal;
                        fragmentInfo.id = req.index;
                    }
                    fragmentInfo.bytesLoaded = req.bytesLoaded;
                    fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;
                    if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {
                        storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));
                    }
                    if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {
                        var totalSampledValue = throughputArray[mediaType].reduce(function(a, b) {
                            return a + b;
                        }, 0);
                        fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);
                        fragmentInfo.estimatedTimeOfDownload = +(fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps / 1e3).toFixed(2);
                        if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0) {
                            return switchRequest;
                        } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {
                            var abrController = rulesContext.getAbrController();
                            var bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;
                            var bitrateList = abrController.getBitrateList(mediaInfo);
                            var newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * settings.get().streaming.abr.bandwidthSafetyFactor);
                            var estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType)].bitrate;
                            if (bytesRemaining > estimateOtherBytesTotal) {
                                switchRequest.quality = newQuality;
                                switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;
                                switchRequest.reason.fragmentID = fragmentInfo.id;
                                abandonDict[fragmentInfo.id] = fragmentInfo;
                                logger.debug("( ", mediaType, "frag id", fragmentInfo.id, ") is asking to abandon and switch to quality to ", newQuality, " measured bandwidth was", fragmentInfo.measuredBandwidthInKbps);
                                delete fragmentDict[mediaType][fragmentInfo.id];
                            }
                        }
                    } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {
                        delete fragmentDict[mediaType][fragmentInfo.id];
                    }
                }
                return switchRequest;
            }
            function reset() {
                fragmentDict = {};
                abandonDict = {};
                throughputArray = [];
            }
            instance = {
                shouldAbandon: shouldAbandon,
                reset: reset
            };
            setup();
            return instance;
        }
        AbandonRequestsRule.__dashjs_factory_name = "AbandonRequestsRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(AbandonRequestsRule);
        module.exports = exports["default"];
    }, {
        182: 182,
        46: 46,
        48: 48
    } ],
    187: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var BOLA_STATE_ONE_BITRATE = 0;
        var BOLA_STATE_STARTUP = 1;
        var BOLA_STATE_STEADY = 2;
        var MINIMUM_BUFFER_S = 10;
        var MINIMUM_BUFFER_PER_BITRATE_LEVEL_S = 2;
        var PLACEHOLDER_BUFFER_DECAY = .99;
        function BolaRule(config) {
            config = config || {};
            var context = this.context;
            var dashMetrics = config.dashMetrics;
            var mediaPlayerModel = config.mediaPlayerModel;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, bolaStateDict = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].BUFFER_EMPTY, onBufferEmpty, instance);
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, instance);
                eventBus.on(_coreEventsEvents2["default"].PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);
                eventBus.on(_coreEventsEvents2["default"].MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);
                eventBus.on(_coreEventsEvents2["default"].METRIC_ADDED, onMetricAdded, instance);
                eventBus.on(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);
                eventBus.on(_coreEventsEvents2["default"].FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);
            }
            function utilitiesFromBitrates(bitrates) {
                return bitrates.map(function(b) {
                    return Math.log(b);
                });
            }
            function calculateBolaParameters(stableBufferTime, bitrates, utilities) {
                var highestUtilityIndex = utilities.reduce(function(highestIndex, u, uIndex) {
                    return u > utilities[highestIndex] ? uIndex : highestIndex;
                }, 0);
                if (highestUtilityIndex === 0) {
                    return null;
                }
                var bufferTime = Math.max(stableBufferTime, MINIMUM_BUFFER_S + MINIMUM_BUFFER_PER_BITRATE_LEVEL_S * bitrates.length);
                var gp = (utilities[highestUtilityIndex] - 1) / (bufferTime / MINIMUM_BUFFER_S - 1);
                var Vp = MINIMUM_BUFFER_S / gp;
                return {
                    gp: gp,
                    Vp: Vp
                };
            }
            function getInitialBolaState(rulesContext) {
                var initialState = {};
                var mediaInfo = rulesContext.getMediaInfo();
                var bitrates = mediaInfo.bitrateList.map(function(b) {
                    return b.bandwidth;
                });
                var utilities = utilitiesFromBitrates(bitrates);
                utilities = utilities.map(function(u) {
                    return u - utilities[0] + 1;
                });
                var stableBufferTime = mediaPlayerModel.getStableBufferTime();
                var params = calculateBolaParameters(stableBufferTime, bitrates, utilities);
                if (!params) {
                    initialState.state = BOLA_STATE_ONE_BITRATE;
                } else {
                    initialState.state = BOLA_STATE_STARTUP;
                    initialState.bitrates = bitrates;
                    initialState.utilities = utilities;
                    initialState.stableBufferTime = stableBufferTime;
                    initialState.Vp = params.Vp;
                    initialState.gp = params.gp;
                    initialState.lastQuality = 0;
                    clearBolaStateOnSeek(initialState);
                }
                return initialState;
            }
            function clearBolaStateOnSeek(bolaState) {
                bolaState.placeholderBuffer = 0;
                bolaState.mostAdvancedSegmentStart = NaN;
                bolaState.lastSegmentWasReplacement = false;
                bolaState.lastSegmentStart = NaN;
                bolaState.lastSegmentDurationS = NaN;
                bolaState.lastSegmentRequestTimeMs = NaN;
                bolaState.lastSegmentFinishTimeMs = NaN;
            }
            function checkBolaStateStableBufferTime(bolaState, mediaType) {
                var stableBufferTime = mediaPlayerModel.getStableBufferTime();
                if (bolaState.stableBufferTime !== stableBufferTime) {
                    var params = calculateBolaParameters(stableBufferTime, bolaState.bitrates, bolaState.utilities);
                    if (params.Vp !== bolaState.Vp || params.gp !== bolaState.gp) {
                        var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);
                        var effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer;
                        effectiveBufferLevel -= MINIMUM_BUFFER_S;
                        effectiveBufferLevel *= params.Vp / bolaState.Vp;
                        effectiveBufferLevel += MINIMUM_BUFFER_S;
                        bolaState.stableBufferTime = stableBufferTime;
                        bolaState.Vp = params.Vp;
                        bolaState.gp = params.gp;
                        bolaState.placeholderBuffer = Math.max(0, effectiveBufferLevel - bufferLevel);
                    }
                }
            }
            function getBolaState(rulesContext) {
                var mediaType = rulesContext.getMediaType();
                var bolaState = bolaStateDict[mediaType];
                if (!bolaState) {
                    bolaState = getInitialBolaState(rulesContext);
                    bolaStateDict[mediaType] = bolaState;
                } else if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                    checkBolaStateStableBufferTime(bolaState, mediaType);
                }
                return bolaState;
            }
            function getQualityFromBufferLevel(bolaState, bufferLevel) {
                var bitrateCount = bolaState.bitrates.length;
                var quality = NaN;
                var score = NaN;
                for (var i = 0; i < bitrateCount; ++i) {
                    var s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];
                    if (isNaN(score) || s >= score) {
                        score = s;
                        quality = i;
                    }
                }
                return quality;
            }
            function maxBufferLevelForQuality(bolaState, quality) {
                return bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp);
            }
            function minBufferLevelForQuality(bolaState, quality) {
                var qBitrate = bolaState.bitrates[quality];
                var qUtility = bolaState.utilities[quality];
                var min = 0;
                for (var i = quality - 1; i >= 0; --i) {
                    if (bolaState.utilities[i] < bolaState.utilities[quality]) {
                        var iBitrate = bolaState.bitrates[i];
                        var iUtility = bolaState.utilities[i];
                        var level = bolaState.Vp * (bolaState.gp + (qBitrate * iUtility - iBitrate * qUtility) / (qBitrate - iBitrate));
                        min = Math.max(min, level);
                    }
                }
                return min;
            }
            function updatePlaceholderBuffer(bolaState, mediaType) {
                var nowMs = Date.now();
                if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {
                    var delay = .001 * (nowMs - bolaState.lastSegmentFinishTimeMs);
                    bolaState.placeholderBuffer += Math.max(0, delay);
                } else if (!isNaN(bolaState.lastCallTimeMs)) {
                    var delay = .001 * (nowMs - bolaState.lastCallTimeMs);
                    bolaState.placeholderBuffer += Math.max(0, delay);
                }
                bolaState.lastCallTimeMs = nowMs;
                bolaState.lastSegmentStart = NaN;
                bolaState.lastSegmentRequestTimeMs = NaN;
                bolaState.lastSegmentFinishTimeMs = NaN;
                checkBolaStateStableBufferTime(bolaState, mediaType);
            }
            function onBufferEmpty() {
                for (var mediaType in bolaStateDict) {
                    if (bolaStateDict.hasOwnProperty(mediaType) && bolaStateDict[mediaType].state === BOLA_STATE_STEADY) {
                        bolaStateDict[mediaType].placeholderBuffer = 0;
                    }
                }
            }
            function onPlaybackSeeking() {
                for (var mediaType in bolaStateDict) {
                    if (bolaStateDict.hasOwnProperty(mediaType)) {
                        var bolaState = bolaStateDict[mediaType];
                        if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                            bolaState.state = BOLA_STATE_STARTUP;
                            clearBolaStateOnSeek(bolaState);
                        }
                    }
                }
            }
            function onPeriodSwitchStarted() {}
            function onMediaFragmentLoaded(e) {
                if (e && e.chunk && e.chunk.mediaInfo) {
                    var bolaState = bolaStateDict[e.chunk.mediaInfo.type];
                    if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                        var start = e.chunk.start;
                        if (isNaN(bolaState.mostAdvancedSegmentStart) || start > bolaState.mostAdvancedSegmentStart) {
                            bolaState.mostAdvancedSegmentStart = start;
                            bolaState.lastSegmentWasReplacement = false;
                        } else {
                            bolaState.lastSegmentWasReplacement = true;
                        }
                        bolaState.lastSegmentStart = start;
                        bolaState.lastSegmentDurationS = e.chunk.duration;
                        bolaState.lastQuality = e.chunk.quality;
                        checkNewSegment(bolaState, e.chunk.mediaInfo.type);
                    }
                }
            }
            function onMetricAdded(e) {
                if (e && e.metric === _constantsMetricsConstants2["default"].HTTP_REQUEST && e.value && e.value.type === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length) {
                    var bolaState = bolaStateDict[e.mediaType];
                    if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                        bolaState.lastSegmentRequestTimeMs = e.value.trequest.getTime();
                        bolaState.lastSegmentFinishTimeMs = e.value._tfinish.getTime();
                        checkNewSegment(bolaState, e.mediaType);
                    }
                }
            }
            function checkNewSegment(bolaState, mediaType) {
                if (!isNaN(bolaState.lastSegmentStart) && !isNaN(bolaState.lastSegmentRequestTimeMs) && !isNaN(bolaState.placeholderBuffer)) {
                    bolaState.placeholderBuffer *= PLACEHOLDER_BUFFER_DECAY;
                    if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {
                        var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);
                        var bufferAtLastSegmentRequest = bufferLevel + .001 * (bolaState.lastSegmentFinishTimeMs - bolaState.lastSegmentRequestTimeMs);
                        var maxEffectiveBufferForLastSegment = maxBufferLevelForQuality(bolaState, bolaState.lastQuality);
                        var maxPlaceholderBuffer = Math.max(0, maxEffectiveBufferForLastSegment - bufferAtLastSegmentRequest);
                        bolaState.placeholderBuffer = Math.min(maxPlaceholderBuffer, bolaState.placeholderBuffer);
                    }
                    if (bolaState.lastSegmentWasReplacement && !isNaN(bolaState.lastSegmentDurationS)) {
                        bolaState.placeholderBuffer += bolaState.lastSegmentDurationS;
                    }
                    bolaState.lastSegmentStart = NaN;
                    bolaState.lastSegmentRequestTimeMs = NaN;
                }
            }
            function onQualityChangeRequested(e) {
                if (e) {
                    var bolaState = bolaStateDict[e.mediaType];
                    if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                        bolaState.abrQuality = e.newQuality;
                    }
                }
            }
            function onFragmentLoadingAbandoned(e) {
                if (e) {
                    var bolaState = bolaStateDict[e.mediaType];
                    if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                        var bufferLevel = dashMetrics.getCurrentBufferLevel(e.mediaType, true);
                        var wantEffectiveBufferLevel = undefined;
                        if (bolaState.abrQuality > 0) {
                            wantEffectiveBufferLevel = minBufferLevelForQuality(bolaState, bolaState.abrQuality);
                        } else {
                            wantEffectiveBufferLevel = MINIMUM_BUFFER_S;
                        }
                        var maxPlaceholderBuffer = Math.max(0, wantEffectiveBufferLevel - bufferLevel);
                        bolaState.placeholderBuffer = Math.min(bolaState.placeholderBuffer, maxPlaceholderBuffer);
                    }
                }
            }
            function getMaxIndex(rulesContext) {
                var switchRequest = (0, _SwitchRequest2["default"])(context).create();
                if (!rulesContext || !rulesContext.hasOwnProperty("getMediaInfo") || !rulesContext.hasOwnProperty("getMediaType") || !rulesContext.hasOwnProperty("getScheduleController") || !rulesContext.hasOwnProperty("getStreamInfo") || !rulesContext.hasOwnProperty("getAbrController") || !rulesContext.hasOwnProperty("useBufferOccupancyABR")) {
                    return switchRequest;
                }
                var mediaInfo = rulesContext.getMediaInfo();
                var mediaType = rulesContext.getMediaType();
                var scheduleController = rulesContext.getScheduleController();
                var streamInfo = rulesContext.getStreamInfo();
                var abrController = rulesContext.getAbrController();
                var throughputHistory = abrController.getThroughputHistory();
                var streamId = streamInfo ? streamInfo.id : null;
                var isDynamic = streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic;
                var useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();
                switchRequest.reason = switchRequest.reason || {};
                if (!useBufferOccupancyABR) {
                    return switchRequest;
                }
                scheduleController.setTimeToLoadDelay(0);
                var bolaState = getBolaState(rulesContext);
                if (bolaState.state === BOLA_STATE_ONE_BITRATE) {
                    return switchRequest;
                }
                var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);
                var throughput = throughputHistory.getAverageThroughput(mediaType, isDynamic);
                var safeThroughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);
                var latency = throughputHistory.getAverageLatency(mediaType);
                var quality = undefined;
                switchRequest.reason.state = bolaState.state;
                switchRequest.reason.throughput = throughput;
                switchRequest.reason.latency = latency;
                if (isNaN(throughput)) {
                    return switchRequest;
                }
                switch (bolaState.state) {
                  case BOLA_STATE_STARTUP:
                    quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);
                    switchRequest.quality = quality;
                    switchRequest.reason.throughput = safeThroughput;
                    bolaState.placeholderBuffer = Math.max(0, minBufferLevelForQuality(bolaState, quality) - bufferLevel);
                    bolaState.lastQuality = quality;
                    if (!isNaN(bolaState.lastSegmentDurationS) && bufferLevel >= bolaState.lastSegmentDurationS) {
                        bolaState.state = BOLA_STATE_STEADY;
                    }
                    break;

                  case BOLA_STATE_STEADY:
                    updatePlaceholderBuffer(bolaState, mediaType);
                    quality = getQualityFromBufferLevel(bolaState, bufferLevel + bolaState.placeholderBuffer);
                    var qualityForThroughput = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);
                    if (quality > bolaState.lastQuality && quality > qualityForThroughput) {
                        quality = Math.max(qualityForThroughput, bolaState.lastQuality);
                    }
                    var delayS = Math.max(0, bufferLevel + bolaState.placeholderBuffer - maxBufferLevelForQuality(bolaState, quality));
                    if (delayS <= bolaState.placeholderBuffer) {
                        bolaState.placeholderBuffer -= delayS;
                        delayS = 0;
                    } else {
                        delayS -= bolaState.placeholderBuffer;
                        bolaState.placeholderBuffer = 0;
                        if (quality < abrController.getTopQualityIndexFor(mediaType, streamId)) {
                            scheduleController.setTimeToLoadDelay(1e3 * delayS);
                        } else {
                            delayS = 0;
                        }
                    }
                    switchRequest.quality = quality;
                    switchRequest.reason.throughput = throughput;
                    switchRequest.reason.latency = latency;
                    switchRequest.reason.bufferLevel = bufferLevel;
                    switchRequest.reason.placeholderBuffer = bolaState.placeholderBuffer;
                    switchRequest.reason.delay = delayS;
                    bolaState.lastQuality = quality;
                    break;

                  default:
                    logger.debug("BOLA ABR rule invoked in bad state.");
                    switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);
                    switchRequest.reason.state = bolaState.state;
                    switchRequest.reason.throughput = safeThroughput;
                    switchRequest.reason.latency = latency;
                    bolaState.state = BOLA_STATE_STARTUP;
                    clearBolaStateOnSeek(bolaState);
                }
                return switchRequest;
            }
            function resetInitialSettings() {
                bolaStateDict = {};
            }
            function reset() {
                resetInitialSettings();
                eventBus.off(_coreEventsEvents2["default"].BUFFER_EMPTY, onBufferEmpty, instance);
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, instance);
                eventBus.off(_coreEventsEvents2["default"].PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);
                eventBus.off(_coreEventsEvents2["default"].MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);
                eventBus.off(_coreEventsEvents2["default"].METRIC_ADDED, onMetricAdded, instance);
                eventBus.off(_coreEventsEvents2["default"].QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);
                eventBus.off(_coreEventsEvents2["default"].FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);
            }
            instance = {
                getMaxIndex: getMaxIndex,
                reset: reset
            };
            setup();
            return instance;
        }
        BolaRule.__dashjs_factory_name = "BolaRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(BolaRule);
        module.exports = exports["default"];
    }, {
        108: 108,
        182: 182,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    188: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        function DroppedFramesRule() {
            var context = this.context;
            var instance = undefined, logger = undefined;
            var DROPPED_PERCENTAGE_FORBID = .15;
            var GOOD_SAMPLE_SIZE = 375;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function getMaxIndex(rulesContext) {
                var switchRequest = (0, _SwitchRequest2["default"])(context).create();
                if (!rulesContext || !rulesContext.hasOwnProperty("getDroppedFramesHistory")) {
                    return switchRequest;
                }
                var droppedFramesHistory = rulesContext.getDroppedFramesHistory();
                if (droppedFramesHistory) {
                    var dfh = droppedFramesHistory.getFrameHistory();
                    var droppedFrames = 0;
                    var totalFrames = 0;
                    var maxIndex = _SwitchRequest2["default"].NO_CHANGE;
                    for (var i = 1; i < dfh.length; i++) {
                        if (dfh[i]) {
                            droppedFrames = dfh[i].droppedVideoFrames;
                            totalFrames = dfh[i].totalVideoFrames;
                            if (totalFrames > GOOD_SAMPLE_SIZE && droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID) {
                                maxIndex = i - 1;
                                logger.debug("index: " + maxIndex + " Dropped Frames: " + droppedFrames + " Total Frames: " + totalFrames);
                                break;
                            }
                        }
                    }
                    return (0, _SwitchRequest2["default"])(context).create(maxIndex, {
                        droppedFrames: droppedFrames
                    });
                }
                return switchRequest;
            }
            instance = {
                getMaxIndex: getMaxIndex
            };
            setup();
            return instance;
        }
        DroppedFramesRule.__dashjs_factory_name = "DroppedFramesRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(DroppedFramesRule);
        module.exports = exports["default"];
    }, {
        182: 182,
        46: 46,
        48: 48
    } ],
    189: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _controllersBufferController = _dereq_(113);
        var _controllersBufferController2 = _interopRequireDefault(_controllersBufferController);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        function InsufficientBufferRule(config) {
            config = config || {};
            var INSUFFICIENT_BUFFER_SAFETY_FACTOR = .5;
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var dashMetrics = config.dashMetrics;
            var instance = undefined, logger = undefined, bufferStateDict = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
                eventBus.on(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, instance);
            }
            function checkConfig() {
                if (!dashMetrics || !dashMetrics.hasOwnProperty("getCurrentBufferLevel") || !dashMetrics.hasOwnProperty("getLatestBufferInfoVO")) {
                    throw new Error(_constantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function getMaxIndex(rulesContext) {
                var switchRequest = (0, _SwitchRequest2["default"])(context).create();
                if (!rulesContext || !rulesContext.hasOwnProperty("getMediaType")) {
                    return switchRequest;
                }
                checkConfig();
                var mediaType = rulesContext.getMediaType();
                var lastBufferStateVO = dashMetrics.getLatestBufferInfoVO(mediaType, true, _constantsMetricsConstants2["default"].BUFFER_STATE);
                var representationInfo = rulesContext.getRepresentationInfo();
                var fragmentDuration = representationInfo.fragmentDuration;
                if (!lastBufferStateVO || !wasFirstBufferLoadedEventTriggered(mediaType, lastBufferStateVO) || !fragmentDuration) {
                    return switchRequest;
                }
                if (lastBufferStateVO.state === _controllersBufferController2["default"].BUFFER_EMPTY) {
                    logger.debug("Switch to index 0; buffer is empty.");
                    switchRequest.quality = 0;
                    switchRequest.reason = "InsufficientBufferRule: Buffer is empty";
                } else {
                    var mediaInfo = rulesContext.getMediaInfo();
                    var abrController = rulesContext.getAbrController();
                    var throughputHistory = abrController.getThroughputHistory();
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);
                    var throughput = throughputHistory.getAverageThroughput(mediaType);
                    var latency = throughputHistory.getAverageLatency(mediaType);
                    var bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;
                    switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);
                    switchRequest.reason = "InsufficientBufferRule: being conservative to avoid immediate rebuffering";
                }
                return switchRequest;
            }
            function wasFirstBufferLoadedEventTriggered(mediaType, currentBufferState) {
                bufferStateDict[mediaType] = bufferStateDict[mediaType] || {};
                var wasTriggered = false;
                if (bufferStateDict[mediaType].firstBufferLoadedEvent) {
                    wasTriggered = true;
                } else if (currentBufferState && currentBufferState.state === _controllersBufferController2["default"].BUFFER_LOADED) {
                    bufferStateDict[mediaType].firstBufferLoadedEvent = true;
                    wasTriggered = true;
                }
                return wasTriggered;
            }
            function resetInitialSettings() {
                bufferStateDict = {};
            }
            function onPlaybackSeeking() {
                resetInitialSettings();
            }
            function reset() {
                resetInitialSettings();
                eventBus.off(_coreEventsEvents2["default"].PLAYBACK_SEEKING, onPlaybackSeeking, instance);
            }
            instance = {
                getMaxIndex: getMaxIndex,
                reset: reset
            };
            setup();
            return instance;
        }
        InsufficientBufferRule.__dashjs_factory_name = "InsufficientBufferRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(InsufficientBufferRule);
        module.exports = exports["default"];
    }, {
        107: 107,
        108: 108,
        113: 113,
        182: 182,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    190: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        function SwitchHistoryRule() {
            var context = this.context;
            var instance = undefined, logger = undefined;
            var MAX_SWITCH = .075;
            var SAMPLE_SIZE = 6;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function getMaxIndex(rulesContext) {
                var switchRequestHistory = rulesContext ? rulesContext.getSwitchHistory() : null;
                var switchRequests = switchRequestHistory ? switchRequestHistory.getSwitchRequests() : [];
                var drops = 0;
                var noDrops = 0;
                var dropSize = 0;
                var switchRequest = (0, _SwitchRequest2["default"])(context).create();
                for (var i = 0; i < switchRequests.length; i++) {
                    if (switchRequests[i] !== undefined) {
                        drops += switchRequests[i].drops;
                        noDrops += switchRequests[i].noDrops;
                        dropSize += switchRequests[i].dropSize;
                        if (drops + noDrops >= SAMPLE_SIZE && drops / noDrops > MAX_SWITCH) {
                            switchRequest.quality = i > 0 && switchRequests[i].drops > 0 ? i - 1 : i;
                            switchRequest.reason = {
                                index: switchRequest.quality,
                                drops: drops,
                                noDrops: noDrops,
                                dropSize: dropSize
                            };
                            logger.debug("Switch history rule index: " + switchRequest.quality + " samples: " + (drops + noDrops) + " drops: " + drops);
                            break;
                        }
                    }
                }
                return switchRequest;
            }
            instance = {
                getMaxIndex: getMaxIndex
            };
            setup();
            return instance;
        }
        SwitchHistoryRule.__dashjs_factory_name = "SwitchHistoryRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(SwitchHistoryRule);
        module.exports = exports["default"];
    }, {
        182: 182,
        46: 46,
        48: 48
    } ],
    191: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _controllersBufferController = _dereq_(113);
        var _controllersBufferController2 = _interopRequireDefault(_controllersBufferController);
        var _controllersAbrController = _dereq_(110);
        var _controllersAbrController2 = _interopRequireDefault(_controllersAbrController);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _SwitchRequest = _dereq_(182);
        var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _constantsMetricsConstants = _dereq_(108);
        var _constantsMetricsConstants2 = _interopRequireDefault(_constantsMetricsConstants);
        function ThroughputRule(config) {
            config = config || {};
            var context = this.context;
            var dashMetrics = config.dashMetrics;
            var instance = undefined, logger = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function checkConfig() {
                if (!dashMetrics || !dashMetrics.hasOwnProperty("getLatestBufferInfoVO")) {
                    throw new Error(_constantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function getMaxIndex(rulesContext) {
                var switchRequest = (0, _SwitchRequest2["default"])(context).create();
                if (!rulesContext || !rulesContext.hasOwnProperty("getMediaInfo") || !rulesContext.hasOwnProperty("getMediaType") || !rulesContext.hasOwnProperty("useBufferOccupancyABR") || !rulesContext.hasOwnProperty("getAbrController") || !rulesContext.hasOwnProperty("getScheduleController")) {
                    return switchRequest;
                }
                checkConfig();
                var mediaInfo = rulesContext.getMediaInfo();
                var mediaType = rulesContext.getMediaType();
                var bufferStateVO = dashMetrics.getLatestBufferInfoVO(mediaType, true, _constantsMetricsConstants2["default"].BUFFER_STATE);
                var scheduleController = rulesContext.getScheduleController();
                var abrController = rulesContext.getAbrController();
                var streamInfo = rulesContext.getStreamInfo();
                var isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;
                var throughputHistory = abrController.getThroughputHistory();
                var throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);
                var latency = throughputHistory.getAverageLatency(mediaType);
                var useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();
                if (isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR) {
                    return switchRequest;
                }
                if (abrController.getAbandonmentStateFor(mediaType) !== _controllersAbrController2["default"].ABANDON_LOAD) {
                    if (bufferStateVO.state === _controllersBufferController2["default"].BUFFER_LOADED || isDynamic) {
                        switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);
                        scheduleController.setTimeToLoadDelay(0);
                        logger.debug("requesting switch to index: ", switchRequest.quality, "type: ", mediaType, "Average throughput", Math.round(throughput), "kbps");
                        switchRequest.reason = {
                            throughput: throughput,
                            latency: latency
                        };
                    }
                }
                return switchRequest;
            }
            function reset() {}
            instance = {
                getMaxIndex: getMaxIndex,
                reset: reset
            };
            setup();
            return instance;
        }
        ThroughputRule.__dashjs_factory_name = "ThroughputRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(ThroughputRule);
        module.exports = exports["default"];
    }, {
        107: 107,
        108: 108,
        110: 110,
        113: 113,
        182: 182,
        46: 46,
        48: 48
    } ],
    192: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function BufferLevelRule(config) {
            config = config || {};
            var dashMetrics = config.dashMetrics;
            var mediaPlayerModel = config.mediaPlayerModel;
            var textController = config.textController;
            var abrController = config.abrController;
            var settings = config.settings;
            function setup() {}
            function execute(streamProcessor, videoTrackPresent) {
                if (!streamProcessor) {
                    return true;
                }
                var bufferLevel = dashMetrics.getCurrentBufferLevel(streamProcessor.getType(), true);
                return bufferLevel < getBufferTarget(streamProcessor, videoTrackPresent);
            }
            function getBufferTarget(streamProcessor, videoTrackPresent) {
                var bufferTarget = NaN;
                if (!streamProcessor) {
                    return bufferTarget;
                }
                var type = streamProcessor.getType();
                var representationInfo = streamProcessor.getRepresentationInfo();
                if (type === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    bufferTarget = textController.isTextEnabled() ? representationInfo.fragmentDuration : 0;
                } else if (type === _constantsConstants2["default"].AUDIO && videoTrackPresent) {
                    var videoBufferLevel = dashMetrics.getCurrentBufferLevel(_constantsConstants2["default"].VIDEO, true);
                    if (isNaN(representationInfo.fragmentDuration)) {
                        bufferTarget = videoBufferLevel;
                    } else {
                        bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);
                    }
                } else {
                    var streamInfo = representationInfo.mediaInfo.streamInfo;
                    if (abrController.isPlayingAtTopQuality(streamInfo)) {
                        var isLongFormContent = streamInfo.manifestInfo.duration >= settings.get().streaming.longFormContentDurationThreshold;
                        bufferTarget = isLongFormContent ? settings.get().streaming.bufferTimeAtTopQualityLongForm : settings.get().streaming.bufferTimeAtTopQuality;
                    } else {
                        bufferTarget = mediaPlayerModel.getStableBufferTime();
                    }
                }
                return bufferTarget;
            }
            var instance = {
                execute: execute,
                getBufferTarget: getBufferTarget
            };
            setup();
            return instance;
        }
        BufferLevelRule.__dashjs_factory_name = "BufferLevelRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(BufferLevelRule);
        module.exports = exports["default"];
    }, {
        107: 107,
        48: 48
    } ],
    193: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _streamingVoFragmentRequest = _dereq_(223);
        var _streamingVoFragmentRequest2 = _interopRequireDefault(_streamingVoFragmentRequest);
        function NextFragmentRequestRule(config) {
            config = config || {};
            var context = this.context;
            var textController = config.textController;
            var playbackController = config.playbackController;
            var instance = undefined, logger = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function execute(streamProcessor, seekTarget, requestToReplace) {
                if (!streamProcessor) {
                    return null;
                }
                var representationInfo = streamProcessor.getRepresentationInfo();
                var mediaType = streamProcessor.getType();
                var hasSeekTarget = !isNaN(seekTarget);
                var bufferController = streamProcessor.getBufferController();
                var currentTime = playbackController.getNormalizedTime();
                var time = hasSeekTarget ? seekTarget : streamProcessor.getIndexHandlerTime();
                var bufferIsDivided = false;
                var request = undefined;
                if (isNaN(time) || mediaType === _constantsConstants2["default"].FRAGMENTED_TEXT && !textController.isTextEnabled()) {
                    return null;
                }
                if (bufferController) { //err3
                    var range = bufferController.getRangeAt(time);
                    var playingRange = bufferController.getRangeAt(currentTime);
                    var hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);
                    if ((range !== null || playingRange !== null) && !hasSeekTarget) {
                        if (!range || playingRange && playingRange.start != range.start && playingRange.end != range.end) {
                            if (hasDiscontinuities && mediaType !== _constantsConstants2["default"].FRAGMENTED_TEXT) {
                                streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);
                                bufferIsDivided = true;
                            }
                            range = playingRange;
                        }
                        if (time !== range.end) {
                            logger.debug("Prior to making a request for time, NextFragmentRequestRule is aligning index handler's currentTime with bufferedRange.end for", mediaType, ".", time, "was changed to", range.end);
                            time = range.end;
                        }
                    }
                }
                if (requestToReplace) {
                    time = requestToReplace.startTime + requestToReplace.duration / 2;
                    request = streamProcessor.getFragmentRequest(representationInfo, time, {
                        timeThreshold: 0,
                        ignoreIsFinished: true
                    });
                } else {
                    request = streamProcessor.getFragmentRequest(representationInfo, time, {
                        keepIdx: !hasSeekTarget && !bufferIsDivided
                    });
                    while (request && request.action !== _streamingVoFragmentRequest2["default"].ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {
                        request = streamProcessor.getFragmentRequest(representationInfo);
                    }
                }
                return request;
            }
            instance = {
                execute: execute
            };
            setup();
            return instance;
        }
        NextFragmentRequestRule.__dashjs_factory_name = "NextFragmentRequestRule";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(NextFragmentRequestRule);
        module.exports = exports["default"];
    }, {
        107: 107,
        223: 223,
        46: 46,
        48: 48
    } ],
    194: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function EmbeddedTextHtmlRender() {
            var captionId = 0;
            var instance = undefined;
            function checkIndent(chars) {
                var line = "";
                for (var c = 0; c < chars.length; ++c) {
                    var uc = chars[c];
                    line += uc.uchar;
                }
                var l = line.length;
                var ll = line.replace(/^\s+/, "").length;
                return l - ll;
            }
            function getRegionProperties(region) {
                return "left: " + region.x * 3.125 + "%; top: " + region.y1 * 6.66 + "%; width: " + (100 - region.x * 3.125) + "%; height: " + Math.max(region.y2 - 1 - region.y1, 1) * 6.66 + "%; align-items: flex-start; overflow: visible; -webkit-writing-mode: horizontal-tb;";
            }
            function createRGB(color) {
                if (color === "red") {
                    return "rgb(255, 0, 0)";
                } else if (color === "green") {
                    return "rgb(0, 255, 0)";
                } else if (color === "blue") {
                    return "rgb(0, 0, 255)";
                } else if (color === "cyan") {
                    return "rgb(0, 255, 255)";
                } else if (color === "magenta") {
                    return "rgb(255, 0, 255)";
                } else if (color === "yellow") {
                    return "rgb(255, 255, 0)";
                } else if (color === "white") {
                    return "rgb(255, 255, 255)";
                } else if (color === "black") {
                    return "rgb(0, 0, 0)";
                }
                return color;
            }
            function getStyle(videoElement, style) {
                var fontSize = videoElement.videoHeight / 15;
                if (style) {
                    return "font-size: " + fontSize + "px; font-family: Menlo, Consolas, 'Cutive Mono', monospace; color: " + (style.foreground ? createRGB(style.foreground) : "rgb(255, 255, 255)") + "; font-style: " + (style.italics ? "italic" : "normal") + "; text-decoration: " + (style.underline ? "underline" : "none") + "; white-space: pre; background-color: " + (style.background ? createRGB(style.background) : "transparent") + ";";
                } else {
                    return "font-size: " + fontSize + "px; font-family: Menlo, Consolas, 'Cutive Mono', monospace; justify-content: flex-start; text-align: left; color: rgb(255, 255, 255); font-style: normal; white-space: pre; line-height: normal; font-weight: normal; text-decoration: none; width: 100%; display: flex;";
                }
            }
            function ltrim(s) {
                return s.replace(/^\s+/g, "");
            }
            function rtrim(s) {
                return s.replace(/\s+$/g, "");
            }
            function createHTMLCaptionsFromScreen(videoElement, startTime, endTime, captionScreen) {
                var currRegion = null;
                var existingRegion = null;
                var lastRowHasText = false;
                var lastRowIndentL = -1;
                var currP = {
                    start: startTime,
                    end: endTime,
                    spans: []
                };
                var currentStyle = "style_cea608_white_black";
                var seenRegions = {};
                var styleStates = {};
                var regions = [];
                var r = undefined, s = undefined;
                for (r = 0; r < 15; ++r) {
                    var row = captionScreen.rows[r];
                    var line = "";
                    var prevPenState = null;
                    if (false === row.isEmpty()) {
                        var rowIndent = checkIndent(row.chars);
                        if (currRegion === null) {
                            currRegion = {
                                x: rowIndent,
                                y1: r,
                                y2: r + 1,
                                p: []
                            };
                        }
                        if (rowIndent !== lastRowIndentL && lastRowHasText) {
                            currRegion.p.push(currP);
                            currP = {
                                start: startTime,
                                end: endTime,
                                spans: []
                            };
                            currRegion.y2 = r;
                            currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2;
                            if (false === seenRegions.hasOwnProperty(currRegion.name)) {
                                regions.push(currRegion);
                                seenRegions[currRegion.name] = currRegion;
                            } else {
                                existingRegion = seenRegions[currRegion.name];
                                existingRegion.p.contat(currRegion.p);
                            }
                            currRegion = {
                                x: rowIndent,
                                y1: r,
                                y2: r + 1,
                                p: []
                            };
                        }
                        for (var c = 0; c < row.chars.length; ++c) {
                            var uc = row.chars[c];
                            var currPenState = uc.penState;
                            if (prevPenState === null || !currPenState.equals(prevPenState)) {
                                if (line.trim().length > 0) {
                                    currP.spans.push({
                                        name: currentStyle,
                                        line: line,
                                        row: r
                                    });
                                    line = "";
                                }
                                var currPenStateString = "style_cea608_" + currPenState.foreground + "_" + currPenState.background;
                                if (currPenState.underline) {
                                    currPenStateString += "_underline";
                                }
                                if (currPenState.italics) {
                                    currPenStateString += "_italics";
                                }
                                if (!styleStates.hasOwnProperty(currPenStateString)) {
                                    styleStates[currPenStateString] = JSON.parse(JSON.stringify(currPenState));
                                }
                                prevPenState = currPenState;
                                currentStyle = currPenStateString;
                            }
                            line += uc.uchar;
                        }
                        if (line.trim().length > 0) {
                            currP.spans.push({
                                name: currentStyle,
                                line: line,
                                row: r
                            });
                        }
                        lastRowHasText = true;
                        lastRowIndentL = rowIndent;
                    } else {
                        lastRowHasText = false;
                        lastRowIndentL = -1;
                        if (currRegion) {
                            currRegion.p.push(currP);
                            currP = {
                                start: startTime,
                                end: endTime,
                                spans: []
                            };
                            currRegion.y2 = r;
                            currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2;
                            if (false === seenRegions.hasOwnProperty(currRegion.name)) {
                                regions.push(currRegion);
                                seenRegions[currRegion.name] = currRegion;
                            } else {
                                existingRegion = seenRegions[currRegion.name];
                                existingRegion.p.contat(currRegion.p);
                            }
                            currRegion = null;
                        }
                    }
                }
                if (currRegion) {
                    currRegion.p.push(currP);
                    currRegion.y2 = r + 1;
                    currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2;
                    if (false === seenRegions.hasOwnProperty(currRegion.name)) {
                        regions.push(currRegion);
                        seenRegions[currRegion.name] = currRegion;
                    } else {
                        existingRegion = seenRegions[currRegion.name];
                        existingRegion.p.contat(currRegion.p);
                    }
                    currRegion = null;
                }
                var captionsArray = [];
                for (r = 0; r < regions.length; ++r) {
                    var region = regions[r];
                    var cueID = "sub_cea608_" + captionId++;
                    var finalDiv = document.createElement("div");
                    finalDiv.id = cueID;
                    var cueRegionProperties = getRegionProperties(region);
                    finalDiv.style.cssText = "position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;" + cueRegionProperties;
                    var bodyDiv = document.createElement("div");
                    bodyDiv.className = "paragraph bodyStyle";
                    bodyDiv.style.cssText = getStyle(videoElement);
                    var cueUniWrapper = document.createElement("div");
                    cueUniWrapper.className = "cueUniWrapper";
                    cueUniWrapper.style.cssText = "unicode-bidi: normal; direction: ltr;";
                    for (var p = 0; p < region.p.length; ++p) {
                        var ptag = region.p[p];
                        var lastSpanRow = 0;
                        for (s = 0; s < ptag.spans.length; ++s) {
                            var span = ptag.spans[s];
                            if (span.line.length > 0) {
                                if (s !== 0 && lastSpanRow != span.row) {
                                    var brElement = document.createElement("br");
                                    brElement.className = "lineBreak";
                                    cueUniWrapper.appendChild(brElement);
                                }
                                var sameRow = false;
                                if (lastSpanRow === span.row) {
                                    sameRow = true;
                                }
                                lastSpanRow = span.row;
                                var spanStyle = styleStates[span.name];
                                var spanElement = document.createElement("span");
                                spanElement.className = "spanPadding " + span.name + " customSpanColor";
                                spanElement.style.cssText = getStyle(videoElement, spanStyle);
                                if (s !== 0 && sameRow) {
                                    if (s === ptag.spans.length - 1) {
                                        spanElement.textContent = rtrim(span.line);
                                    } else {
                                        spanElement.textContent = span.line;
                                    }
                                } else {
                                    if (ptag.spans.length > 1 && s < ptag.spans.length - 1) {
                                        if (span.row === ptag.spans[s + 1].row) {
                                            spanElement.textContent = ltrim(span.line);
                                        } else {
                                            spanElement.textContent = span.line.trim();
                                        }
                                    } else {
                                        spanElement.textContent = span.line.trim();
                                    }
                                }
                                cueUniWrapper.appendChild(spanElement);
                            }
                        }
                    }
                    bodyDiv.appendChild(cueUniWrapper);
                    finalDiv.appendChild(bodyDiv);
                    var fontSize = {
                        bodyStyle: [ "%", 90 ]
                    };
                    for (var _s in styleStates) {
                        if (styleStates.hasOwnProperty(_s)) {
                            fontSize[_s] = [ "%", 90 ];
                        }
                    }
                    captionsArray.push({
                        type: "html",
                        start: startTime,
                        end: endTime,
                        cueHTMLElement: finalDiv,
                        cueID: cueID,
                        cellResolution: [ 32, 15 ],
                        isFromCEA608: true,
                        fontSize: fontSize,
                        lineHeight: {},
                        linePadding: {}
                    });
                }
                return captionsArray;
            }
            instance = {
                createHTMLCaptionsFromScreen: createHTMLCaptionsFromScreen
            };
            return instance;
        }
        EmbeddedTextHtmlRender.__dashjs_factory_name = "EmbeddedTextHtmlRender";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(EmbeddedTextHtmlRender);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    195: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _utilsInitCache = _dereq_(209);
        var _utilsInitCache2 = _interopRequireDefault(_utilsInitCache);
        var _SourceBufferSink = _dereq_(103);
        var _SourceBufferSink2 = _interopRequireDefault(_SourceBufferSink);
        var _streamingTextTextController = _dereq_(197);
        var _streamingTextTextController2 = _interopRequireDefault(_streamingTextTextController);
        var _streamingVoDashJSError = _dereq_(221);
        var _streamingVoDashJSError2 = _interopRequireDefault(_streamingVoDashJSError);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var BUFFER_CONTROLLER_TYPE = "NotFragmentedTextBufferController";
        function NotFragmentedTextBufferController(config) {
            config = config || {};
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var textController = (0, _streamingTextTextController2["default"])(context).getInstance();
            var errHandler = config.errHandler;
            var type = config.type;
            var mimeType = config.mimeType;
            var streamProcessor = config.streamProcessor;
            var instance = undefined, isBufferingCompleted = undefined, initialized = undefined, mediaSource = undefined, buffer = undefined, initCache = undefined;
            function setup() {
                initialized = false;
                mediaSource = null;
                isBufferingCompleted = false;
                eventBus.on(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
                eventBus.on(_coreEventsEvents2["default"].INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);
            }
            function getBufferControllerType() {
                return BUFFER_CONTROLLER_TYPE;
            }
            function initialize(source) {
                setMediaSource(source);
                initCache = (0, _utilsInitCache2["default"])(context).getInstance();
            }
            function createBuffer(mediaInfo) {
                try {
                    buffer = (0, _SourceBufferSink2["default"])(context).create(mediaSource, mediaInfo);
                    if (!initialized) {
                        var textBuffer = buffer.getBuffer();
                        if (textBuffer.hasOwnProperty(_constantsConstants2["default"].INITIALIZE)) {
                            textBuffer.initialize(mimeType, streamProcessor);
                        }
                        initialized = true;
                    }
                    return buffer;
                } catch (e) {
                    if (mediaInfo.isText || mediaInfo.codec.indexOf('codecs="stpp') !== -1 || mediaInfo.codec.indexOf('codecs="wvtt') !== -1) {
                        try {
                            buffer = textController.getTextSourceBuffer();
                        } catch (e) {
                            errHandler.mediaSourceError("Error creating " + type + " source buffer.");
                            errHandler.error(new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].MEDIASOURCE_TYPE_UNSUPPORTED_CODE, _coreErrorsErrors2["default"].MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + " : " + e.message));
                        }
                    } else {
                        errHandler.mediaSourceError("Error creating " + type + " source buffer.");
                        errHandler.error(new _streamingVoDashJSError2["default"](_coreErrorsErrors2["default"].MEDIASOURCE_TYPE_UNSUPPORTED_CODE, _coreErrorsErrors2["default"].MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));
                    }
                }
            }
            function getType() {
                return type;
            }
            function getBuffer() {
                return buffer;
            }
            function setMediaSource(value) {
                mediaSource = value;
            }
            function getMediaSource() {
                return mediaSource;
            }
            function getStreamProcessor() {
                return streamProcessor;
            }
            function getIsPruningInProgress() {
                return false;
            }
            function dischargePreBuffer() {}
            function setSeekStartTime() {}
            function getBufferLevel() {
                return 0;
            }
            function getIsBufferingCompleted() {
                return isBufferingCompleted;
            }
            function reset(errored) {
                eventBus.off(_coreEventsEvents2["default"].DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
                eventBus.off(_coreEventsEvents2["default"].INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);
                if (!errored && buffer) {
                    buffer.abort();
                    buffer.reset();
                    buffer = null;
                }
            }
            function onDataUpdateCompleted(e) {
                if (e.sender.getStreamProcessor() !== streamProcessor || e.error) {
                    return;
                }
                var chunk = initCache.extract(streamProcessor.getStreamInfo().id, e.sender.getCurrentRepresentation().id);
                if (!chunk) {
                    eventBus.trigger(_coreEventsEvents2["default"].TIMED_TEXT_REQUESTED, {
                        index: 0,
                        sender: e.sender
                    });
                }
            }
            function onInitFragmentLoaded(e) {
                if (e.fragmentModel !== streamProcessor.getFragmentModel() || !e.chunk.bytes) {
                    return;
                }
                initCache.save(e.chunk);
                buffer.append(e.chunk);
                eventBus.trigger(_coreEventsEvents2["default"].STREAM_COMPLETED, {
                    request: e.request,
                    fragmentModel: e.fragmentModel
                });
            }
            function switchInitData(streamId, representationId) {
                var chunk = initCache.extract(streamId, representationId);
                if (!chunk) {
                    eventBus.trigger(_coreEventsEvents2["default"].TIMED_TEXT_REQUESTED, {
                        index: 0,
                        sender: instance
                    });
                }
            }
            function getRangeAt() {
                return null;
            }
            function updateTimestampOffset(MSETimeOffset) {
                if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {
                    buffer.timestampOffset = MSETimeOffset;
                }
            }
            instance = {
                getBufferControllerType: getBufferControllerType,
                initialize: initialize,
                createBuffer: createBuffer,
                getType: getType,
                getStreamProcessor: getStreamProcessor,
                setSeekStartTime: setSeekStartTime,
                getBuffer: getBuffer,
                getBufferLevel: getBufferLevel,
                setMediaSource: setMediaSource,
                getMediaSource: getMediaSource,
                getIsBufferingCompleted: getIsBufferingCompleted,
                getIsPruningInProgress: getIsPruningInProgress,
                dischargePreBuffer: dischargePreBuffer,
                switchInitData: switchInitData,
                getRangeAt: getRangeAt,
                reset: reset,
                updateTimestampOffset: updateTimestampOffset
            };
            setup();
            return instance;
        }
        NotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(NotFragmentedTextBufferController);
        module.exports = exports["default"];
    }, {
        103: 103,
        107: 107,
        197: 197,
        209: 209,
        221: 221,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    196: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _controllersBufferController = _dereq_(113);
        var _controllersBufferController2 = _interopRequireDefault(_controllersBufferController);
        var _NotFragmentedTextBufferController = _dereq_(195);
        var _NotFragmentedTextBufferController2 = _interopRequireDefault(_NotFragmentedTextBufferController);
        function TextBufferController(config) {
            config = config || {};
            var context = this.context;
            var _BufferControllerImpl = undefined, instance = undefined;
            function setup() {
                if (config.type === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    _BufferControllerImpl = (0, _controllersBufferController2["default"])(context).create({
                        type: config.type,
                        dashMetrics: config.dashMetrics,
                        mediaPlayerModel: config.mediaPlayerModel,
                        manifestModel: config.manifestModel,
                        errHandler: config.errHandler,
                        streamController: config.streamController,
                        mediaController: config.mediaController,
                        adapter: config.adapter,
                        textController: config.textController,
                        abrController: config.abrController,
                        playbackController: config.playbackController,
                        streamProcessor: config.streamProcessor,
                        settings: config.settings
                    });
                } else {
                    _BufferControllerImpl = (0, _NotFragmentedTextBufferController2["default"])(context).create({
                        type: config.type,
                        mimeType: config.mimeType,
                        errHandler: config.errHandler,
                        streamProcessor: config.streamProcessor
                    });
                }
            }
            function getBufferControllerType() {
                return _BufferControllerImpl.getBufferControllerType();
            }
            function initialize(source, StreamProcessor) {
                return _BufferControllerImpl.initialize(source, StreamProcessor);
            }
            function createBuffer(mediaInfo) {
                return _BufferControllerImpl.createBuffer(mediaInfo);
            }
            function getType() {
                return _BufferControllerImpl.getType();
            }
            function getBuffer() {
                return _BufferControllerImpl.getBuffer();
            }
            function setBuffer(value) {
                _BufferControllerImpl.setBuffer(value);
            }
            function getMediaSource() {
                return _BufferControllerImpl.getMediaSource();
            }
            function setMediaSource(value) {
                _BufferControllerImpl.setMediaSource(value);
            }
            function getStreamProcessor() {
                _BufferControllerImpl.getStreamProcessor();
            }
            function setSeekStartTime(value) {
                _BufferControllerImpl.setSeekStartTime(value);
            }
            function getBufferLevel() {
                return _BufferControllerImpl.getBufferLevel();
            }
            function reset(errored) {
                _BufferControllerImpl.reset(errored);
            }
            function getIsBufferingCompleted() {
                return _BufferControllerImpl.getIsBufferingCompleted();
            }
            function switchInitData(streamId, representationId) {
                _BufferControllerImpl.switchInitData(streamId, representationId);
            }
            function getIsPruningInProgress() {
                return _BufferControllerImpl.getIsPruningInProgress();
            }
            function dischargePreBuffer() {
                return _BufferControllerImpl.dischargePreBuffer();
            }
            function getRangeAt(time) {
                return _BufferControllerImpl.getRangeAt(time);
            }
            function updateTimestampOffset(MSETimeOffset) {
                var buffer = getBuffer();
                if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {
                    buffer.timestampOffset = MSETimeOffset;
                }
            }
            instance = {
                getBufferControllerType: getBufferControllerType,
                initialize: initialize,
                createBuffer: createBuffer,
                getType: getType,
                getStreamProcessor: getStreamProcessor,
                setSeekStartTime: setSeekStartTime,
                getBuffer: getBuffer,
                setBuffer: setBuffer,
                getBufferLevel: getBufferLevel,
                setMediaSource: setMediaSource,
                getMediaSource: getMediaSource,
                getIsBufferingCompleted: getIsBufferingCompleted,
                getIsPruningInProgress: getIsPruningInProgress,
                dischargePreBuffer: dischargePreBuffer,
                switchInitData: switchInitData,
                getRangeAt: getRangeAt,
                reset: reset,
                updateTimestampOffset: updateTimestampOffset
            };
            setup();
            return instance;
        }
        TextBufferController.__dashjs_factory_name = "TextBufferController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(TextBufferController);
        module.exports = exports["default"];
    }, {
        107: 107,
        113: 113,
        195: 195,
        48: 48
    } ],
    197: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _TextSourceBuffer = _dereq_(198);
        var _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer);
        var _TextTracks = _dereq_(199);
        var _TextTracks2 = _interopRequireDefault(_TextTracks);
        var _utilsVTTParser = _dereq_(217);
        var _utilsVTTParser2 = _interopRequireDefault(_utilsVTTParser);
        var _utilsTTMLParser = _dereq_(215);
        var _utilsTTMLParser2 = _interopRequireDefault(_utilsTTMLParser);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _utilsSupervisorTools = _dereq_(214);
        function TextController() {
            var context = this.context;
            var instance = undefined, textSourceBuffer = undefined, errHandler = undefined, adapter = undefined, manifestModel = undefined, mediaController = undefined, videoModel = undefined, streamController = undefined, textTracks = undefined, vttParser = undefined, ttmlParser = undefined, eventBus = undefined, defaultLanguage = undefined, lastEnabledIndex = undefined, textDefaultEnabled = undefined, allTracksAreDisabled = undefined, forceTextStreaming = undefined;
            function setup() {
                defaultLanguage = "";
                lastEnabledIndex = -1;
                textDefaultEnabled = true;
                forceTextStreaming = false;
                textTracks = (0, _TextTracks2["default"])(context).getInstance();
                vttParser = (0, _utilsVTTParser2["default"])(context).getInstance();
                ttmlParser = (0, _utilsTTMLParser2["default"])(context).getInstance();
                textSourceBuffer = (0, _TextSourceBuffer2["default"])(context).getInstance();
                eventBus = (0, _coreEventBus2["default"])(context).getInstance();
                textTracks.initialize();
                eventBus.on(_coreEventsEvents2["default"].TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);
                resetInitialSettings();
            }
            function setConfig(config) {
                if (!config) {
                    return;
                }
                if (config.errHandler) {
                    errHandler = config.errHandler;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
                if (config.manifestModel) {
                    manifestModel = config.manifestModel;
                }
                if (config.mediaController) {
                    mediaController = config.mediaController;
                }
                if (config.videoModel) {
                    videoModel = config.videoModel;
                }
                if (config.streamController) {
                    streamController = config.streamController;
                }
                if (config.textTracks) {
                    textTracks = config.textTracks;
                }
                if (config.vttParser) {
                    vttParser = config.vttParser;
                }
                if (config.ttmlParser) {
                    ttmlParser = config.ttmlParser;
                }
                textSourceBuffer.setConfig({
                    errHandler: errHandler,
                    adapter: adapter,
                    manifestModel: manifestModel,
                    mediaController: mediaController,
                    videoModel: videoModel,
                    streamController: streamController,
                    textTracks: textTracks,
                    vttParser: vttParser,
                    ttmlParser: ttmlParser
                });
            }
            function getTextSourceBuffer() {
                return textSourceBuffer;
            }
            function getAllTracksAreDisabled() {
                return allTracksAreDisabled;
            }
            function addEmbeddedTrack(mediaInfo) {
                textSourceBuffer.addEmbeddedTrack(mediaInfo);
            }
            function setTextDefaultLanguage(lang) {
                (0, _utilsSupervisorTools.checkParameterType)(lang, "string");
                defaultLanguage = lang;
            }
            function getTextDefaultLanguage() {
                return defaultLanguage;
            }
            function onTextTracksAdded(e) {
                var _this = this;
                var tracks = e.tracks;
                var index = e.index;
                tracks.some(function(item, idx) {
                    if (item.lang === defaultLanguage) {
                        _this.setTextTrack(idx);
                        index = idx;
                        return true;
                    }
                });
                if (!textDefaultEnabled) {
                    this.setTextTrack(-1);
                }
                lastEnabledIndex = index;
                eventBus.trigger(_coreEventsEvents2["default"].TEXT_TRACKS_ADDED, {
                    enabled: isTextEnabled(),
                    index: index,
                    tracks: tracks
                });
            }
            function setTextDefaultEnabled(enable) {
                (0, _utilsSupervisorTools.checkParameterType)(enable, "boolean");
                textDefaultEnabled = enable;
                if (!textDefaultEnabled) {
                    this.setTextTrack(-1);
                }
            }
            function getTextDefaultEnabled() {
                return textDefaultEnabled;
            }
            function enableText(enable) {
                (0, _utilsSupervisorTools.checkParameterType)(enable, "boolean");
                if (isTextEnabled() !== enable) {
                    if (enable) {
                        this.setTextTrack(lastEnabledIndex);
                    }
                    if (!enable) {
                        lastEnabledIndex = this.getCurrentTrackIdx();
                        this.setTextTrack(-1);
                    }
                }
            }
            function isTextEnabled() {
                var enabled = true;
                if (allTracksAreDisabled && !forceTextStreaming) {
                    enabled = false;
                }
                return enabled;
            }
            function enableForcedTextStreaming(enable) {
                (0, _utilsSupervisorTools.checkParameterType)(enable, "boolean");
                forceTextStreaming = enable;
            }
            function setTextTrack(idx) {
                var config = textSourceBuffer.getConfig();
                var fragmentModel = config.fragmentModel;
                var fragmentedTracks = config.fragmentedTracks;
                var videoModel = config.videoModel;
                var mediaInfosArr = undefined, streamProcessor = undefined;
                allTracksAreDisabled = idx === -1 ? true : false;
                var oldTrackIdx = textTracks.getCurrentTrackIdx();
                if (oldTrackIdx !== idx) {
                    textTracks.setModeForTrackIdx(oldTrackIdx, _constantsConstants2["default"].TEXT_HIDDEN);
                    textTracks.setCurrentTrackIdx(idx);
                    textTracks.setModeForTrackIdx(idx, _constantsConstants2["default"].TEXT_SHOWING);
                    var currentTrackInfo = textTracks.getCurrentTrackInfo();
                    if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {
                        for (var i = 0; i < fragmentedTracks.length; i++) {
                            var mediaInfo = fragmentedTracks[i];
                            if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index && (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {
                                var currentFragTrack = mediaController.getCurrentTrackFor(_constantsConstants2["default"].FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                                if (mediaInfo !== currentFragTrack) {
                                    fragmentModel.abortRequests();
                                    fragmentModel.removeExecutedRequestsBeforeTime();
                                    textSourceBuffer.remove();
                                    textTracks.deleteCuesFromTrackIdx(oldTrackIdx);
                                    mediaController.setTrack(mediaInfo);
                                    textSourceBuffer.setCurrentFragmentedTrackIdx(i);
                                } else if (oldTrackIdx === -1) {
                                    var streamProcessors = streamController.getActiveStreamProcessors();
                                    for (var _i = 0; _i < streamProcessors.length; _i++) {
                                        if (streamProcessors[_i].getType() === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                                            streamProcessor = streamProcessors[_i];
                                            break;
                                        }
                                    }
                                    streamProcessor.setIndexHandlerTime(videoModel.getTime());
                                    streamProcessor.getScheduleController().start();
                                }
                            }
                        }
                    } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {
                        var streamProcessors = streamController.getActiveStreamProcessors();
                        for (var i = 0; i < streamProcessors.length; i++) {
                            if (streamProcessors[i].getType() === _constantsConstants2["default"].TEXT) {
                                streamProcessor = streamProcessors[i];
                                mediaInfosArr = streamProcessor.getMediaInfoArr();
                                break;
                            }
                        }
                        if (streamProcessor && mediaInfosArr) {
                            for (var i = 0; i < mediaInfosArr.length; i++) {
                                if (mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang) {
                                    streamProcessor.selectMediaInfo(mediaInfosArr[i]);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            function getCurrentTrackIdx() {
                return textTracks.getCurrentTrackIdx();
            }
            function resetInitialSettings() {
                allTracksAreDisabled = false;
            }
            function reset() {
                resetInitialSettings();
                textSourceBuffer.resetEmbedded();
                textSourceBuffer.reset();
            }
            instance = {
                setConfig: setConfig,
                getTextSourceBuffer: getTextSourceBuffer,
                getAllTracksAreDisabled: getAllTracksAreDisabled,
                addEmbeddedTrack: addEmbeddedTrack,
                getTextDefaultLanguage: getTextDefaultLanguage,
                setTextDefaultLanguage: setTextDefaultLanguage,
                setTextDefaultEnabled: setTextDefaultEnabled,
                getTextDefaultEnabled: getTextDefaultEnabled,
                enableText: enableText,
                isTextEnabled: isTextEnabled,
                setTextTrack: setTextTrack,
                getCurrentTrackIdx: getCurrentTrackIdx,
                enableForcedTextStreaming: enableForcedTextStreaming,
                reset: reset
            };
            setup();
            return instance;
        }
        TextController.__dashjs_factory_name = "TextController";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(TextController);
        module.exports = exports["default"];
    }, {
        107: 107,
        198: 198,
        199: 199,
        214: 214,
        215: 215,
        217: 217,
        47: 47,
        48: 48,
        55: 55
    } ],
    198: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _voMetricsHTTPRequest = _dereq_(237);
        var _voTextTrackInfo = _dereq_(229);
        var _voTextTrackInfo2 = _interopRequireDefault(_voTextTrackInfo);
        var _utilsBoxParser = _dereq_(203);
        var _utilsBoxParser2 = _interopRequireDefault(_utilsBoxParser);
        var _utilsCustomTimeRanges = _dereq_(205);
        var _utilsCustomTimeRanges2 = _interopRequireDefault(_utilsCustomTimeRanges);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _TextTracks = _dereq_(199);
        var _TextTracks2 = _interopRequireDefault(_TextTracks);
        var _EmbeddedTextHtmlRender = _dereq_(194);
        var _EmbeddedTextHtmlRender2 = _interopRequireDefault(_EmbeddedTextHtmlRender);
        var _codemIsoboxer = _dereq_(13);
        var _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);
        var _externalsCea608Parser = _dereq_(2);
        var _externalsCea608Parser2 = _interopRequireDefault(_externalsCea608Parser);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        function TextSourceBuffer() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var embeddedInitialized = false;
            var instance = undefined, logger = undefined, boxParser = undefined, errHandler = undefined, adapter = undefined, manifestModel = undefined, mediaController = undefined, parser = undefined, vttParser = undefined, ttmlParser = undefined, mediaInfos = undefined, textTracks = undefined, fragmentedFragmentModel = undefined, initializationSegmentReceived = undefined, timescale = undefined, fragmentedTracks = undefined, videoModel = undefined, streamController = undefined, firstFragmentedSubtitleStart = undefined, currFragmentedTrackIdx = undefined, embeddedTracks = undefined, embeddedInitializationSegmentReceived = undefined, embeddedTimescale = undefined, embeddedLastSequenceNumber = undefined, embeddedSequenceNumbers = undefined, embeddedCea608FieldParsers = undefined, embeddedTextHtmlRender = undefined, mseTimeOffset = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                resetInitialSettings();
            }
            function resetFragmented() {
                fragmentedFragmentModel = null;
                timescale = NaN;
                fragmentedTracks = [];
                firstFragmentedSubtitleStart = null;
                initializationSegmentReceived = false;
            }
            function resetInitialSettings() {
                resetFragmented();
                mediaInfos = [];
                parser = null;
            }
            function initialize(mimeType, streamProcessor) {
                if (!embeddedInitialized) {
                    initEmbedded();
                }
                textTracks.setConfig({
                    videoModel: videoModel
                });
                textTracks.initialize();
                if (!boxParser) {
                    boxParser = (0, _utilsBoxParser2["default"])(context).getInstance();
                }
                addMediaInfos(mimeType, streamProcessor);
            }
            function addMediaInfos(mimeType, streamProcessor) {
                var isFragmented = !adapter.getIsTextTrack(mimeType);
                if (streamProcessor) {
                    mediaInfos = mediaInfos.concat(streamProcessor.getMediaInfoArr());
                    if (isFragmented) {
                        fragmentedFragmentModel = streamProcessor.getFragmentModel();
                        instance.buffered = (0, _utilsCustomTimeRanges2["default"])(context).create();
                        fragmentedTracks = mediaController.getTracksFor(_constantsConstants2["default"].FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                        var currFragTrack = mediaController.getCurrentTrackFor(_constantsConstants2["default"].FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                        for (var i = 0; i < fragmentedTracks.length; i++) {
                            if (fragmentedTracks[i] === currFragTrack) {
                                setCurrentFragmentedTrackIdx(i);
                                break;
                            }
                        }
                    }
                    for (var i = 0; i < mediaInfos.length; i++) {
                        createTextTrackFromMediaInfo(null, mediaInfos[i]);
                    }
                }
            }
            function abort() {
                textTracks.deleteAllTextTracks();
                boxParser = null;
                mediaInfos = [];
                fragmentedFragmentModel = null;
                initializationSegmentReceived = false;
                fragmentedTracks = [];
            }
            function reset() {
                resetInitialSettings();
                streamController = null;
                videoModel = null;
                textTracks = null;
            }
            function onVideoChunkReceived(e) {
                var chunk = e.chunk;
                if (chunk.mediaInfo.embeddedCaptions) {
                    append(chunk.bytes, chunk);
                }
            }
            function initEmbedded() {
                embeddedTracks = [];
                textTracks = (0, _TextTracks2["default"])(context).getInstance();
                textTracks.setConfig({
                    videoModel: videoModel
                });
                textTracks.initialize();
                boxParser = (0, _utilsBoxParser2["default"])(context).getInstance();
                currFragmentedTrackIdx = null;
                embeddedInitializationSegmentReceived = false;
                embeddedTimescale = 0;
                embeddedCea608FieldParsers = [];
                embeddedSequenceNumbers = [];
                embeddedLastSequenceNumber = null;
                embeddedInitialized = true;
                embeddedTextHtmlRender = (0, _EmbeddedTextHtmlRender2["default"])(context).getInstance();
                var streamProcessors = streamController.getActiveStreamProcessors();
                for (var i in streamProcessors) {
                    if (streamProcessors[i].getType() === "video") {
                        mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;
                        break;
                    }
                }
                eventBus.on(_coreEventsEvents2["default"].VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);
            }
            function resetEmbedded() {
                eventBus.off(_coreEventsEvents2["default"].VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);
                if (textTracks) {
                    textTracks.deleteAllTextTracks();
                }
                embeddedInitialized = false;
                embeddedTracks = [];
                embeddedCea608FieldParsers = [ null, null ];
                embeddedSequenceNumbers = [];
                embeddedLastSequenceNumber = null;
            }
            function addEmbeddedTrack(mediaInfo) {
                if (!embeddedInitialized) {
                    initEmbedded();
                }
                if (mediaInfo) {
                    if (mediaInfo.id === _constantsConstants2["default"].CC1 || mediaInfo.id === _constantsConstants2["default"].CC3) {
                        for (var i = 0; i < embeddedTracks.length; i++) {
                            if (embeddedTracks[i].id === mediaInfo.id) {
                                return;
                            }
                        }
                        embeddedTracks.push(mediaInfo);
                    } else {
                        logger.warn("Embedded track " + mediaInfo.id + " not supported!");
                    }
                }
            }
            function setConfig(config) {
                if (!config) {
                    return;
                }
                if (config.errHandler) {
                    errHandler = config.errHandler;
                }
                if (config.adapter) {
                    adapter = config.adapter;
                }
                if (config.manifestModel) {
                    manifestModel = config.manifestModel;
                }
                if (config.mediaController) {
                    mediaController = config.mediaController;
                }
                if (config.videoModel) {
                    videoModel = config.videoModel;
                }
                if (config.streamController) {
                    streamController = config.streamController;
                }
                if (config.textTracks) {
                    textTracks = config.textTracks;
                }
                if (config.vttParser) {
                    vttParser = config.vttParser;
                }
                if (config.ttmlParser) {
                    ttmlParser = config.ttmlParser;
                }
            }
            function getConfig() {
                var config = {
                    fragmentModel: fragmentedFragmentModel,
                    fragmentedTracks: fragmentedTracks,
                    videoModel: videoModel
                };
                return config;
            }
            function setCurrentFragmentedTrackIdx(idx) {
                currFragmentedTrackIdx = idx;
            }
            function createTextTrackFromMediaInfo(captionData, mediaInfo) {
                var textTrackInfo = new _voTextTrackInfo2["default"]();
                var trackKindMap = {
                    subtitle: "subtitles",
                    caption: "captions"
                };
                var getKind = function getKind() {
                    var kind = mediaInfo.roles.length > 0 ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;
                    kind = kind === trackKindMap.caption || kind === trackKindMap.subtitle ? kind : trackKindMap.caption;
                    return kind;
                };
                var checkTTML = function checkTTML() {
                    var ttml = false;
                    if (mediaInfo.codec && mediaInfo.codec.search(_constantsConstants2["default"].STPP) >= 0) {
                        ttml = true;
                    }
                    if (mediaInfo.mimeType && mediaInfo.mimeType.search(_constantsConstants2["default"].TTML) >= 0) {
                        ttml = true;
                    }
                    return ttml;
                };
                textTrackInfo.captionData = captionData;
                textTrackInfo.lang = mediaInfo.lang;
                textTrackInfo.labels = mediaInfo.labels;
                textTrackInfo.id = mediaInfo.id ? mediaInfo.id : mediaInfo.index;
                textTrackInfo.index = mediaInfo.index;
                textTrackInfo.isTTML = checkTTML();
                textTrackInfo.defaultTrack = getIsDefault(mediaInfo);
                textTrackInfo.isFragmented = !adapter.getIsTextTrack(mediaInfo.mimeType);
                textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;
                textTrackInfo.kind = getKind();
                textTrackInfo.roles = mediaInfo.roles;
                textTrackInfo.accessibility = mediaInfo.accessibility;
                var totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;
                textTracks.addTextTrack(textTrackInfo, totalNrTracks);
            }
            function append(bytes, chunk) {
                var result = undefined, sampleList = undefined, i = undefined, j = undefined, k = undefined, samplesInfo = undefined, ccContent = undefined;
                var mediaInfo = chunk.mediaInfo;
                var mediaType = mediaInfo.type;
                var mimeType = mediaInfo.mimeType;
                var codecType = mediaInfo.codec || mimeType;
                if (!codecType) {
                    logger.error("No text type defined");
                    return;
                }
                if (mediaType === _constantsConstants2["default"].FRAGMENTED_TEXT) {
                    if (!initializationSegmentReceived) {
                        initializationSegmentReceived = true;
                        timescale = boxParser.getMediaTimescaleFromMoov(bytes);
                    } else {
                        samplesInfo = boxParser.getSamplesInfo(bytes);
                        sampleList = samplesInfo.sampleList;
                        if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {
                            firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;
                        }
                        if (codecType.search(_constantsConstants2["default"].STPP) >= 0) {
                            parser = parser !== null ? parser : getParser(codecType);
                            for (i = 0; i < sampleList.length; i++) {
                                var sample = sampleList[i];
                                var sampleStart = sample.cts;
                                var sampleRelStart = sampleStart - firstFragmentedSubtitleStart;
                                this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);
                                var dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);
                                ccContent = _codemIsoboxer2["default"].Utils.dataViewToString(dataView, _constantsConstants2["default"].UTF8);
                                var images = [];
                                var subOffset = sample.offset + sample.subSizes[0];
                                for (j = 1; j < sample.subSizes.length; j++) {
                                    var inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);
                                    var raw = String.fromCharCode.apply(null, inData);
                                    images.push(raw);
                                    subOffset += sample.subSizes[j];
                                }
                                try {
                                    var manifest = manifestModel.getValue();
                                    var offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;
                                    result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);
                                    textTracks.addCaptions(currFragmentedTrackIdx, firstFragmentedSubtitleStart / timescale, result);
                                } catch (e) {
                                    fragmentedFragmentModel.removeExecutedRequestsBeforeTime();
                                    this.remove();
                                    logger.error("TTML parser error: " + e.message);
                                }
                            }
                        } else {
                            var captionArray = [];
                            for (i = 0; i < sampleList.length; i++) {
                                var sample = sampleList[i];
                                sample.cts -= firstFragmentedSubtitleStart;
                                this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);
                                var sampleData = bytes.slice(sample.offset, sample.offset + sample.size);
                                var sampleBoxes = _codemIsoboxer2["default"].parseBuffer(sampleData);
                                for (j = 0; j < sampleBoxes.boxes.length; j++) {
                                    var box1 = sampleBoxes.boxes[j];
                                    logger.debug("VTT box1: " + box1.type);
                                    if (box1.type === "vtte") {
                                        continue;
                                    }
                                    if (box1.type === "vttc") {
                                        logger.debug("VTT vttc boxes.length = " + box1.boxes.length);
                                        for (k = 0; k < box1.boxes.length; k++) {
                                            var box2 = box1.boxes[k];
                                            logger.debug("VTT box2: " + box2.type);
                                            if (box2.type === "payl") {
                                                var cue_text = box2.cue_text;
                                                logger.debug("VTT cue_text = " + cue_text);
                                                var start_time = sample.cts / timescale;
                                                var end_time = (sample.cts + sample.duration) / timescale;
                                                captionArray.push({
                                                    start: start_time,
                                                    end: end_time,
                                                    data: cue_text,
                                                    styles: {}
                                                });
                                                logger.debug("VTT " + start_time + "-" + end_time + " : " + cue_text);
                                            }
                                        }
                                    }
                                }
                            }
                            if (captionArray.length > 0) {
                                textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);
                            }
                        }
                    }
                } else if (mediaType === _constantsConstants2["default"].TEXT) {
                    var dataView = new DataView(bytes, 0, bytes.byteLength);
                    ccContent = _codemIsoboxer2["default"].Utils.dataViewToString(dataView, _constantsConstants2["default"].UTF8);
                    try {
                        result = getParser(codecType).parse(ccContent, 0);
                        textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);
                    } catch (e) {
                        errHandler.timedTextError(e, "parse", ccContent);
                        errHandler.error(new _voDashJSError2["default"](_coreErrorsErrors2["default"].TIMED_TEXT_ERROR_ID_PARSE_CODE, _coreErrorsErrors2["default"].TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));
                    }
                } else if (mediaType === _constantsConstants2["default"].VIDEO) {
                    if (chunk.segmentType === _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE) {
                        if (embeddedTimescale === 0) {
                            embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);
                            for (i = 0; i < embeddedTracks.length; i++) {
                                createTextTrackFromMediaInfo(null, embeddedTracks[i]);
                            }
                        }
                    } else {
                        if (embeddedTimescale === 0) {
                            logger.warn("CEA-608: No timescale for embeddedTextTrack yet");
                            return;
                        }
                        var makeCueAdderForIndex = function makeCueAdderForIndex(self, trackIndex) {
                            function newCue(startTime, endTime, captionScreen) {
                                var captionsArray = null;
                                if (videoModel.getTTMLRenderingDiv()) {
                                    captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);
                                } else {
                                    var text = captionScreen.getDisplayText();
                                    captionsArray = [ {
                                        start: startTime,
                                        end: endTime,
                                        data: text,
                                        styles: {}
                                    } ];
                                }
                                if (captionsArray) {
                                    textTracks.addCaptions(trackIndex, 0, captionsArray);
                                }
                            }
                            return newCue;
                        };
                        samplesInfo = boxParser.getSamplesInfo(bytes);
                        var sequenceNumber = samplesInfo.lastSequenceNumber;
                        if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {
                            var field = undefined, handler = undefined, trackIdx = undefined;
                            for (i = 0; i < embeddedTracks.length; i++) {
                                if (embeddedTracks[i].id === _constantsConstants2["default"].CC1) {
                                    field = 0;
                                    trackIdx = textTracks.getTrackIdxForId(_constantsConstants2["default"].CC1);
                                } else if (embeddedTracks[i].id === _constantsConstants2["default"].CC3) {
                                    field = 1;
                                    trackIdx = textTracks.getTrackIdxForId(_constantsConstants2["default"].CC3);
                                }
                                if (trackIdx === -1) {
                                    logger.warn("CEA-608: data before track is ready.");
                                    return;
                                }
                                handler = makeCueAdderForIndex(this, trackIdx);
                                embeddedCea608FieldParsers[i] = new _externalsCea608Parser2["default"].Cea608Parser(i + 1, {
                                    newCue: handler
                                }, null);
                            }
                        }
                        if (embeddedTimescale && embeddedSequenceNumbers.indexOf(sequenceNumber) == -1) {
                            if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {
                                for (i = 0; i < embeddedCea608FieldParsers.length; i++) {
                                    if (embeddedCea608FieldParsers[i]) {
                                        embeddedCea608FieldParsers[i].reset();
                                    }
                                }
                            }
                            var allCcData = extractCea608Data(bytes, samplesInfo.sampleList);
                            for (var fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {
                                var ccData = allCcData.fields[fieldNr];
                                var fieldParser = embeddedCea608FieldParsers[fieldNr];
                                if (fieldParser) {
                                    for (i = 0; i < ccData.length; i++) {
                                        fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);
                                    }
                                }
                            }
                            embeddedLastSequenceNumber = sequenceNumber;
                            embeddedSequenceNumbers.push(sequenceNumber);
                        }
                    }
                }
            }
            function extractCea608Data(data, samples) {
                if (samples.length === 0) {
                    return null;
                }
                var allCcData = {
                    splits: [],
                    fields: [ [], [] ]
                };
                var raw = new DataView(data);
                for (var i = 0; i < samples.length; i++) {
                    var sample = samples[i];
                    var cea608Ranges = _externalsCea608Parser2["default"].findCea608Nalus(raw, sample.offset, sample.size);
                    var lastSampleTime = null;
                    var idx = 0;
                    for (var j = 0; j < cea608Ranges.length; j++) {
                        var ccData = _externalsCea608Parser2["default"].extractCea608DataFromRange(raw, cea608Ranges[j]);
                        for (var k = 0; k < 2; k++) {
                            if (ccData[k].length > 0) {
                                if (sample.cts !== lastSampleTime) {
                                    idx = 0;
                                } else {
                                    idx += 1;
                                }
                                allCcData.fields[k].push([ sample.cts + mseTimeOffset * embeddedTimescale, ccData[k], idx ]);
                                lastSampleTime = sample.cts;
                            }
                        }
                    }
                }
                allCcData.fields.forEach(function sortField(field) {
                    field.sort(function(a, b) {
                        if (a[0] === b[0]) {
                            return a[2] - b[2];
                        }
                        return a[0] - b[0];
                    });
                });
                return allCcData;
            }
            function getIsDefault(mediaInfo) {
                var isDefault = false;
                if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {
                    isDefault = mediaInfo.id && mediaInfo.id === _constantsConstants2["default"].CC1;
                } else if (embeddedTracks.length === 1) {
                    if (mediaInfo.id && typeof mediaInfo.id === "string" && mediaInfo.id.substring(0, 2) === "CC") {
                        isDefault = true;
                    }
                } else if (embeddedTracks.length === 0) {
                    isDefault = mediaInfo.index === mediaInfos[0].index;
                }
                return isDefault;
            }
            function getParser(codecType) {
                var parser = undefined;
                if (codecType.search(_constantsConstants2["default"].VTT) >= 0) {
                    parser = vttParser;
                } else if (codecType.search(_constantsConstants2["default"].TTML) >= 0 || codecType.search(_constantsConstants2["default"].STPP) >= 0) {
                    parser = ttmlParser;
                }
                return parser;
            }
            function remove(start, end) {
                if (start === undefined && start === end) {
                    start = this.buffered.start(0);
                    end = this.buffered.end(this.buffered.length - 1);
                }
                this.buffered.remove(start, end);
            }
            instance = {
                initialize: initialize,
                append: append,
                abort: abort,
                addEmbeddedTrack: addEmbeddedTrack,
                resetEmbedded: resetEmbedded,
                setConfig: setConfig,
                getConfig: getConfig,
                setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,
                remove: remove,
                reset: reset
            };
            setup();
            return instance;
        }
        TextSourceBuffer.__dashjs_factory_name = "TextSourceBuffer";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(TextSourceBuffer);
        module.exports = exports["default"];
    }, {
        107: 107,
        13: 13,
        194: 194,
        199: 199,
        2: 2,
        203: 203,
        205: 205,
        221: 221,
        229: 229,
        237: 237,
        46: 46,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    199: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _imsc = _dereq_(20);
        var _utilsSupervisorTools = _dereq_(214);
        function TextTracks() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined, Cue = undefined, videoModel = undefined, textTrackQueue = undefined, trackElementArr = undefined, currentTrackIdx = undefined, actualVideoLeft = undefined, actualVideoTop = undefined, actualVideoWidth = undefined, actualVideoHeight = undefined, captionContainer = undefined, videoSizeCheckInterval = undefined, fullscreenAttribute = undefined, displayCCOnTop = undefined, previousISDState = undefined, topZIndex = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function initialize() {
                if (typeof window === "undefined" || typeof navigator === "undefined") {
                    return;
                }
                Cue = window.VTTCue || window.TextTrackCue;
                textTrackQueue = [];
                trackElementArr = [];
                currentTrackIdx = -1;
                actualVideoLeft = 0;
                actualVideoTop = 0;
                actualVideoWidth = 0;
                actualVideoHeight = 0;
                captionContainer = null;
                videoSizeCheckInterval = null;
                displayCCOnTop = false;
                topZIndex = 2147483647;
                previousISDState = null;
                if (document.fullscreenElement !== undefined) {
                    fullscreenAttribute = "fullscreenElement";
                } else if (document.webkitIsFullScreen !== undefined) {
                    fullscreenAttribute = "webkitIsFullScreen";
                } else if (document.msFullscreenElement) {
                    fullscreenAttribute = "msFullscreenElement";
                } else if (document.mozFullScreen) {
                    fullscreenAttribute = "mozFullScreen";
                }
            }
            function createTrackForUserAgent(i) {
                var kind = textTrackQueue[i].kind;
                var label = textTrackQueue[i].id !== undefined ? textTrackQueue[i].id : textTrackQueue[i].lang;
                var lang = textTrackQueue[i].lang;
                var isTTML = textTrackQueue[i].isTTML;
                var isEmbedded = textTrackQueue[i].isEmbedded;
                var track = videoModel.addTextTrack(kind, label, lang);
                track.isEmbedded = isEmbedded;
                track.isTTML = isTTML;
                return track;
            }
            function setDisplayCConTop(value) {
                (0, _utilsSupervisorTools.checkParameterType)(value, "boolean");
                displayCCOnTop = value;
                if (!captionContainer || document[fullscreenAttribute]) {
                    return;
                }
                captionContainer.style.zIndex = value ? topZIndex : null;
            }
            function addTextTrack(textTrackInfoVO, totalTextTracks) {
                if (textTrackQueue.length === totalTextTracks) {
                    logger.error("Trying to add too many tracks.");
                    return;
                }
                textTrackQueue.push(textTrackInfoVO);
                if (textTrackQueue.length === totalTextTracks) {
                    textTrackQueue.sort(function(a, b) {
                        return a.index - b.index;
                    });
                    captionContainer = videoModel.getTTMLRenderingDiv();
                    var defaultIndex = -1;
                    for (var i = 0; i < textTrackQueue.length; i++) {
                        var track = createTrackForUserAgent.call(this, i);
                        trackElementArr.push(track);
                        if (textTrackQueue[i].defaultTrack) {
                            track["default"] = true;
                            defaultIndex = i;
                        }
                        var textTrack = getTrackByIdx(i);
                        if (textTrack) {
                            textTrack.mode = _constantsConstants2["default"].TEXT_SHOWING;
                            if (captionContainer && (textTrackQueue[i].isTTML || textTrackQueue[i].isEmbedded)) {
                                textTrack.renderingType = "html";
                            } else {
                                textTrack.renderingType = "default";
                            }
                        }
                        this.addCaptions(i, 0, textTrackQueue[i].captionData);
                        eventBus.trigger(_coreEventsEvents2["default"].TEXT_TRACK_ADDED);
                    }
                    setCurrentTrackIdx.call(this, defaultIndex);
                    if (defaultIndex >= 0) {
                        for (var idx = 0; idx < textTrackQueue.length; idx++) {
                            var videoTextTrack = getTrackByIdx(idx);
                            if (videoTextTrack) {
                                videoTextTrack.mode = idx === defaultIndex ? _constantsConstants2["default"].TEXT_SHOWING : _constantsConstants2["default"].TEXT_HIDDEN;
                            }
                        }
                    }
                    eventBus.trigger(_coreEventsEvents2["default"].TEXT_TRACKS_QUEUE_INITIALIZED, {
                        index: currentTrackIdx,
                        tracks: textTrackQueue
                    });
                }
            }
            function getVideoVisibleVideoSize(viewWidth, viewHeight, videoWidth, videoHeight, aspectRatio, use80Percent) {
                var viewAspectRatio = viewWidth / viewHeight;
                var videoAspectRatio = videoWidth / videoHeight;
                var videoPictureWidth = 0;
                var videoPictureHeight = 0;
                if (viewAspectRatio > videoAspectRatio) {
                    videoPictureHeight = viewHeight;
                    videoPictureWidth = videoPictureHeight / videoHeight * videoWidth;
                } else {
                    videoPictureWidth = viewWidth;
                    videoPictureHeight = videoPictureWidth / videoWidth * videoHeight;
                }
                var videoPictureXAspect = 0;
                var videoPictureYAspect = 0;
                var videoPictureWidthAspect = 0;
                var videoPictureHeightAspect = 0;
                var videoPictureAspect = videoPictureWidth / videoPictureHeight;
                if (videoPictureAspect > aspectRatio) {
                    videoPictureHeightAspect = videoPictureHeight;
                    videoPictureWidthAspect = videoPictureHeight * aspectRatio;
                } else {
                    videoPictureWidthAspect = videoPictureWidth;
                    videoPictureHeightAspect = videoPictureWidth / aspectRatio;
                }
                videoPictureXAspect = (viewWidth - videoPictureWidthAspect) / 2;
                videoPictureYAspect = (viewHeight - videoPictureHeightAspect) / 2;
                if (use80Percent) {
                    return {
                        x: videoPictureXAspect + videoPictureWidthAspect * .1,
                        y: videoPictureYAspect + videoPictureHeightAspect * .1,
                        w: videoPictureWidthAspect * .8,
                        h: videoPictureHeightAspect * .8
                    };
                } else {
                    return {
                        x: videoPictureXAspect,
                        y: videoPictureYAspect,
                        w: videoPictureWidthAspect,
                        h: videoPictureHeightAspect
                    };
                }
            }
            function checkVideoSize(track, forceDrawing) {
                var clientWidth = videoModel.getClientWidth();
                var clientHeight = videoModel.getClientHeight();
                var videoWidth = videoModel.getVideoWidth();
                var videoHeight = videoModel.getVideoHeight();
                var videoOffsetTop = videoModel.getVideoRelativeOffsetTop();
                var videoOffsetLeft = videoModel.getVideoRelativeOffsetLeft();
                var aspectRatio = videoWidth / videoHeight;
                var use80Percent = false;
                if (track.isFromCEA608) {
                    aspectRatio = 3.5 / 3;
                    use80Percent = true;
                }
                var realVideoSize = getVideoVisibleVideoSize.call(this, clientWidth, clientHeight, videoWidth, videoHeight, aspectRatio, use80Percent);
                var newVideoWidth = realVideoSize.w;
                var newVideoHeight = realVideoSize.h;
                var newVideoLeft = realVideoSize.x;
                var newVideoTop = realVideoSize.y;
                if (newVideoWidth != actualVideoWidth || newVideoHeight != actualVideoHeight || newVideoLeft != actualVideoLeft || newVideoTop != actualVideoTop || forceDrawing) {
                    actualVideoLeft = newVideoLeft + videoOffsetLeft;
                    actualVideoTop = newVideoTop + videoOffsetTop;
                    actualVideoWidth = newVideoWidth;
                    actualVideoHeight = newVideoHeight;
                    if (captionContainer) {
                        var containerStyle = captionContainer.style;
                        if (containerStyle) {
                            containerStyle.left = actualVideoLeft + "px";
                            containerStyle.top = actualVideoTop + "px";
                            containerStyle.width = actualVideoWidth + "px";
                            containerStyle.height = actualVideoHeight + "px";
                            containerStyle.zIndex = fullscreenAttribute && document[fullscreenAttribute] || displayCCOnTop ? topZIndex : null;
                            eventBus.trigger(_coreEventsEvents2["default"].CAPTION_CONTAINER_RESIZE, {});
                        }
                    }
                    var activeCues = track.activeCues;
                    if (activeCues) {
                        var len = activeCues.length;
                        for (var i = 0; i < len; ++i) {
                            var cue = activeCues[i];
                            cue.scaleCue(cue);
                        }
                    }
                }
            }
            function scaleCue(activeCue) {
                var videoWidth = actualVideoWidth;
                var videoHeight = actualVideoHeight;
                var key = undefined, replaceValue = undefined, valueFontSize = undefined, valueLineHeight = undefined, elements = undefined;
                if (activeCue.cellResolution) {
                    var cellUnit = [ videoWidth / activeCue.cellResolution[0], videoHeight / activeCue.cellResolution[1] ];
                    if (activeCue.linePadding) {
                        for (key in activeCue.linePadding) {
                            if (activeCue.linePadding.hasOwnProperty(key)) {
                                var valueLinePadding = activeCue.linePadding[key];
                                replaceValue = (valueLinePadding * cellUnit[0]).toString();
                                var elementsSpan = document.getElementsByClassName("spanPadding");
                                for (var i = 0; i < elementsSpan.length; i++) {
                                    elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-left\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                                    elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-right\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                                }
                            }
                        }
                    }
                    if (activeCue.fontSize) {
                        for (key in activeCue.fontSize) {
                            if (activeCue.fontSize.hasOwnProperty(key)) {
                                if (activeCue.fontSize[key][0] === "%") {
                                    valueFontSize = activeCue.fontSize[key][1] / 100;
                                } else if (activeCue.fontSize[key][0] === "c") {
                                    valueFontSize = activeCue.fontSize[key][1];
                                }
                                replaceValue = (valueFontSize * cellUnit[1]).toString();
                                if (key !== "defaultFontSize") {
                                    elements = document.getElementsByClassName(key);
                                } else {
                                    elements = document.getElementsByClassName("paragraph");
                                }
                                for (var j = 0; j < elements.length; j++) {
                                    elements[j].style.cssText = elements[j].style.cssText.replace(/(font-size\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                                }
                            }
                        }
                        if (activeCue.lineHeight) {
                            for (key in activeCue.lineHeight) {
                                if (activeCue.lineHeight.hasOwnProperty(key)) {
                                    if (activeCue.lineHeight[key][0] === "%") {
                                        valueLineHeight = activeCue.lineHeight[key][1] / 100;
                                    } else if (activeCue.fontSize[key][0] === "c") {
                                        valueLineHeight = activeCue.lineHeight[key][1];
                                    }
                                    replaceValue = (valueLineHeight * cellUnit[1]).toString();
                                    elements = document.getElementsByClassName(key);
                                    for (var k = 0; k < elements.length; k++) {
                                        elements[k].style.cssText = elements[k].style.cssText.replace(/(line-height\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                                    }
                                }
                            }
                        }
                    }
                }
                if (activeCue.isd) {
                    var htmlCaptionDiv = document.getElementById(activeCue.cueID);
                    if (htmlCaptionDiv) {
                        captionContainer.removeChild(htmlCaptionDiv);
                    }
                    renderCaption(activeCue);
                }
            }
            function renderCaption(cue) {
                if (captionContainer) {
                    var finalCue = document.createElement("div");
                    captionContainer.appendChild(finalCue);
                    previousISDState = (0, _imsc.renderHTML)(cue.isd, finalCue, function(uri) {
                        var imsc1ImgUrnTester = /^(urn:)(mpeg:[a-z0-9][a-z0-9-]{0,31}:)(subs:)([0-9]+)$/;
                        var smpteImgUrnTester = /^#(.*)$/;
                        if (imsc1ImgUrnTester.test(uri)) {
                            var match = imsc1ImgUrnTester.exec(uri);
                            var imageId = parseInt(match[4], 10) - 1;
                            var imageData = btoa(cue.images[imageId]);
                            var dataUrl = "data:image/png;base64," + imageData;
                            return dataUrl;
                        } else if (smpteImgUrnTester.test(uri)) {
                            var match = smpteImgUrnTester.exec(uri);
                            var imageId = match[1];
                            var dataUrl = "data:image/png;base64," + cue.embeddedImages[imageId];
                            return dataUrl;
                        } else {
                            return null;
                        }
                    }, captionContainer.clientHeight, captionContainer.clientWidth, false, function(err) {
                        logger.info("renderCaption :", err);
                    }, previousISDState, true);
                    finalCue.id = cue.cueID;
                    eventBus.trigger(_coreEventsEvents2["default"].CAPTION_RENDERED, {
                        captionDiv: finalCue,
                        currentTrackIdx: currentTrackIdx
                    });
                }
            }
            function addCaptions(trackIdx, timeOffset, captionData) {
                var track = getTrackByIdx(trackIdx);
                var self = this;
                if (!track) {
                    return;
                }
                if (!captionData || !Array.isArray(captionData.length)) {
                    return;
                }
                for (var item = 0; item < captionData.length; item++) {
                    var cue = undefined;
                    var currentItem = captionData[item];
                    track.cellResolution = currentItem.cellResolution;
                    track.isFromCEA608 = currentItem.isFromCEA608;
                    if (currentItem.type === "html" && captionContainer) {
                        cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, "");
                        cue.cueHTMLElement = currentItem.cueHTMLElement;
                        cue.isd = currentItem.isd;
                        cue.images = currentItem.images;
                        cue.embeddedImages = currentItem.embeddedImages;
                        cue.cueID = currentItem.cueID;
                        cue.scaleCue = scaleCue.bind(self);
                        cue.cellResolution = currentItem.cellResolution;
                        cue.lineHeight = currentItem.lineHeight;
                        cue.linePadding = currentItem.linePadding;
                        cue.fontSize = currentItem.fontSize;
                        captionContainer.style.left = actualVideoLeft + "px";
                        captionContainer.style.top = actualVideoTop + "px";
                        captionContainer.style.width = actualVideoWidth + "px";
                        captionContainer.style.height = actualVideoHeight + "px";
                        cue.onenter = function() {
                            if (track.mode === _constantsConstants2["default"].TEXT_SHOWING) {
                                if (this.isd) {
                                    renderCaption(this);
                                    logger.debug("Cue enter id:" + this.cueID);
                                } else {
                                    captionContainer.appendChild(this.cueHTMLElement);
                                    scaleCue.call(self, this);
                                    eventBus.trigger(_coreEventsEvents2["default"].CAPTION_RENDERED, {
                                        captionDiv: this.cueHTMLElement,
                                        currentTrackIdx: currentTrackIdx
                                    });
                                }
                            }
                        };
                        cue.onexit = function() {
                            if (captionContainer) {
                                var divs = captionContainer.childNodes;
                                for (var i = 0; i < divs.length; ++i) {
                                    if (divs[i].id === this.cueID) {
                                        logger.debug("Cue exit id:" + divs[i].id);
                                        captionContainer.removeChild(divs[i]);
                                    }
                                }
                            }
                        };
                    } else {
                        if (currentItem.data) {
                            cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, currentItem.data);
                            if (currentItem.styles) {
                                if (currentItem.styles.align !== undefined && "align" in cue) {
                                    cue.align = currentItem.styles.align;
                                }
                                if (currentItem.styles.line !== undefined && "line" in cue) {
                                    cue.line = currentItem.styles.line;
                                }
                                if (currentItem.styles.position !== undefined && "position" in cue) {
                                    cue.position = currentItem.styles.position;
                                }
                                if (currentItem.styles.size !== undefined && "size" in cue) {
                                    cue.size = currentItem.styles.size;
                                }
                            }
                            cue.onenter = function() {
                                if (track.mode === _constantsConstants2["default"].TEXT_SHOWING) {
                                    eventBus.trigger(_coreEventsEvents2["default"].CAPTION_RENDERED, {
                                        currentTrackIdx: currentTrackIdx
                                    });
                                }
                            };
                        }
                    }
                    try {
                        if (cue) {
                            track.addCue(cue);
                        } else {
                            logger.error("impossible to display subtitles.");
                        }
                    } catch (e) {
                        deleteTrackCues(track);
                        track.addCue(cue);
                        throw e;
                    }
                }
            }
            function getTrackByIdx(idx) {
                return idx >= 0 && textTrackQueue[idx] ? videoModel.getTextTrack(textTrackQueue[idx].kind, textTrackQueue[idx].id, textTrackQueue[idx].lang, textTrackQueue[idx].isTTML, textTrackQueue[idx].isEmbedded) : null;
            }
            function getCurrentTrackIdx() {
                return currentTrackIdx;
            }
            function getTrackIdxForId(trackId) {
                var idx = -1;
                for (var i = 0; i < textTrackQueue.length; i++) {
                    if (textTrackQueue[i].id === trackId) {
                        idx = i;
                        break;
                    }
                }
                return idx;
            }
            function setCurrentTrackIdx(idx) {
                if (idx === currentTrackIdx) {
                    return;
                }
                currentTrackIdx = idx;
                var track = getTrackByIdx(currentTrackIdx);
                setCueStyleOnTrack.call(this, track);
                if (videoSizeCheckInterval) {
                    clearInterval(videoSizeCheckInterval);
                    videoSizeCheckInterval = null;
                }
                if (track && track.renderingType === "html") {
                    checkVideoSize.call(this, track, true);
                    videoSizeCheckInterval = setInterval(checkVideoSize.bind(this, track), 500);
                }
            }
            function setCueStyleOnTrack(track) {
                clearCaptionContainer.call(this);
                if (track) {
                    if (track.renderingType === "html") {
                        setNativeCueStyle.call(this);
                    } else {
                        removeNativeCueStyle.call(this);
                    }
                } else {
                    removeNativeCueStyle.call(this);
                }
            }
            function deleteTrackCues(track) {
                if (track.cues) {
                    var cues = track.cues;
                    var lastIdx = cues.length - 1;
                    for (var r = lastIdx; r >= 0; r--) {
                        track.removeCue(cues[r]);
                    }
                }
            }
            function deleteCuesFromTrackIdx(trackIdx) {
                var track = getTrackByIdx(trackIdx);
                if (track) {
                    deleteTrackCues(track);
                }
            }
            function deleteAllTextTracks() {
                var ln = trackElementArr ? trackElementArr.length : 0;
                for (var i = 0; i < ln; i++) {
                    var track = getTrackByIdx(i);
                    if (track) {
                        deleteTrackCues.call(this, track);
                        track.mode = "disabled";
                    }
                }
                trackElementArr = [];
                textTrackQueue = [];
                if (videoSizeCheckInterval) {
                    clearInterval(videoSizeCheckInterval);
                    videoSizeCheckInterval = null;
                }
                currentTrackIdx = -1;
                clearCaptionContainer.call(this);
            }
            function deleteTextTrack(idx) {
                videoModel.removeChild(trackElementArr[idx]);
                trackElementArr.splice(idx, 1);
            }
            function setNativeCueStyle() {
                var styleElement = document.getElementById("native-cue-style");
                if (styleElement) {
                    return;
                }
                styleElement = document.createElement("style");
                styleElement.id = "native-cue-style";
                document.head.appendChild(styleElement);
                var stylesheet = styleElement.sheet;
                var video = videoModel.getElement();
                try {
                    if (video) {
                        if (video.id) {
                            stylesheet.insertRule("#" + video.id + "::cue {background: transparent}", 0);
                        } else if (video.classList.length !== 0) {
                            stylesheet.insertRule("." + video.className + "::cue {background: transparent}", 0);
                        } else {
                            stylesheet.insertRule("video::cue {background: transparent}", 0);
                        }
                    }
                } catch (e) {
                    logger.info("" + e.message);
                }
            }
            function removeNativeCueStyle() {
                var styleElement = document.getElementById("native-cue-style");
                if (styleElement) {
                    document.head.removeChild(styleElement);
                }
            }
            function clearCaptionContainer() {
                if (captionContainer) {
                    while (captionContainer.firstChild) {
                        captionContainer.removeChild(captionContainer.firstChild);
                    }
                }
            }
            function setConfig(config) {
                if (!config) {
                    return;
                }
                if (config.videoModel) {
                    videoModel = config.videoModel;
                }
            }
            function setModeForTrackIdx(idx, mode) {
                var track = getTrackByIdx(idx);
                if (track && track.mode !== mode) {
                    track.mode = mode;
                }
            }
            function getCurrentTrackInfo() {
                return textTrackQueue[currentTrackIdx];
            }
            instance = {
                initialize: initialize,
                setDisplayCConTop: setDisplayCConTop,
                addTextTrack: addTextTrack,
                addCaptions: addCaptions,
                getCurrentTrackIdx: getCurrentTrackIdx,
                setCurrentTrackIdx: setCurrentTrackIdx,
                getTrackIdxForId: getTrackIdxForId,
                getCurrentTrackInfo: getCurrentTrackInfo,
                setModeForTrackIdx: setModeForTrackIdx,
                deleteCuesFromTrackIdx: deleteCuesFromTrackIdx,
                deleteAllTextTracks: deleteAllTextTracks,
                deleteTextTrack: deleteTextTrack,
                setConfig: setConfig
            };
            setup();
            return instance;
        }
        TextTracks.__dashjs_factory_name = "TextTracks";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(TextTracks);
        module.exports = exports["default"];
    }, {
        107: 107,
        20: 20,
        214: 214,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    200: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _voThumbnail = _dereq_(230);
        var _voThumbnail2 = _interopRequireDefault(_voThumbnail);
        var _ThumbnailTracks = _dereq_(201);
        var _ThumbnailTracks2 = _interopRequireDefault(_ThumbnailTracks);
        var _voBitrateInfo = _dereq_(220);
        var _voBitrateInfo2 = _interopRequireDefault(_voBitrateInfo);
        var _dashUtilsSegmentsUtils = _dereq_(79);
        function ThumbnailController(config) {
            var context = this.context;
            var instance = undefined, thumbnailTracks = undefined;
            function setup() {
                reset();
                thumbnailTracks = (0, _ThumbnailTracks2["default"])(context).create({
                    adapter: config.adapter,
                    baseURLController: config.baseURLController,
                    stream: config.stream,
                    timelineConverter: config.timelineConverter
                });
            }
            function getThumbnail(time, callback) {
                var track = thumbnailTracks.getCurrentTrack();
                if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {
                    return null;
                }
                var seq = Math.floor(time / track.segmentDuration);
                var offset = time % track.segmentDuration;
                var thumbIndex = Math.floor(offset * track.tilesHor * track.tilesVert / track.segmentDuration);
                var thumbnail = new _voThumbnail2["default"]();
                thumbnail.width = Math.floor(track.widthPerTile);
                thumbnail.height = Math.floor(track.heightPerTile);
                thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;
                thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;
                if ("readThumbnail" in track) {
                    return track.readThumbnail(time, function(url) {
                        thumbnail.url = url;
                        if (callback) callback(thumbnail);
                    });
                } else {
                    thumbnail.url = buildUrlFromTemplate(track, seq);
                    if (callback) callback(thumbnail);
                    return thumbnail;
                }
            }
            function buildUrlFromTemplate(track, seq) {
                var seqIdx = seq + track.startNumber;
                var url = (0, _dashUtilsSegmentsUtils.replaceTokenForTemplate)(track.templateUrl, "Number", seqIdx);
                url = (0, _dashUtilsSegmentsUtils.replaceTokenForTemplate)(url, "Time", (seqIdx - 1) * track.segmentDuration);
                url = (0, _dashUtilsSegmentsUtils.replaceTokenForTemplate)(url, "Bandwidth", track.bandwidth);
                return (0, _dashUtilsSegmentsUtils.unescapeDollarsInTemplate)(url);
            }
            function setTrackByIndex(index) {
                thumbnailTracks.setTrackByIndex(index);
            }
            function getCurrentTrackIndex() {
                return thumbnailTracks.getCurrentTrackIndex();
            }
            function getBitrateList() {
                var tracks = thumbnailTracks.getTracks();
                var i = 0;
                return tracks.map(function(t) {
                    var bitrateInfo = new _voBitrateInfo2["default"]();
                    bitrateInfo.mediaType = _constantsConstants2["default"].IMAGE;
                    bitrateInfo.qualityIndex = i++;
                    bitrateInfo.bitrate = t.bitrate;
                    bitrateInfo.width = t.width;
                    bitrateInfo.height = t.height;
                    return bitrateInfo;
                });
            }
            function reset() {
                if (thumbnailTracks) {
                    thumbnailTracks.reset();
                }
            }
            instance = {
                get: getThumbnail,
                setTrackByIndex: setTrackByIndex,
                getCurrentTrackIndex: getCurrentTrackIndex,
                getBitrateList: getBitrateList,
                reset: reset
            };
            setup();
            return instance;
        }
        ThumbnailController.__dashjs_factory_name = "ThumbnailController";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(ThumbnailController);
        module.exports = exports["default"];
    }, {
        107: 107,
        201: 201,
        220: 220,
        230: 230,
        48: 48,
        79: 79
    } ],
    201: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _dashConstantsDashConstants = _dereq_(62);
        var _dashConstantsDashConstants2 = _interopRequireDefault(_dashConstantsDashConstants);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voThumbnailTrackInfo = _dereq_(231);
        var _voThumbnailTrackInfo2 = _interopRequireDefault(_voThumbnailTrackInfo);
        var _streamingUtilsURLUtils = _dereq_(216);
        var _streamingUtilsURLUtils2 = _interopRequireDefault(_streamingUtilsURLUtils);
        var _dashUtilsSegmentsUtils = _dereq_(79);
        var _dashSegmentBaseLoader = _dereq_(60);
        var _dashSegmentBaseLoader2 = _interopRequireDefault(_dashSegmentBaseLoader);
        var _streamingUtilsBoxParser = _dereq_(203);
        var _streamingUtilsBoxParser2 = _interopRequireDefault(_streamingUtilsBoxParser);
        var _streamingNetXHRLoader = _dereq_(155);
        var _streamingNetXHRLoader2 = _interopRequireDefault(_streamingNetXHRLoader);
        var THUMBNAILS_SCHEME_ID_URIS = [ "http://dashif.org/thumbnail_tile", "http://dashif.org/guidelines/thumbnail_tile" ];
        exports.THUMBNAILS_SCHEME_ID_URIS = THUMBNAILS_SCHEME_ID_URIS;
        function ThumbnailTracks(config) {
            var context = this.context;
            var adapter = config.adapter;
            var baseURLController = config.baseURLController;
            var stream = config.stream;
            var timelineConverter = config.timelineConverter;
            var dashMetrics = config.dashMetrics;
            var mediaPlayerModel = config.mediaPlayerModel;
            var errHandler = config.errHandler;
            var urlUtils = (0, _streamingUtilsURLUtils2["default"])(context).getInstance();
            var instance = undefined, tracks = undefined, currentTrackIndex = undefined, loader = undefined, segmentBaseLoader = undefined, boxParser = undefined;
            function initialize() {
                reset();
                loader = (0, _streamingNetXHRLoader2["default"])(context).create({});
                boxParser = (0, _streamingUtilsBoxParser2["default"])(context).getInstance();
                segmentBaseLoader = (0, _dashSegmentBaseLoader2["default"])(context).getInstance();
                segmentBaseLoader.setConfig({
                    baseURLController: baseURLController,
                    dashMetrics: dashMetrics,
                    mediaPlayerModel: mediaPlayerModel,
                    errHandler: errHandler
                });
                addTracks();
            }
            function normalizeSegments(fragments, representation) {
                var segments = [];
                var count = 0;
                var i = undefined, len = undefined, s = undefined, seg = undefined;
                for (i = 0, len = fragments.length; i < len; i++) {
                    s = fragments[i];
                    seg = (0, _dashUtilsSegmentsUtils.getTimeBasedSegment)(timelineConverter, adapter.getIsDynamic(), representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count);
                    segments.push(seg);
                    seg = null;
                    count++;
                }
                return segments;
            }
            function addTracks() {
                if (!stream || !adapter) {
                    return;
                }
                var streamInfo = stream.getStreamInfo();
                if (!streamInfo) {
                    return;
                }
                var mediaInfo = adapter.getMediaInfoForType(streamInfo, _constantsConstants2["default"].IMAGE);
                if (!mediaInfo) {
                    return;
                }
                var voReps = adapter.getVoRepresentations(mediaInfo);
                if (voReps && voReps.length > 0) {
                    voReps.forEach(function(rep) {
                        if (rep.segmentInfoType === _dashConstantsDashConstants2["default"].SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media) createTrack(rep);
                        if (rep.segmentInfoType === _dashConstantsDashConstants2["default"].SEGMENT_BASE) createTrack(rep, true);
                    });
                }
                if (tracks.length > 0) {
                    tracks.sort(function(a, b) {
                        return a.bitrate - b.bitrate;
                    });
                    currentTrackIndex = tracks.length - 1;
                }
            }
            function createTrack(representation, useSegmentBase) {
                var track = new _voThumbnailTrackInfo2["default"]();
                track.id = representation.id;
                track.bitrate = representation.bandwidth;
                track.width = representation.width;
                track.height = representation.height;
                track.tilesHor = 1;
                track.tilesVert = 1;
                if (representation.essentialProperties) {
                    representation.essentialProperties.forEach(function(p) {
                        if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {
                            var vars = p.value.split("x");
                            if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {
                                track.tilesHor = parseInt(vars[0], 10);
                                track.tilesVert = parseInt(vars[1], 10);
                            }
                        }
                    });
                }
                if (useSegmentBase) {
                    segmentBaseLoader.loadSegments(representation, _constantsConstants2["default"].IMAGE, representation.indexRange, {}, function(segments, representation) {
                        var cache = [];
                        segments = normalizeSegments(segments, representation);
                        track.segmentDuration = segments[0].duration;
                        track.readThumbnail = function(time, callback) {
                            var cached = null;
                            cache.some(function(el) {
                                if (el.start <= time && el.end > time) {
                                    cached = el.url;
                                    return true;
                                }
                            });
                            if (cached) {
                                callback(cached);
                            } else {
                                segments.some(function(ss) {
                                    if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {
                                        var baseURL = baseURLController.resolve(representation.path);
                                        loader.load({
                                            method: "get",
                                            url: baseURL.url,
                                            request: {
                                                range: ss.mediaRange,
                                                responseType: "arraybuffer"
                                            },
                                            onload: function onload(e) {
                                                var info = boxParser.getSamplesInfo(e.target.response);
                                                var blob = new Blob([ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], {
                                                    type: "image/jpeg"
                                                });
                                                var imageUrl = window.URL.createObjectURL(blob);
                                                cache.push({
                                                    start: ss.mediaStartTime,
                                                    end: ss.mediaStartTime + ss.duration,
                                                    url: imageUrl
                                                });
                                                if (callback) callback(imageUrl);
                                            }
                                        });
                                        return true;
                                    }
                                });
                            }
                        };
                    });
                } else {
                    track.startNumber = representation.startNumber;
                    track.segmentDuration = representation.segmentDuration;
                    track.timescale = representation.timescale;
                    track.templateUrl = buildTemplateUrl(representation);
                }
                if (track.tilesHor > 0 && track.tilesVert > 0) {
                    track.widthPerTile = track.width / track.tilesHor;
                    track.heightPerTile = track.height / track.tilesVert;
                    tracks.push(track);
                }
            }
            function buildTemplateUrl(representation) {
              console.debug("buildTemplateUrl(representation) ", representation);
                var templateUrl = urlUtils.isRelative(representation.media) ? urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;
                if (!templateUrl) {
                    return "";
                }
                return (0, _dashUtilsSegmentsUtils.replaceIDForTemplate)(templateUrl, representation.id);
            }
            function getTracks() {
                return tracks;
            }
            function getCurrentTrackIndex() {
                return currentTrackIndex;
            }
            function getCurrentTrack() {
                if (currentTrackIndex < 0) {
                    return null;
                }
                return tracks[currentTrackIndex];
            }
            function setTrackByIndex(index) {
                if (!tracks || tracks.length === 0) {
                    return;
                }
                if (index >= tracks.length) {
                    index = tracks.length - 1;
                }
                currentTrackIndex = index;
            }
            function reset() {
                tracks = [];
                currentTrackIndex = -1;
            }
            instance = {
                initialize: initialize,
                getTracks: getTracks,
                reset: reset,
                setTrackByIndex: setTrackByIndex,
                getCurrentTrack: getCurrentTrack,
                getCurrentTrackIndex: getCurrentTrackIndex
            };
            initialize();
            return instance;
        }
        ThumbnailTracks.__dashjs_factory_name = "ThumbnailTracks";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(ThumbnailTracks);
    }, {
        107: 107,
        155: 155,
        203: 203,
        216: 216,
        231: 231,
        48: 48,
        60: 60,
        62: 62,
        79: 79
    } ],
    202: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreErrorsErrors = _dereq_(52);
        var _coreErrorsErrors2 = _interopRequireDefault(_coreErrorsErrors);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _controllersBlacklistController = _dereq_(112);
        var _controllersBlacklistController2 = _interopRequireDefault(_controllersBlacklistController);
        var _baseUrlResolutionDVBSelector = _dereq_(219);
        var _baseUrlResolutionDVBSelector2 = _interopRequireDefault(_baseUrlResolutionDVBSelector);
        var _baseUrlResolutionBasicSelector = _dereq_(218);
        var _baseUrlResolutionBasicSelector2 = _interopRequireDefault(_baseUrlResolutionBasicSelector);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _voDashJSError = _dereq_(221);
        var _voDashJSError2 = _interopRequireDefault(_voDashJSError);
        var _utilsSupervisorTools = _dereq_(214);
        function BaseURLSelector() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, serviceLocationBlacklistController = undefined, basicSelector = undefined, dvbSelector = undefined, selector = undefined;
            function setup() {
                serviceLocationBlacklistController = (0, _controllersBlacklistController2["default"])(context).create({
                    updateEventName: _coreEventsEvents2["default"].SERVICE_LOCATION_BLACKLIST_CHANGED,
                    addBlacklistEventName: _coreEventsEvents2["default"].SERVICE_LOCATION_BLACKLIST_ADD
                });
                basicSelector = (0, _baseUrlResolutionBasicSelector2["default"])(context).create({
                    blacklistController: serviceLocationBlacklistController
                });
                dvbSelector = (0, _baseUrlResolutionDVBSelector2["default"])(context).create({
                    blacklistController: serviceLocationBlacklistController
                });
                selector = basicSelector;
            }
            function setConfig(config) {
                if (config.selector) {
                    selector = config.selector;
                }
            }
            function chooseSelector(isDVB) {
                (0, _utilsSupervisorTools.checkParameterType)(isDVB, "boolean");
                selector = isDVB ? dvbSelector : basicSelector;
            }
            function select(data) {
                if (!data) {
                    return;
                }
                var baseUrls = data.baseUrls;
                var selectedIdx = data.selectedIdx;
                if (!isNaN(selectedIdx)) {
                    return baseUrls[selectedIdx];
                }
                var selectedBaseUrl = selector.select(baseUrls);
                if (!selectedBaseUrl) {
                    eventBus.trigger(_coreEventsEvents2["default"].URL_RESOLUTION_FAILED, {
                        error: new _voDashJSError2["default"](_coreErrorsErrors2["default"].URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, _coreErrorsErrors2["default"].URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)
                    });
                    if (selector === basicSelector) {
                        reset();
                    }
                    return;
                }
                data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);
                return selectedBaseUrl;
            }
            function reset() {
                serviceLocationBlacklistController.reset();
            }
            instance = {
                chooseSelector: chooseSelector,
                select: select,
                reset: reset,
                setConfig: setConfig
            };
            setup();
            return instance;
        }
        BaseURLSelector.__dashjs_factory_name = "BaseURLSelector";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(BaseURLSelector);
        module.exports = exports["default"];
    }, {
        112: 112,
        214: 214,
        218: 218,
        219: 219,
        221: 221,
        47: 47,
        48: 48,
        52: 52,
        55: 55
    } ],
    203: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _IsoFile = _dereq_(210);
        var _IsoFile2 = _interopRequireDefault(_IsoFile);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _codemIsoboxer = _dereq_(13);
        var _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);
        var _voIsoBoxSearchInfo = _dereq_(226);
        var _voIsoBoxSearchInfo2 = _interopRequireDefault(_voIsoBoxSearchInfo);
        function BoxParser() {
            var logger = undefined, instance = undefined;
            var context = this.context;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function parse(data) {
                if (!data) return null;
                if (data.fileStart === undefined) {
                    data.fileStart = 0;
                }
                var parsedFile = _codemIsoboxer2["default"].parseBuffer(data);
                var dashIsoFile = (0, _IsoFile2["default"])(context).create();
                dashIsoFile.setData(parsedFile);
                return dashIsoFile;
            }
            function findLastTopIsoBoxCompleted(types, buffer, offset) {
                if (offset === undefined) {
                    offset = 0;
                }
                if (!buffer || offset + 8 >= buffer.byteLength) {
                    return new _voIsoBoxSearchInfo2["default"](0, false);
                }
                var data = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : buffer;
                var boxInfo = undefined;
                var lastCompletedOffset = 0;
                while (offset < data.byteLength) {
                    var boxSize = parseUint32(data, offset);
                    var boxType = parseIsoBoxType(data, offset + 4);
                    if (boxSize === 0) {
                        break;
                    }
                    if (offset + boxSize <= data.byteLength) {
                        if (types.indexOf(boxType) >= 0) {
                            boxInfo = new _voIsoBoxSearchInfo2["default"](offset, true, boxSize);
                        } else {
                            lastCompletedOffset = offset + boxSize;
                        }
                    }
                    offset += boxSize;
                }
                if (!boxInfo) {
                    return new _voIsoBoxSearchInfo2["default"](lastCompletedOffset, false);
                }
                return boxInfo;
            }
            function getSamplesInfo(ab) {
                if (!ab || ab.byteLength === 0) {
                    return {
                        sampleList: [],
                        lastSequenceNumber: NaN,
                        totalDuration: NaN,
                        numSequences: NaN
                    };
                }
                var isoFile = parse(ab);
                var moofBoxes = isoFile.getBoxes("moof");
                var mfhdBoxes = isoFile.getBoxes("mfhd");
                var sampleDuration = undefined, sampleCompositionTimeOffset = undefined, sampleCount = undefined, sampleSize = undefined, sampleDts = undefined, sampleList = undefined, sample = undefined, i = undefined, j = undefined, k = undefined, l = undefined, m = undefined, n = undefined, dataOffset = undefined, lastSequenceNumber = undefined, numSequences = undefined, totalDuration = undefined;
                numSequences = isoFile.getBoxes("moof").length;
                lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number;
                sampleCount = 0;
                sampleList = [];
                var subsIndex = -1;
                var nextSubsSample = -1;
                for (l = 0; l < moofBoxes.length; l++) {
                    var moofBox = moofBoxes[l];
                    var trafBoxes = moofBox.getChildBoxes("traf");
                    for (j = 0; j < trafBoxes.length; j++) {
                        var trafBox = trafBoxes[j];
                        var tfhdBox = trafBox.getChildBox("tfhd");
                        var tfdtBox = trafBox.getChildBox("tfdt");
                        sampleDts = tfdtBox.baseMediaDecodeTime;
                        var trunBoxes = trafBox.getChildBoxes("trun");
                        var subsBoxes = trafBox.getChildBoxes("subs");
                        for (k = 0; k < trunBoxes.length; k++) {
                            var trunBox = trunBoxes[k];
                            sampleCount = trunBox.sample_count;
                            dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0);
                            for (i = 0; i < sampleCount; i++) {
                                sample = trunBox.samples[i];
                                sampleDuration = sample.sample_duration !== undefined ? sample.sample_duration : tfhdBox.default_sample_duration;
                                sampleSize = sample.sample_size !== undefined ? sample.sample_size : tfhdBox.default_sample_size;
                                sampleCompositionTimeOffset = sample.sample_composition_time_offset !== undefined ? sample.sample_composition_time_offset : 0;
                                var sampleData = {
                                    dts: sampleDts,
                                    cts: sampleDts + sampleCompositionTimeOffset,
                                    duration: sampleDuration,
                                    offset: moofBox.offset + dataOffset,
                                    size: sampleSize,
                                    subSizes: [ sampleSize ]
                                };
                                if (subsBoxes) {
                                    for (m = 0; m < subsBoxes.length; m++) {
                                        var subsBox = subsBoxes[m];
                                        if (subsIndex < subsBox.entry_count - 1 && i > nextSubsSample) {
                                            subsIndex++;
                                            nextSubsSample += subsBox.entries[subsIndex].sample_delta;
                                        }
                                        if (i == nextSubsSample) {
                                            sampleData.subSizes = [];
                                            var entry = subsBox.entries[subsIndex];
                                            for (n = 0; n < entry.subsample_count; n++) {
                                                sampleData.subSizes.push(entry.subsamples[n].subsample_size);
                                            }
                                        }
                                    }
                                }
                                sampleList.push(sampleData);
                                dataOffset += sampleSize;
                                sampleDts += sampleDuration;
                            }
                        }
                        totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;
                    }
                }
                return {
                    sampleList: sampleList,
                    lastSequenceNumber: lastSequenceNumber,
                    totalDuration: totalDuration,
                    numSequences: numSequences
                };
            }
            function getMediaTimescaleFromMoov(ab) {
                var isoFile = parse(ab);
                var mdhdBox = isoFile ? isoFile.getBox("mdhd") : undefined;
                return mdhdBox ? mdhdBox.timescale : NaN;
            }
            function parseUint32(data, offset) {
                return data[offset + 3] >>> 0 | data[offset + 2] << 8 >>> 0 | data[offset + 1] << 16 >>> 0 | data[offset] << 24 >>> 0;
            }
            function parseIsoBoxType(data, offset) {
                return String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset]);
            }
            function findInitRange(data) {
                var initRange = null;
                var start = undefined, end = undefined;
                var isoFile = parse(data);
                if (!isoFile) {
                    return initRange;
                }
                var ftyp = isoFile.getBox("ftyp");
                var moov = isoFile.getBox("moov");
                logger.debug("Searching for initialization.");
                if (moov && moov.isComplete) {
                    start = ftyp ? ftyp.offset : moov.offset;
                    end = moov.offset + moov.size - 1;
                    initRange = start + "-" + end;
                    logger.debug("Found the initialization.  Range: " + initRange);
                }
                return initRange;
            }
            instance = {
                parse: parse,
                findLastTopIsoBoxCompleted: findLastTopIsoBoxCompleted,
                getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,
                getSamplesInfo: getSamplesInfo,
                findInitRange: findInitRange
            };
            setup();
            return instance;
        }
        BoxParser.__dashjs_factory_name = "BoxParser";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(BoxParser);
        module.exports = exports["default"];
    }, {
        13: 13,
        210: 210,
        226: 226,
        46: 46,
        48: 48
    } ],
    204: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function Capabilities() {
            var instance = undefined, encryptedMediaSupported = undefined;
            function setup() {
                encryptedMediaSupported = false;
            }
            function supportsMediaSource() {
                var hasWebKit = "WebKitMediaSource" in window;
                var hasMediaSource = "MediaSource" in window;
                return hasWebKit || hasMediaSource;
            }
            function supportsEncryptedMedia() {
                return encryptedMediaSupported;
            }
            function setEncryptedMediaSupported(value) {
                encryptedMediaSupported = value;
            }
            function supportsCodec(codec) {
                if ("MediaSource" in window && MediaSource.isTypeSupported(codec)) {
                    return true;
                }
                if ("WebKitMediaSource" in window && WebKitMediaSource.isTypeSupported(codec)) {
                    return true;
                }
                return false;
            }
            instance = {
                supportsMediaSource: supportsMediaSource,
                supportsEncryptedMedia: supportsEncryptedMedia,
                supportsCodec: supportsCodec,
                setEncryptedMediaSupported: setEncryptedMediaSupported
            };
            setup();
            return instance;
        }
        Capabilities.__dashjs_factory_name = "Capabilities";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(Capabilities);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    205: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _utilsSupervisorTools = _dereq_(214);
        function CustomTimeRanges() {
            var customTimeRangeArray = [];
            var length = 0;
            function add(start, end) {
                var i = 0;
                for (i = 0; i < this.customTimeRangeArray.length && start > this.customTimeRangeArray[i].start; i++) ;
                this.customTimeRangeArray.splice(i, 0, {
                    start: start,
                    end: end
                });
                for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {
                    if (this.mergeRanges(i, i + 1)) {
                        i--;
                    }
                }
                this.length = this.customTimeRangeArray.length;
            }
            function clear() {
                this.customTimeRangeArray = [];
                this.length = 0;
            }
            function remove(start, end) {
                for (var i = 0; i < this.customTimeRangeArray.length; i++) {
                    if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {
                        this.customTimeRangeArray.splice(i, 1);
                        i--;
                    } else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {
                        this.customTimeRangeArray.splice(i + 1, 0, {
                            start: end,
                            end: this.customTimeRangeArray[i].end
                        });
                        this.customTimeRangeArray[i].end = start;
                        break;
                    } else if (start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {
                        this.customTimeRangeArray[i].end = start;
                    } else if (end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {
                        this.customTimeRangeArray[i].start = end;
                    }
                }
                this.length = this.customTimeRangeArray.length;
            }
            function mergeRanges(rangeIndex1, rangeIndex2) {
                var range1 = this.customTimeRangeArray[rangeIndex1];
                var range2 = this.customTimeRangeArray[rangeIndex2];
                if (range1.start <= range2.start && range2.start <= range1.end && range1.end <= range2.end) {
                    range1.end = range2.end;
                    this.customTimeRangeArray.splice(rangeIndex2, 1);
                    return true;
                } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {
                    range1.start = range2.start;
                    this.customTimeRangeArray.splice(rangeIndex2, 1);
                    return true;
                } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {
                    this.customTimeRangeArray.splice(rangeIndex1, 1);
                    return true;
                } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {
                    this.customTimeRangeArray.splice(rangeIndex2, 1);
                    return true;
                }
                return false;
            }
            function start(index) {
                (0, _utilsSupervisorTools.checkInteger)(index);
                if (index >= this.customTimeRangeArray.length || index < 0) {
                    return NaN;
                }
                return this.customTimeRangeArray[index].start;
            }
            function end(index) {
                (0, _utilsSupervisorTools.checkInteger)(index);
                if (index >= this.customTimeRangeArray.length || index < 0) {
                    return NaN;
                }
                return this.customTimeRangeArray[index].end;
            }
            return {
                customTimeRangeArray: customTimeRangeArray,
                length: length,
                add: add,
                clear: clear,
                remove: remove,
                mergeRanges: mergeRanges,
                start: start,
                end: end
            };
        }
        CustomTimeRanges.__dashjs_factory_name = "CustomTimeRanges";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(CustomTimeRanges);
        module.exports = exports["default"];
    }, {
        214: 214,
        48: 48
    } ],
    206: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var legacyKeysAndReplacements = [ {
            oldKey: "dashjs_vbitrate",
            newKey: "dashjs_video_bitrate"
        }, {
            oldKey: "dashjs_abitrate",
            newKey: "dashjs_audio_bitrate"
        }, {
            oldKey: "dashjs_vsettings",
            newKey: "dashjs_video_settings"
        }, {
            oldKey: "dashjs_asettings",
            newKey: "dashjs_audio_settings"
        } ];
        var LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = "dashjs_?_bitrate";
        var LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = "dashjs_?_settings";
        var STORAGE_TYPE_LOCAL = "localStorage";
        var STORAGE_TYPE_SESSION = "sessionStorage";
        var LAST_BITRATE = "lastBitrate";
        var LAST_MEDIA_SETTINGS = "lastMediaSettings";
        function DOMStorage(config) {
            config = config || {};
            var context = this.context;
            var settings = config.settings;
            var instance = undefined, logger = undefined, supported = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                translateLegacyKeys();
            }
            function isSupported(type) {
                if (supported !== undefined) return supported;
                supported = false;
                var testKey = "1";
                var testValue = "1";
                var storage = undefined;
                try {
                    if (typeof window !== "undefined") {
                        storage = window[type];
                    }
                } catch (error) {
                    logger.warn("DOMStorage access denied: " + error.message);
                    return supported;
                }
                if (!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION) {
                    return supported;
                }
                try {
                    storage.setItem(testKey, testValue);
                    storage.removeItem(testKey);
                    supported = true;
                } catch (error) {
                    logger.warn("DOMStorage is supported, but cannot be used: " + error.message);
                }
                return supported;
            }
            function translateLegacyKeys() {
                if (isSupported(STORAGE_TYPE_LOCAL)) {
                    legacyKeysAndReplacements.forEach(function(entry) {
                        var value = localStorage.getItem(entry.oldKey);
                        if (value) {
                            localStorage.removeItem(entry.oldKey);
                            try {
                                localStorage.setItem(entry.newKey, value);
                            } catch (e) {
                                logger.error(e.message);
                            }
                        }
                    });
                }
            }
            function getTimestamp() {
                var ten_minutes_ms = 60 * 1e3 * 10;
                return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;
            }
            function canStore(storageType, key) {
                return isSupported(storageType) && settings.get().streaming[key + "CachingInfo"].enabled;
            }
            function checkConfig() {
                if (!settings) {
                    throw new Error(_constantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function getSavedMediaSettings(type) {
                var mediaSettings = null;
                checkConfig();
                if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {
                    var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
                    try {
                        var obj = JSON.parse(localStorage.getItem(key)) || {};
                        var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= settings.get().streaming.lastMediaSettingsCachingInfo.ttl || false;
                        mediaSettings = obj.settings;
                        if (isExpired) {
                            localStorage.removeItem(key);
                            mediaSettings = null;
                        }
                    } catch (e) {
                        return null;
                    }
                }
                return mediaSettings;
            }
            function getSavedBitrateSettings(type) {
                var savedBitrate = NaN;
                checkConfig();
                if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {
                    var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
                    try {
                        var obj = JSON.parse(localStorage.getItem(key)) || {};
                        var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= settings.get().streaming.lastBitrateCachingInfo.ttl || false;
                        var bitrate = parseFloat(obj.bitrate);
                        if (!isNaN(bitrate) && !isExpired) {
                            savedBitrate = bitrate;
                            logger.debug("Last saved bitrate for " + type + " was " + bitrate);
                        } else if (isExpired) {
                            localStorage.removeItem(key);
                        }
                    } catch (e) {
                        return null;
                    }
                }
                return savedBitrate;
            }
            function setSavedMediaSettings(type, value) {
                if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {
                    var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
                    try {
                        localStorage.setItem(key, JSON.stringify({
                            settings: value,
                            timestamp: getTimestamp()
                        }));
                    } catch (e) {
                        logger.error(e.message);
                    }
                }
            }
            function setSavedBitrateSettings(type, bitrate) {
                if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {
                    var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
                    try {
                        localStorage.setItem(key, JSON.stringify({
                            bitrate: bitrate.toFixed(3),
                            timestamp: getTimestamp()
                        }));
                    } catch (e) {
                        logger.error(e.message);
                    }
                }
            }
            instance = {
                getSavedBitrateSettings: getSavedBitrateSettings,
                setSavedBitrateSettings: setSavedBitrateSettings,
                getSavedMediaSettings: getSavedMediaSettings,
                setSavedMediaSettings: setSavedMediaSettings
            };
            setup();
            return instance;
        }
        DOMStorage.__dashjs_factory_name = "DOMStorage";
        var factory = _coreFactoryMaker2["default"].getSingletonFactory(DOMStorage);
        exports["default"] = factory;
        module.exports = exports["default"];
    }, {
        107: 107,
        46: 46,
        48: 48
    } ],
    207: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function EBMLParser(config) {
            config = config || {};
            var instance = undefined;
            var data = new DataView(config.data);
            var pos = 0;
            function getPos() {
                return pos;
            }
            function setPos(value) {
                pos = value;
            }
            function consumeTag(tag, test) {
                var found = true;
                var bytesConsumed = 0;
                var p1 = undefined, p2 = undefined;
                if (test === undefined) {
                    test = false;
                }
                if (tag.tag > 16777215) {
                    if (data.getUint32(pos) !== tag.tag) {
                        found = false;
                    }
                    bytesConsumed = 4;
                } else if (tag.tag > 65535) {
                    p1 = data.getUint16(pos);
                    p2 = data.getUint8(pos + 2);
                    if (p1 * 256 + p2 !== tag.tag) {
                        found = false;
                    }
                    bytesConsumed = 3;
                } else if (tag.tag > 255) {
                    if (data.getUint16(pos) !== tag.tag) {
                        found = false;
                    }
                    bytesConsumed = 2;
                } else {
                    if (data.getUint8(pos) !== tag.tag) {
                        found = false;
                    }
                    bytesConsumed = 1;
                }
                if (!found && tag.required && !test) {
                    throw new Error("required tag not found");
                }
                if (found) {
                    pos += bytesConsumed;
                }
                return found;
            }
            function consumeTagAndSize(tag, test) {
                var found = consumeTag(tag, test);
                if (found) {
                    getMatroskaCodedNum();
                }
                return found;
            }
            function parseTag(tag) {
                var size = undefined;
                consumeTag(tag);
                size = getMatroskaCodedNum();
                return instance[tag.parse](size);
            }
            function skipOverElement(tag, test) {
                var found = consumeTag(tag, test);
                var headerSize = undefined;
                if (found) {
                    headerSize = getMatroskaCodedNum();
                    pos += headerSize;
                }
                return found;
            }
            function getMatroskaCodedNum(retainMSB) {
                var bytesUsed = 1;
                var mask = 128;
                var maxBytes = 8;
                var extraBytes = -1;
                var num = 0;
                var ch = data.getUint8(pos);
                var i = 0;
                for (i = 0; i < maxBytes; i += 1) {
                    if ((ch & mask) === mask) {
                        num = retainMSB === undefined ? ch & ~mask : ch;
                        extraBytes = i;
                        break;
                    }
                    mask >>= 1;
                }
                for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {
                    num = num << 8 | 255 & data.getUint8(pos + bytesUsed);
                }
                pos += bytesUsed;
                return num;
            }
            function getMatroskaFloat(size) {
                var outFloat = undefined;
                switch (size) {
                  case 4:
                    outFloat = data.getFloat32(pos);
                    pos += 4;
                    break;

                  case 8:
                    outFloat = data.getFloat64(pos);
                    pos += 8;
                    break;
                }
                return outFloat;
            }
            function getMatroskaUint(size) {
                var val = 0;
                for (var i = 0; i < size; i += 1) {
                    val <<= 8;
                    val |= data.getUint8(pos + i) & 255;
                }
                pos += size;
                return val;
            }
            function moreData() {
                return pos < data.byteLength;
            }
            instance = {
                getPos: getPos,
                setPos: setPos,
                consumeTag: consumeTag,
                consumeTagAndSize: consumeTagAndSize,
                parseTag: parseTag,
                skipOverElement: skipOverElement,
                getMatroskaCodedNum: getMatroskaCodedNum,
                getMatroskaFloat: getMatroskaFloat,
                getMatroskaUint: getMatroskaUint,
                moreData: moreData
            };
            return instance;
        }
        EBMLParser.__dashjs_factory_name = "EBMLParser";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(EBMLParser);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    208: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function ErrorHandler() {
            var instance = undefined;
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            function capabilityError(err) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "capability",
                    event: err
                });
            }
            function downloadError(id, url, request) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "download",
                    event: {
                        id: id,
                        url: url,
                        request: request
                    }
                });
            }
            function manifestError(message, id, manifest, err) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "manifestError",
                    event: {
                        message: message,
                        id: id,
                        manifest: manifest,
                        event: err
                    }
                });
            }
            function timedTextError(message, id, ccContent) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "cc",
                    event: {
                        message: message,
                        id: id,
                        cc: ccContent
                    }
                });
            }
            function mediaSourceError(err) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "mediasource",
                    event: err
                });
            }
            function mediaKeySessionError(err) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "key_session",
                    event: err
                });
            }
            function mediaKeyMessageError(err) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: "key_message",
                    event: err
                });
            }
            function error(err) {
                eventBus.trigger(_coreEventsEvents2["default"].ERROR, {
                    error: err
                });
            }
            instance = {
                capabilityError: capabilityError,
                downloadError: downloadError,
                manifestError: manifestError,
                timedTextError: timedTextError,
                mediaSourceError: mediaSourceError,
                mediaKeySessionError: mediaKeySessionError,
                mediaKeyMessageError: mediaKeyMessageError,
                error: error
            };
            return instance;
        }
        ErrorHandler.__dashjs_factory_name = "ErrorHandler";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(ErrorHandler);
        module.exports = exports["default"];
    }, {
        47: 47,
        48: 48,
        55: 55
    } ],
    209: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function InitCache() {
            var data = {};
            function save(chunk) {
                var id = chunk.streamId;
                var representationId = chunk.representationId;
                data[id] = data[id] || {};
                data[id][representationId] = chunk;
            }
            function extract(streamId, representationId) {
                if (data && data[streamId] && data[streamId][representationId]) {
                    return data[streamId][representationId];
                } else {
                    return null;
                }
            }
            function reset() {
                data = {};
            }
            var instance = {
                save: save,
                extract: extract,
                reset: reset
            };
            return instance;
        }
        InitCache.__dashjs_factory_name = "InitCache";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(InitCache);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    210: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _voIsoBox = _dereq_(225);
        var _voIsoBox2 = _interopRequireDefault(_voIsoBox);
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function IsoFile() {
            var instance = undefined, parsedIsoFile = undefined;
            function getBox(type) {
                if (!type || !parsedIsoFile || !parsedIsoFile.boxes || parsedIsoFile.boxes.length === 0 || typeof parsedIsoFile.fetch !== "function") return null;
                return convertToDashIsoBox(parsedIsoFile.fetch(type));
            }
            function getBoxes(type) {
                var boxes = [];
                if (!type || !parsedIsoFile || typeof parsedIsoFile.fetchAll !== "function") {
                    return boxes;
                }
                var boxData = parsedIsoFile.fetchAll(type);
                var box = undefined;
                for (var i = 0, ln = boxData.length; i < ln; i++) {
                    box = convertToDashIsoBox(boxData[i]);
                    if (box) {
                        boxes.push(box);
                    }
                }
                return boxes;
            }
            function setData(value) {
                parsedIsoFile = value;
            }
            function getLastBox() {
                if (!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length) return null;
                var type = parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type;
                var boxes = getBoxes(type);
                return boxes.length > 0 ? boxes[boxes.length - 1] : null;
            }
            function convertToDashIsoBox(boxData) {
                if (!boxData) return null;
                var box = new _voIsoBox2["default"](boxData);
                if (boxData.hasOwnProperty("_incomplete")) {
                    box.isComplete = !boxData._incomplete;
                }
                return box;
            }
            instance = {
                getBox: getBox,
                getBoxes: getBoxes,
                setData: setData,
                getLastBox: getLastBox
            };
            return instance;
        }
        IsoFile.__dashjs_factory_name = "IsoFile";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(IsoFile);
        module.exports = exports["default"];
    }, {
        225: 225,
        48: 48
    } ],
    211: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        function LiveEdgeFinder(config) {
            config = config || {};
            var instance = undefined;
            var timelineConverter = config.timelineConverter;
            var streamProcessor = config.streamProcessor;
            function checkConfig() {
                if (!timelineConverter || !timelineConverter.hasOwnProperty("getExpectedLiveEdge") || !streamProcessor || !streamProcessor.hasOwnProperty("getRepresentationInfo")) {
                    throw new Error(_constantsConstants2["default"].MISSING_CONFIG_ERROR);
                }
            }
            function getLiveEdge() {
                checkConfig();
                var representationInfo = streamProcessor.getRepresentationInfo();
                var dvrEnd = representationInfo.DVRWindow ? representationInfo.DVRWindow.end : 0;
                var liveEdge = dvrEnd;
                if (representationInfo.useCalculatedLiveEdgeTime) {
                    liveEdge = timelineConverter.getExpectedLiveEdge();
                    timelineConverter.setClientTimeOffset(liveEdge - dvrEnd);
                }
                return liveEdge;
            }
            function reset() {
                timelineConverter = null;
                streamProcessor = null;
            }
            instance = {
                getLiveEdge: getLiveEdge,
                reset: reset
            };
            return instance;
        }
        LiveEdgeFinder.__dashjs_factory_name = "LiveEdgeFinder";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(LiveEdgeFinder);
        module.exports = exports["default"];
    }, {
        107: 107,
        48: 48
    } ],
    212: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _fastDeepEqual = _dereq_(15);
        var _fastDeepEqual2 = _interopRequireDefault(_fastDeepEqual);
        function ObjectUtils() {
            var instance = undefined;
            function areEqual(obj1, obj2) {
                return (0, _fastDeepEqual2["default"])(obj1, obj2);
            }
            instance = {
                areEqual: areEqual
            };
            return instance;
        }
        ObjectUtils.__dashjs_factory_name = "ObjectUtils";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(ObjectUtils);
        module.exports = exports["default"];
    }, {
        15: 15,
        48: 48
    } ],
    213: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function RequestModifier() {
            var instance = undefined;
            function modifyRequestURL(url) {
                return url;
            }
            function modifyRequestHeader(request) {
                return request;
            }
            instance = {
                modifyRequestURL: modifyRequestURL,
                modifyRequestHeader: modifyRequestHeader
            };
            return instance;
        }
        RequestModifier.__dashjs_factory_name = "RequestModifier";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(RequestModifier);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    214: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.checkParameterType = checkParameterType;
        exports.checkInteger = checkInteger;
        exports.checkRange = checkRange;
        exports.checkIsVideoOrAudioType = checkIsVideoOrAudioType;
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        function checkParameterType(parameter, type) {
            if (typeof parameter !== type) {
                throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR;
            }
        }
        function checkInteger(parameter) {
            var isInt = parameter !== null && !isNaN(parameter) && parameter % 1 === 0;
            if (!isInt) {
                throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR + " : argument is not an integer";
            }
        }
        function checkRange(parameter, min, max) {
            if (parameter < min || parameter > max) {
                throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR + " : argument out of range";
            }
        }
        function checkIsVideoOrAudioType(type) {
            if (typeof type !== "string" || type !== _constantsConstants2["default"].AUDIO && type !== _constantsConstants2["default"].VIDEO) {
                throw _constantsConstants2["default"].BAD_ARGUMENT_ERROR;
            }
        }
    }, {
        107: 107
    } ],
    215: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var _coreEventBus = _dereq_(47);
        var _coreEventBus2 = _interopRequireDefault(_coreEventBus);
        var _coreEventsEvents = _dereq_(55);
        var _coreEventsEvents2 = _interopRequireDefault(_coreEventsEvents);
        var _imsc = _dereq_(20);
        function TTMLParser() {
            var context = this.context;
            var eventBus = (0, _coreEventBus2["default"])(context).getInstance();
            var instance = undefined, logger = undefined;
            var cueCounter = 0;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
            }
            function getCueID() {
                var id = "cue_TTML_" + cueCounter;
                cueCounter++;
                return id;
            }
            function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {
                var errorMsg = "";
                var captionArray = [];
                var startTime = undefined, endTime = undefined, i = undefined;
                var content = {};
                var embeddedImages = {};
                var currentImageId = "";
                var accumulated_image_data = "";
                var metadataHandler = {
                    onOpenTag: function onOpenTag(ns, name, attrs) {
                        if (name === "image" && ns === "http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt") {
                            if (!attrs[" imagetype"] || attrs[" imagetype"].value !== "PNG") {
                                logger.warn("smpte-tt imagetype != PNG. Discarded");
                                return;
                            }
                            currentImageId = attrs["http://www.w3.org/XML/1998/namespace id"].value;
                        }
                    },
                    onCloseTag: function onCloseTag() {
                        if (currentImageId) {
                            embeddedImages[currentImageId] = accumulated_image_data.trim();
                        }
                        accumulated_image_data = "";
                        currentImageId = "";
                    },
                    onText: function onText(contents) {
                        if (currentImageId) {
                            accumulated_image_data = accumulated_image_data + contents;
                        }
                    }
                };
                if (!data) {
                    errorMsg = "no ttml data to parse";
                    throw new Error(errorMsg);
                }
                content.data = data;
                eventBus.trigger(_coreEventsEvents2["default"].TTML_TO_PARSE, content);
                var imsc1doc = (0, _imsc.fromXML)(content.data, function(msg) {
                    errorMsg = msg;
                }, metadataHandler);
                eventBus.trigger(_coreEventsEvents2["default"].TTML_PARSED, {
                    ttmlString: content.data,
                    ttmlDoc: imsc1doc
                });
                var mediaTimeEvents = imsc1doc.getMediaTimeEvents();
                for (i = 0; i < mediaTimeEvents.length; i++) {
                    var isd = (0, _imsc.generateISD)(imsc1doc, mediaTimeEvents[i], function(error) {
                        errorMsg = error;
                    });
                    if (isd.contents.some(function(topLevelContents) {
                        return topLevelContents.contents.length;
                    })) {
                        startTime = mediaTimeEvents[i] + offsetTime < startTimeSegment ? startTimeSegment : mediaTimeEvents[i] + offsetTime;
                        endTime = mediaTimeEvents[i + 1] + offsetTime > endTimeSegment ? endTimeSegment : mediaTimeEvents[i + 1] + offsetTime;
                        if (startTime < endTime) {
                            captionArray.push({
                                start: startTime,
                                end: endTime,
                                type: "html",
                                cueID: getCueID(),
                                isd: isd,
                                images: images,
                                embeddedImages: embeddedImages
                            });
                        }
                    }
                }
                if (errorMsg !== "") {
                    logger.error(errorMsg);
                    throw new Error(errorMsg);
                }
                return captionArray;
            }
            instance = {
                parse: parse
            };
            setup();
            return instance;
        }
        TTMLParser.__dashjs_factory_name = "TTMLParser";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(TTMLParser);
        module.exports = exports["default"];
    }, {
        20: 20,
        46: 46,
        47: 47,
        48: 48,
        55: 55
    } ],
    216: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function URLUtils() {
            var resolveFunction = undefined;
            var schemeRegex = /^[a-z][a-z0-9+\-.]*:/i;
            var httpUrlRegex = /^https?:\/\//i;
            var httpsUrlRegex = /^https:\/\//i;
            var originRegex = /^([a-z][a-z0-9+\-.]*:\/\/[^\/]+)\/?/i;
            var nativeURLResolver = function nativeURLResolver(url, baseUrl) {
                try {
                    return new window.URL(url, baseUrl).toString();
                } catch (e) {
                    return url;
                }
            };
            var dumbURLResolver = function dumbURLResolver(url, baseUrl) {
                var baseUrlParseFunc = parseBaseUrl;
                if (!baseUrl) {
                    return url;
                }
                if (!isRelative(url)) {
                    return url;
                }
                if (isPathAbsolute(url)) {
                    baseUrlParseFunc = parseOrigin;
                }
                if (isSchemeRelative(url)) {
                    baseUrlParseFunc = parseScheme;
                }
                var base = baseUrlParseFunc(baseUrl);
                var joinChar = base.charAt(base.length - 1) !== "/" && url.charAt(0) !== "/" ? "/" : "";
                return [ base, url ].join(joinChar);
            };
            function setup() {
                try {
                    var u = new window.URL("x", "http://y");
                    resolveFunction = nativeURLResolver;
                } catch (e) {} finally {
                    resolveFunction = resolveFunction || dumbURLResolver;
                }
            }
            function parseBaseUrl(url) {
                var slashIndex = url.indexOf("/");
                var lastSlashIndex = url.lastIndexOf("/");
                if (slashIndex !== -1) {
                    if (lastSlashIndex === slashIndex + 1) {
                        return url;
                    }
                    if (url.indexOf("?") !== -1) {
                        url = url.substring(0, url.indexOf("?"));
                    }
                    return url.substring(0, lastSlashIndex + 1);
                }
                return "";
            }
            function parseOrigin(url) {
                var matches = url.match(originRegex);
                if (matches) {
                    return matches[1];
                }
                return "";
            }
            function parseScheme(url) {
                var matches = url.match(schemeRegex);
                if (matches) {
                    return matches[0];
                }
                return "";
            }
            function isRelative(url) {
                return !schemeRegex.test(url);
            }
            function isPathAbsolute(url) {
                return isRelative(url) && url.charAt(0) === "/";
            }
            function isSchemeRelative(url) {
                return url.indexOf("//") === 0;
            }
            function isHTTPURL(url) {
                return httpUrlRegex.test(url);
            }
            function isHTTPS(url) {
                return httpsUrlRegex.test(url);
            }
            function resolve(url, baseUrl) {
                return resolveFunction(url, baseUrl);
            }
            setup();
            var instance = {
                parseBaseUrl: parseBaseUrl,
                parseOrigin: parseOrigin,
                parseScheme: parseScheme,
                isRelative: isRelative,
                isPathAbsolute: isPathAbsolute,
                isSchemeRelative: isSchemeRelative,
                isHTTPURL: isHTTPURL,
                isHTTPS: isHTTPS,
                resolve: resolve
            };
            return instance;
        }
        URLUtils.__dashjs_factory_name = "URLUtils";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(URLUtils);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    217: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        var _coreDebug = _dereq_(46);
        var _coreDebug2 = _interopRequireDefault(_coreDebug);
        var WEBVTT = "WEBVTT";
        function VTTParser() {
            var context = this.context;
            var instance = undefined, logger = undefined, regExNewLine = undefined, regExToken = undefined, regExWhiteSpace = undefined, regExWhiteSpaceWordBoundary = undefined;
            function setup() {
                logger = (0, _coreDebug2["default"])(context).getInstance().getLogger(instance);
                regExNewLine = /(?:\r\n|\r|\n)/gm;
                regExToken = /-->/;
                regExWhiteSpace = /(^[\s]+|[\s]+$)/g;
                regExWhiteSpaceWordBoundary = /\s\b/g;
            }
            function parse(data) {
                var captionArray = [];
                var len = undefined, lastStartTime = undefined;
                if (!data) {
                    return captionArray;
                }
                data = data.split(regExNewLine);
                len = data.length;
                lastStartTime = -1;
                for (var i = 0; i < len; i++) {
                    var item = data[i];
                    if (item.length > 0 && item !== WEBVTT) {
                        if (item.match(regExToken)) {
                            var attributes = parseItemAttributes(item);
                            var cuePoints = attributes.cuePoints;
                            var styles = attributes.styles;
                            var text = getSublines(data, i + 1);
                            var startTime = convertCuePointTimes(cuePoints[0].replace(regExWhiteSpace, ""));
                            var endTime = convertCuePointTimes(cuePoints[1].replace(regExWhiteSpace, ""));
                            if (!isNaN(startTime) && !isNaN(endTime) && startTime >= lastStartTime && endTime > startTime) {
                                if (text !== "") {
                                    lastStartTime = startTime;
                                    captionArray.push({
                                        start: startTime,
                                        end: endTime,
                                        data: text,
                                        styles: styles
                                    });
                                } else {
                                    logger.error("Skipping cue due to empty/malformed cue text");
                                }
                            } else {
                                logger.error("Skipping cue due to incorrect cue timing");
                            }
                        }
                    }
                }
                return captionArray;
            }
            function convertCuePointTimes(time) {
                var timeArray = time.split(":");
                var len = timeArray.length - 1;
                time = parseInt(timeArray[len - 1], 10) * 60 + parseFloat(timeArray[len]);
                if (len === 2) {
                    time += parseInt(timeArray[0], 10) * 3600;
                }
                return time;
            }
            function parseItemAttributes(data) {
                var vttCuePoints = data.split(regExToken);
                var arr = vttCuePoints[1].split(regExWhiteSpaceWordBoundary);
                arr.shift();
                vttCuePoints[1] = arr[0];
                arr.shift();
                return {
                    cuePoints: vttCuePoints,
                    styles: getCaptionStyles(arr)
                };
            }
            function getCaptionStyles(arr) {
                var styleObject = {};
                arr.forEach(function(element) {
                    if (element.split(/:/).length > 1) {
                        var val = element.split(/:/)[1];
                        if (val && val.search(/%/) != -1) {
                            val = parseInt(val.replace(/%/, ""), 10);
                        }
                        if (element.match(/align/) || element.match(/A/)) {
                            styleObject.align = val;
                        }
                        if (element.match(/line/) || element.match(/L/)) {
                            styleObject.line = val;
                        }
                        if (element.match(/position/) || element.match(/P/)) {
                            styleObject.position = val;
                        }
                        if (element.match(/size/) || element.match(/S/)) {
                            styleObject.size = val;
                        }
                    }
                });
                return styleObject;
            }
            function getSublines(data, idx) {
                var i = idx;
                var subline = "";
                var lineData = "";
                var lineCount = undefined;
                while (data[i] !== "" && i < data.length) {
                    i++;
                }
                lineCount = i - idx;
                if (lineCount > 1) {
                    for (var j = 0; j < lineCount; j++) {
                        lineData = data[idx + j];
                        if (!lineData.match(regExToken)) {
                            subline += lineData;
                            if (j !== lineCount - 1) {
                                subline += "\n";
                            }
                        } else {
                            subline = "";
                            break;
                        }
                    }
                } else {
                    lineData = data[idx];
                    if (!lineData.match(regExToken)) subline = lineData;
                }
                return subline;
            }
            instance = {
                parse: parse
            };
            setup();
            return instance;
        }
        VTTParser.__dashjs_factory_name = "VTTParser";
        exports["default"] = _coreFactoryMaker2["default"].getSingletonFactory(VTTParser);
        module.exports = exports["default"];
    }, {
        46: 46,
        48: 48
    } ],
    218: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function BasicSelector(config) {
            config = config || {};
            var instance = undefined;
            var blacklistController = config.blacklistController;
            function select(baseUrls) {
                var index = 0;
                var selectedBaseUrl = undefined;
                if (baseUrls && baseUrls.some(function(baseUrl, idx) {
                    index = idx;
                    return !blacklistController.contains(baseUrl.serviceLocation);
                })) {
                    selectedBaseUrl = baseUrls[index];
                }
                return selectedBaseUrl;
            }
            instance = {
                select: select
            };
            return instance;
        }
        BasicSelector.__dashjs_factory_name = "BasicSelector";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(BasicSelector);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    219: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _coreFactoryMaker = _dereq_(48);
        var _coreFactoryMaker2 = _interopRequireDefault(_coreFactoryMaker);
        function DVBSelector(config) {
            config = config || {};
            var instance = undefined;
            var blacklistController = config.blacklistController;
            function getNonBlacklistedBaseUrls(urls) {
                var removedPriorities = [];
                var samePrioritiesFilter = function samePrioritiesFilter(el) {
                    if (removedPriorities.length) {
                        if (el.dvb_priority && removedPriorities.indexOf(el.dvb_priority) !== -1) {
                            return false;
                        }
                    }
                    return true;
                };
                var serviceLocationFilter = function serviceLocationFilter(baseUrl) {
                    if (blacklistController.contains(baseUrl.serviceLocation)) {
                        if (baseUrl.dvb_priority) {
                            removedPriorities.push(baseUrl.dvb_priority);
                        }
                        return false;
                    }
                    return true;
                };
                return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);
            }
            function selectByWeight(availableUrls) {
                var prioritySorter = function prioritySorter(a, b) {
                    var diff = a.dvb_priority - b.dvb_priority;
                    return isNaN(diff) ? 0 : diff;
                };
                var topPriorityFilter = function topPriorityFilter(baseUrl, idx, arr) {
                    return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;
                };
                var totalWeight = 0;
                var cumulWeights = [];
                var idx = 0;
                var rn = undefined, urls = undefined;
                urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);
                if (urls.length) {
                    if (urls.length > 1) {
                        urls.forEach(function(baseUrl) {
                            totalWeight += baseUrl.dvb_weight;
                            cumulWeights.push(totalWeight);
                        });
                        rn = Math.floor(Math.random() * (totalWeight - 1));
                        cumulWeights.every(function(limit, index) {
                            idx = index;
                            if (rn < limit) {
                                return false;
                            }
                            return true;
                        });
                    }
                    return urls[idx];
                }
            }
            function select(baseUrls) {
                return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));
            }
            instance = {
                select: select
            };
            return instance;
        }
        DVBSelector.__dashjs_factory_name = "DVBSelector";
        exports["default"] = _coreFactoryMaker2["default"].getClassFactory(DVBSelector);
        module.exports = exports["default"];
    }, {
        48: 48
    } ],
    220: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var BitrateInfo = function BitrateInfo() {
            _classCallCheck(this, BitrateInfo);
            this.mediaType = null;
            this.bitrate = null;
            this.width = null;
            this.height = null;
            this.scanType = null;
            this.qualityIndex = NaN;
        };
        exports["default"] = BitrateInfo;
        module.exports = exports["default"];
    }, {} ],
    221: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DashJSError = function DashJSError(code, message, data) {
            _classCallCheck(this, DashJSError);
            this.code = code || null;
            this.message = message || null;
            this.data = data || null;
        };
        exports["default"] = DashJSError;
        module.exports = exports["default"];
    }, {} ],
    222: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DataChunk = function DataChunk() {
            _classCallCheck(this, DataChunk);
            this.streamId = null;
            this.mediaInfo = null;
            this.segmentType = null;
            this.quality = NaN;
            this.index = NaN;
            this.bytes = null;
            this.start = NaN;
            this.end = NaN;
            this.duration = NaN;
            this.representationId = null;
            this.endFragment = null;
        };
        exports["default"] = DataChunk;
        module.exports = exports["default"];
    }, {} ],
    223: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var FragmentRequest = function FragmentRequest() {
            _classCallCheck(this, FragmentRequest);
            this.action = FragmentRequest.ACTION_DOWNLOAD;
            this.startTime = NaN;
            this.mediaType = null;
            this.mediaInfo = null;
            this.type = null;
            this.duration = NaN;
            this.timescale = NaN;
            this.range = null;
            this.url = null;
            this.serviceLocation = null;
            this.requestStartDate = null;
            this.firstByteDate = null;
            this.requestEndDate = null;
            this.quality = NaN;
            this.index = NaN;
            this.availabilityStartTime = null;
            this.availabilityEndTime = null;
            this.wallStartTime = null;
            this.bytesLoaded = NaN;
            this.bytesTotal = NaN;
            this.delayLoadingTime = NaN;
            this.responseType = "arraybuffer";
            this.representationId = null;
        };
        FragmentRequest.ACTION_DOWNLOAD = "download";
        FragmentRequest.ACTION_COMPLETE = "complete";
        exports["default"] = FragmentRequest;
        module.exports = exports["default"];
    }, {} ],
    224: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _FragmentRequest2 = _dereq_(223);
        var _FragmentRequest3 = _interopRequireDefault(_FragmentRequest2);
        var HeadRequest = function(_FragmentRequest) {
            _inherits(HeadRequest, _FragmentRequest);
            function HeadRequest(url) {
                _classCallCheck(this, HeadRequest);
                _get(Object.getPrototypeOf(HeadRequest.prototype), "constructor", this).call(this);
                this.url = url || null;
                this.checkForExistenceOnly = true;
            }
            return HeadRequest;
        }(_FragmentRequest3["default"]);
        exports["default"] = HeadRequest;
        module.exports = exports["default"];
    }, {
        223: 223
    } ],
    225: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var IsoBox = function() {
            function IsoBox(boxData) {
                _classCallCheck(this, IsoBox);
                this.offset = boxData._offset;
                this.type = boxData.type;
                this.size = boxData.size;
                this.boxes = [];
                if (boxData.boxes) {
                    for (var i = 0; i < boxData.boxes.length; i++) {
                        this.boxes.push(new IsoBox(boxData.boxes[i]));
                    }
                }
                this.isComplete = true;
                switch (boxData.type) {
                  case "sidx":
                    this.timescale = boxData.timescale;
                    this.earliest_presentation_time = boxData.earliest_presentation_time;
                    this.first_offset = boxData.first_offset;
                    this.references = boxData.references;
                    if (boxData.references) {
                        this.references = [];
                        for (var i = 0; i < boxData.references.length; i++) {
                            var reference = {
                                reference_type: boxData.references[i].reference_type,
                                referenced_size: boxData.references[i].referenced_size,
                                subsegment_duration: boxData.references[i].subsegment_duration
                            };
                            this.references.push(reference);
                        }
                    }
                    break;

                  case "emsg":
                    this.id = boxData.id;
                    this.value = boxData.value;
                    this.timescale = boxData.timescale;
                    this.scheme_id_uri = boxData.scheme_id_uri;
                    this.presentation_time_delta = boxData.version === 1 ? boxData.presentation_time : boxData.presentation_time_delta;
                    this.event_duration = boxData.event_duration;
                    this.message_data = boxData.message_data;
                    break;

                  case "mdhd":
                    this.timescale = boxData.timescale;
                    break;

                  case "mfhd":
                    this.sequence_number = boxData.sequence_number;
                    break;

                  case "subs":
                    this.entry_count = boxData.entry_count;
                    this.entries = boxData.entries;
                    break;

                  case "tfhd":
                    this.base_data_offset = boxData.base_data_offset;
                    this.sample_description_index = boxData.sample_description_index;
                    this.default_sample_duration = boxData.default_sample_duration;
                    this.default_sample_size = boxData.default_sample_size;
                    this.default_sample_flags = boxData.default_sample_flags;
                    this.flags = boxData.flags;
                    break;

                  case "tfdt":
                    this.version = boxData.version;
                    this.baseMediaDecodeTime = boxData.baseMediaDecodeTime;
                    this.flags = boxData.flags;
                    break;

                  case "trun":
                    this.sample_count = boxData.sample_count;
                    this.first_sample_flags = boxData.first_sample_flags;
                    this.data_offset = boxData.data_offset;
                    this.flags = boxData.flags;
                    this.samples = boxData.samples;
                    if (boxData.samples) {
                        this.samples = [];
                        for (var i = 0, ln = boxData.samples.length; i < ln; i++) {
                            var sample = {
                                sample_size: boxData.samples[i].sample_size,
                                sample_duration: boxData.samples[i].sample_duration,
                                sample_composition_time_offset: boxData.samples[i].sample_composition_time_offset
                            };
                            this.samples.push(sample);
                        }
                    }
                    break;
                }
            }
            _createClass(IsoBox, [ {
                key: "getChildBox",
                value: function getChildBox(type) {
                    for (var i = 0; i < this.boxes.length; i++) {
                        if (this.boxes[i].type === type) {
                            return this.boxes[i];
                        }
                    }
                }
            }, {
                key: "getChildBoxes",
                value: function getChildBoxes(type) {
                    var boxes = [];
                    for (var i = 0; i < this.boxes.length; i++) {
                        if (this.boxes[i].type === type) {
                            boxes.push(this.boxes[i]);
                        }
                    }
                    return boxes;
                }
            } ]);
            return IsoBox;
        }();
        exports["default"] = IsoBox;
        module.exports = exports["default"];
    }, {} ],
    226: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var IsoBoxSearchInfo = function IsoBoxSearchInfo(lastCompletedOffset, found, size) {
            _classCallCheck(this, IsoBoxSearchInfo);
            this.lastCompletedOffset = lastCompletedOffset;
            this.found = found;
            this.size = size;
        };
        exports["default"] = IsoBoxSearchInfo;
        module.exports = exports["default"];
    }, {} ],
    227: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var MetricsList = function MetricsList() {
            _classCallCheck(this, MetricsList);
            this.TcpList = [];
            this.HttpList = [];
            this.RepSwitchList = [];
            this.BufferLevel = [];
            this.BufferState = [];
            this.PlayList = [];
            this.DroppedFrames = [];
            this.SchedulingInfo = [];
            this.DVRInfo = [];
            this.ManifestUpdate = [];
            this.RequestsQueue = null;
            this.DVBErrors = [];
        };
        exports["default"] = MetricsList;
        module.exports = exports["default"];
    }, {} ],
    228: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x, property = _x2, receiver = _x3;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        desc = parent = undefined;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            }
        };
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _constantsConstants = _dereq_(107);
        var _constantsConstants2 = _interopRequireDefault(_constantsConstants);
        var _FragmentRequest2 = _dereq_(223);
        var _FragmentRequest3 = _interopRequireDefault(_FragmentRequest2);
        var TextRequest = function(_FragmentRequest) {
            _inherits(TextRequest, _FragmentRequest);
            function TextRequest(url, type) {
                _classCallCheck(this, TextRequest);
                _get(Object.getPrototypeOf(TextRequest.prototype), "constructor", this).call(this);
                this.url = url || null;
                this.type = type || null;
                this.mediaType = _constantsConstants2["default"].STREAM;
                this.responseType = "";
            }
            return TextRequest;
        }(_FragmentRequest3["default"]);
        exports["default"] = TextRequest;
        module.exports = exports["default"];
    }, {
        107: 107,
        223: 223
    } ],
    229: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var TextTrackInfo = function TextTrackInfo() {
            _classCallCheck(this, TextTrackInfo);
            this.captionData = null;
            this.label = null;
            this.lang = null;
            this.defaultTrack = false;
            this.kind = null;
            this.isFragmented = false;
            this.isEmbedded = false;
        };
        exports["default"] = TextTrackInfo;
        module.exports = exports["default"];
    }, {} ],
    230: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var Thumbnail = function Thumbnail() {
            _classCallCheck(this, Thumbnail);
            this.url = null;
            this.width = null;
            this.height = null;
            this.x = null;
            this.y = null;
        };
        exports["default"] = Thumbnail;
        module.exports = exports["default"];
    }, {} ],
    231: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var ThumbnailTrackInfo = function ThumbnailTrackInfo() {
            _classCallCheck(this, ThumbnailTrackInfo);
            this.bitrate = 0;
            this.width = 0;
            this.height = 0;
            this.tilesHor = 0;
            this.tilesVert = 0;
            this.widthPerTile = 0;
            this.heightPerTile = 0;
            this.startNumber = 0;
            this.segmentDuration = 0;
            this.timescale = 0;
            this.templateUrl = "";
            this.id = "";
        };
        exports["default"] = ThumbnailTrackInfo;
        module.exports = exports["default"];
    }, {} ],
    232: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var URIFragmentData = function URIFragmentData() {
            _classCallCheck(this, URIFragmentData);
            this.t = null;
            this.xywh = null;
            this.track = null;
            this.id = null;
            this.s = null;
            this.r = null;
        };
        exports["default"] = URIFragmentData;
        module.exports = exports["default"];
    }, {} ],
    233: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var BufferLevel = function BufferLevel() {
            _classCallCheck(this, BufferLevel);
            this.t = null;
            this.level = null;
        };
        exports["default"] = BufferLevel;
        module.exports = exports["default"];
    }, {} ],
    234: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _controllersBufferController = _dereq_(113);
        var _controllersBufferController2 = _interopRequireDefault(_controllersBufferController);
        var BufferState = function BufferState() {
            _classCallCheck(this, BufferState);
            this.target = null;
            this.state = _controllersBufferController2["default"].BUFFER_EMPTY;
        };
        exports["default"] = BufferState;
        module.exports = exports["default"];
    }, {
        113: 113
    } ],
    235: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DVRInfo = function DVRInfo() {
            _classCallCheck(this, DVRInfo);
            this.time = null;
            this.range = null;
            this.manifestInfo = null;
        };
        exports["default"] = DVRInfo;
        module.exports = exports["default"];
    }, {} ],
    236: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var DroppedFrames = function DroppedFrames() {
            _classCallCheck(this, DroppedFrames);
            this.time = null;
            this.droppedFrames = null;
        };
        exports["default"] = DroppedFrames;
        module.exports = exports["default"];
    }, {} ],
    237: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var HTTPRequest = function HTTPRequest() {
            _classCallCheck(this, HTTPRequest);
            this.tcpid = null;
            this.type = null;
            this.url = null;
            this.actualurl = null;
            this.range = null;
            this.trequest = null;
            this.tresponse = null;
            this.responsecode = null;
            this.interval = null;
            this.trace = [];
            this._stream = null;
            this._tfinish = null;
            this._mediaduration = null;
            this._responseHeaders = null;
            this._serviceLocation = null;
        };
        var HTTPRequestTrace = function HTTPRequestTrace() {
            _classCallCheck(this, HTTPRequestTrace);
            this.s = null;
            this.d = null;
            this.b = [];
        };
        HTTPRequest.GET = "GET";
        HTTPRequest.HEAD = "HEAD";
        HTTPRequest.MPD_TYPE = "MPD";
        HTTPRequest.XLINK_EXPANSION_TYPE = "XLinkExpansion";
        HTTPRequest.INIT_SEGMENT_TYPE = "InitializationSegment";
        HTTPRequest.INDEX_SEGMENT_TYPE = "IndexSegment";
        HTTPRequest.MEDIA_SEGMENT_TYPE = "MediaSegment";
        HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = "BitstreamSwitchingSegment";
        HTTPRequest.OTHER_TYPE = "other";
        exports.HTTPRequest = HTTPRequest;
        exports.HTTPRequestTrace = HTTPRequestTrace;
    }, {} ],
    238: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var ManifestUpdate = function ManifestUpdate() {
            _classCallCheck(this, ManifestUpdate);
            this.mediaType = null;
            this.type = null;
            this.requestTime = null;
            this.fetchTime = null;
            this.availabilityStartTime = null;
            this.presentationStartTime = 0;
            this.clientTimeOffset = 0;
            this.currentTime = null;
            this.buffered = null;
            this.latency = 0;
            this.streamInfo = [];
            this.representationInfo = [];
        };
        var ManifestUpdateStreamInfo = function ManifestUpdateStreamInfo() {
            _classCallCheck(this, ManifestUpdateStreamInfo);
            this.id = null;
            this.index = null;
            this.start = null;
            this.duration = null;
        };
        var ManifestUpdateRepresentationInfo = function ManifestUpdateRepresentationInfo() {
            _classCallCheck(this, ManifestUpdateRepresentationInfo);
            this.id = null;
            this.index = null;
            this.mediaType = null;
            this.streamIndex = null;
            this.presentationTimeOffset = null;
            this.startNumber = null;
            this.fragmentInfoType = null;
        };
        exports.ManifestUpdate = ManifestUpdate;
        exports.ManifestUpdateStreamInfo = ManifestUpdateStreamInfo;
        exports.ManifestUpdateRepresentationInfo = ManifestUpdateRepresentationInfo;
    }, {} ],
    239: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var PlayList = function PlayList() {
            _classCallCheck(this, PlayList);
            this.start = null;
            this.mstart = null;
            this.starttype = null;
            this.trace = [];
        };
        PlayList.INITIAL_PLAYOUT_START_REASON = "initial_playout";
        PlayList.SEEK_START_REASON = "seek";
        PlayList.RESUME_FROM_PAUSE_START_REASON = "resume";
        PlayList.METRICS_COLLECTION_START_REASON = "metrics_collection_start";
        var PlayListTrace = function PlayListTrace() {
            _classCallCheck(this, PlayListTrace);
            this.representationid = null;
            this.subreplevel = null;
            this.start = null;
            this.mstart = null;
            this.duration = null;
            this.playbackspeed = null;
            this.stopreason = null;
        };
        PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON = "representation_switch";
        PlayListTrace.REBUFFERING_REASON = "rebuffering";
        PlayListTrace.USER_REQUEST_STOP_REASON = "user_request";
        PlayListTrace.END_OF_PERIOD_STOP_REASON = "end_of_period";
        PlayListTrace.END_OF_CONTENT_STOP_REASON = "end_of_content";
        PlayListTrace.METRICS_COLLECTION_STOP_REASON = "metrics_collection_end";
        PlayListTrace.FAILURE_STOP_REASON = "failure";
        exports.PlayList = PlayList;
        exports.PlayListTrace = PlayListTrace;
    }, {} ],
    240: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var RepresentationSwitch = function RepresentationSwitch() {
            _classCallCheck(this, RepresentationSwitch);
            this.t = null;
            this.mt = null;
            this.to = null;
            this.lto = null;
        };
        exports["default"] = RepresentationSwitch;
        module.exports = exports["default"];
    }, {} ],
    241: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var RequestsQueue = function RequestsQueue() {
            _classCallCheck(this, RequestsQueue);
            this.loadingRequests = [];
            this.executedRequests = [];
        };
        exports["default"] = RequestsQueue;
        module.exports = exports["default"];
    }, {} ],
    242: [ function(_dereq_, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var SchedulingInfo = function SchedulingInfo() {
            _classCallCheck(this, SchedulingInfo);
            this.mediaType = null;
            this.t = null;
            this.type = null;
            this.startTime = null;
            this.availabilityStartTime = null;
            this.duration = null;
            this.quality = null;
            this.range = null;
            this.state = null;
        };
        exports["default"] = SchedulingInfo;
        module.exports = exports["default"];
    }, {} ]
}, {}, [ 4 ]);
